{
  "custom.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the sensor(s).\n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
            },
            "sensors": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.ENTITY_BASE_SCHEMA",
                  "core.MQTT_COMPONENT_SCHEMA"
                ],
                "config_vars": {
                  "mqtt_id": {
                    "key": "Optional"
                  },
                  "id": {
                    "key": "GeneratedID"
                  },
                  "unit_of_measurement": {
                    "key": "Optional",
                    "type": "string"
                  },
                  "accuracy_decimals": {
                    "key": "Optional",
                    "type": "integer"
                  },
                  "device_class": {
                    "key": "Optional",
                    "type": "enum",
                    "values": [
                      "",
                      "aqi",
                      "battery",
                      "carbon_dioxide",
                      "carbon_monoxide",
                      "current",
                      "energy",
                      "gas",
                      "humidity",
                      "illuminance",
                      "monetary",
                      "nitrogen_dioxide",
                      "nitrogen_monoxide",
                      "nitrous_oxide",
                      "ozone",
                      "pm1",
                      "pm10",
                      "pm25",
                      "power",
                      "power_factor",
                      "pressure",
                      "signal_strength",
                      "sulphur_dioxide",
                      "temperature",
                      "timestamp",
                      "volatile_organic_compounds",
                      "voltage"
                    ]
                  },
                  "state_class": {
                    "key": "Optional",
                    "type": "enum",
                    "values": [
                      "",
                      "measurement",
                      "total_increasing"
                    ]
                  },
                  "force_update": {
                    "key": "Optional",
                    "default": "False",
                    "type": "boolean"
                  },
                  "expire_after": {
                    "key": "Optional",
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.time_period_dict"
                      ]
                    }
                  },
                  "filters": {
                    "key": "Optional",
                    "type": "registry",
                    "is_list": true,
                    "registry": "sensor.filter"
                  },
                  "on_value": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_raw_value": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_value_range": {
                    "key": "Optional",
                    "type": "trigger",
                    "schema": {
                      "config_vars": {
                        "above": {
                          "key": "Optional"
                        },
                        "below": {
                          "key": "Optional"
                        },
                        "then": {
                          "type": "trigger"
                        }
                      }
                    },
                    "has_required_var": true
                  }
                }
              },
              "docs": "**list**: A list of sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
            }
          }
        }
      }
    }
  },
  "custom.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the binary sensor(s).\n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
            },
            "binary_sensors": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.ENTITY_BASE_SCHEMA",
                  "core.MQTT_COMPONENT_SCHEMA"
                ],
                "config_vars": {
                  "id": {
                    "key": "GeneratedID"
                  },
                  "mqtt_id": {
                    "key": "Optional"
                  },
                  "device_class": {
                    "key": "Optional",
                    "type": "enum",
                    "values": [
                      "",
                      "battery",
                      "battery_charging",
                      "cold",
                      "connectivity",
                      "door",
                      "garage_door",
                      "gas",
                      "heat",
                      "light",
                      "lock",
                      "moisture",
                      "motion",
                      "moving",
                      "occupancy",
                      "opening",
                      "plug",
                      "power",
                      "presence",
                      "problem",
                      "running",
                      "safety",
                      "smoke",
                      "sound",
                      "tamper",
                      "update",
                      "vibration",
                      "window"
                    ]
                  },
                  "filters": {
                    "key": "Optional",
                    "type": "registry",
                    "is_list": true,
                    "registry": "binary_sensor.filter"
                  },
                  "on_press": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_release": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_click": {
                    "key": "Optional",
                    "type": "trigger",
                    "schema": {
                      "config_vars": {
                        "min_length": {
                          "key": "Optional",
                          "default": "50ms",
                          "type": "schema",
                          "schema": {
                            "extends": [
                              "core.time_period_dict"
                            ]
                          }
                        },
                        "max_length": {
                          "key": "Optional",
                          "default": "350ms",
                          "type": "schema",
                          "schema": {
                            "extends": [
                              "core.time_period_dict"
                            ]
                          }
                        },
                        "then": {
                          "type": "trigger"
                        }
                      }
                    }
                  },
                  "on_double_click": {
                    "key": "Optional",
                    "type": "trigger",
                    "schema": {
                      "config_vars": {
                        "min_length": {
                          "key": "Optional",
                          "default": "50ms",
                          "type": "schema",
                          "schema": {
                            "extends": [
                              "core.time_period_dict"
                            ]
                          }
                        },
                        "max_length": {
                          "key": "Optional",
                          "default": "350ms",
                          "type": "schema",
                          "schema": {
                            "extends": [
                              "core.time_period_dict"
                            ]
                          }
                        },
                        "then": {
                          "type": "trigger"
                        }
                      }
                    }
                  },
                  "on_multi_click": {
                    "key": "Optional",
                    "type": "trigger",
                    "schema": {
                      "config_vars": {
                        "timing": {
                          "key": "Required"
                        },
                        "invalid_cooldown": {
                          "key": "Optional",
                          "default": "1s",
                          "type": "schema",
                          "schema": {
                            "extends": [
                              "core.time_period_dict"
                            ]
                          }
                        },
                        "then": {
                          "type": "trigger"
                        }
                      }
                    },
                    "has_required_var": true
                  },
                  "on_state": {
                    "key": "Optional",
                    "type": "trigger"
                  }
                }
              },
              "docs": "**list**: A list of binary sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor).\n  \n  \n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
            }
          }
        }
      }
    }
  },
  "custom.climate": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the climate(s).\n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
            },
            "climates": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.ENTITY_BASE_SCHEMA",
                  "core.MQTT_COMMAND_COMPONENT_SCHEMA"
                ],
                "config_vars": {
                  "id": {
                    "key": "GeneratedID"
                  },
                  "mqtt_id": {
                    "key": "Optional"
                  },
                  "visual": {
                    "key": "Optional",
                    "default": "{}",
                    "type": "schema",
                    "schema": {
                      "config_vars": {
                        "min_temperature": {
                          "key": "Optional"
                        },
                        "max_temperature": {
                          "key": "Optional"
                        },
                        "temperature_step": {
                          "key": "Optional"
                        }
                      }
                    }
                  },
                  "action_state_topic": {
                    "key": "Optional"
                  },
                  "away_command_topic": {
                    "key": "Optional"
                  },
                  "away_state_topic": {
                    "key": "Optional"
                  },
                  "current_temperature_state_topic": {
                    "key": "Optional"
                  },
                  "fan_mode_command_topic": {
                    "key": "Optional"
                  },
                  "fan_mode_state_topic": {
                    "key": "Optional"
                  },
                  "mode_command_topic": {
                    "key": "Optional"
                  },
                  "mode_state_topic": {
                    "key": "Optional"
                  },
                  "swing_mode_command_topic": {
                    "key": "Optional"
                  },
                  "swing_mode_state_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_command_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_state_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_high_command_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_high_state_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_low_command_topic": {
                    "key": "Optional"
                  },
                  "target_temperature_low_state_topic": {
                    "key": "Optional"
                  },
                  "on_state": {
                    "key": "Optional",
                    "type": "trigger"
                  }
                }
              },
              "docs": "**list**: A list of climates to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Climate](https://esphome.io/components/climate/index.html#config-climate).\n  \n  \n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
            }
          }
        }
      }
    }
  },
  "custom.cover": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the cover(s).\n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
            },
            "covers": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.ENTITY_BASE_SCHEMA",
                  "core.MQTT_COMMAND_COMPONENT_SCHEMA"
                ],
                "config_vars": {
                  "id": {
                    "key": "GeneratedID"
                  },
                  "mqtt_id": {
                    "key": "Optional"
                  },
                  "device_class": {
                    "key": "Optional",
                    "type": "enum",
                    "values": [
                      "",
                      "awning",
                      "blind",
                      "curtain",
                      "damper",
                      "door",
                      "garage",
                      "gate",
                      "shade",
                      "shutter",
                      "window"
                    ]
                  },
                  "position_command_topic": {
                    "key": "Optional"
                  },
                  "position_state_topic": {
                    "key": "Optional"
                  },
                  "tilt_command_topic": {
                    "key": "Optional"
                  },
                  "tilt_state_topic": {
                    "key": "Optional"
                  },
                  "on_open": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_closed": {
                    "key": "Optional",
                    "type": "trigger"
                  }
                }
              },
              "docs": "**list**: A list of covers to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Cover](https://esphome.io/components/cover/index.html#config-cover).\n  \n  \n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
            }
          }
        }
      }
    }
  },
  "custom.light": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the light output(s).\n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
            },
            "lights": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "light.RGB_LIGHT_SCHEMA"
                ],
                "config_vars": {
                  "id": {
                    "key": "GeneratedID"
                  },
                  "effects": {
                    "key": "Optional",
                    "type": "registry",
                    "registry": "light.effects",
                    "filter": [
                      "lambda",
                      "automation",
                      "pulse",
                      "random",
                      "strobe",
                      "flicker",
                      "addressable_lambda",
                      "addressable_rainbow",
                      "addressable_color_wipe",
                      "addressable_scan",
                      "addressable_twinkle",
                      "addressable_random_twinkle",
                      "addressable_fireworks",
                      "addressable_flicker",
                      "adalight",
                      "e131",
                      "wled"
                    ]
                  },
                  "color_correct": {
                    "key": "Optional"
                  },
                  "power_supply": {
                    "key": "Optional"
                  }
                }
              },
              "docs": "**list**: A list of lights to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Light](https://esphome.io/components/light/index.html#config-light).\n  \n  \n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
            }
          }
        }
      }
    }
  },
  "custom.output": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "typed",
        "types": {
          "binary": {
            "config_vars": {
              "id": {
                "key": "GeneratedID"
              },
              "lambda": {
                "key": "Required",
                "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
              },
              "outputs": {
                "key": "Required",
                "is_list": true,
                "type": "schema",
                "schema": {
                  "extends": [
                    "output.BINARY_OUTPUT_SCHEMA"
                  ],
                  "config_vars": {
                    "id": {
                      "key": "GeneratedID"
                    }
                  }
                },
                "docs": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
              }
            }
          },
          "float": {
            "config_vars": {
              "id": {
                "key": "GeneratedID"
              },
              "lambda": {
                "key": "Required",
                "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
              },
              "outputs": {
                "key": "Required",
                "is_list": true,
                "type": "schema",
                "schema": {
                  "extends": [
                    "output.FLOAT_OUTPUT_SCHEMA"
                  ],
                  "config_vars": {
                    "id": {
                      "key": "GeneratedID"
                    }
                  }
                },
                "docs": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
              }
            }
          }
        }
      }
    }
  },
  "custom.switch": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the switch(es).\n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
            },
            "switches": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "switch.SWITCH_SCHEMA"
                ],
                "config_vars": {
                  "id": {
                    "key": "GeneratedID"
                  }
                }
              },
              "docs": "**list**: A list of switches to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Switch](https://esphome.io/components/switch/index.html#config-switch).\n  \n  \n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
            }
          }
        }
      }
    }
  },
  "custom.text_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID"
            },
            "lambda": {
              "key": "Required",
              "docs": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the text sensor(s).\n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
            },
            "text_sensors": {
              "key": "Required",
              "is_list": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.ENTITY_BASE_SCHEMA",
                  "core.MQTT_COMPONENT_SCHEMA"
                ],
                "config_vars": {
                  "mqtt_id": {
                    "key": "Optional"
                  },
                  "id": {
                    "key": "GeneratedID"
                  },
                  "filters": {
                    "key": "Optional",
                    "type": "registry",
                    "is_list": true,
                    "registry": "text_sensor.filter"
                  },
                  "on_value": {
                    "key": "Optional",
                    "type": "trigger"
                  },
                  "on_raw_value": {
                    "key": "Optional",
                    "type": "trigger"
                  }
                }
              },
              "docs": "**list**: A list of text sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
            }
          }
        }
      }
    }
  }
}
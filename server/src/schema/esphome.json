{"esphome": {"schemas": {"CONFIG_SCHEMA": {"config_vars": {"name": {"key": "Required", "type": "string"}, "comment": {"key": "Optional", "type": "string"}, "build_path": {"key": "Required", "type": "string"}, "platformio_options": {"key": "String", "default": "{}", "key_dump": "<function string_strict at 0x0000029D313BA670>", "type": "schema", "schema": {"config_vars": {"<function string_strict at 0x0000029D313BA670>": {"type": "string"}}}}, "on_boot": {"key": "Optional", "type": "trigger", "schema": {"config_vars": {"priority": {"key": "Optional", "default": "600.0"}, "then": {"type": "trigger"}}}}, "on_shutdown": {"key": "Optional", "type": "trigger"}, "on_loop": {"key": "Optional", "type": "trigger"}, "includes": {"key": "Optional", "default": "[]", "is_list": true}, "libraries": {"key": "Optional", "default": "[]", "is_list": true, "type": "string"}, "name_add_mac_suffix": {"key": "Optional", "default": "False", "type": "boolean"}, "project": {"key": "Optional", "type": "schema", "schema": {"config_vars": {"name": {"key": "Required", "type": "string"}, "version": {"key": "Required", "type": "string"}}}}}}, "PRELOAD_CONFIG_SCHEMA": {"config_vars": {"name": {"key": "Required", "type": "string"}, "build_path": {"key": "Optional", "type": "string"}, "platform": {"key": "Optional", "type": "enum", "values": ["esp32", "esp8266"]}, "board": {"key": "Optional", "type": "string"}, "esp8266_restore_from_flash": {"key": "Optional"}, "board_flash_mode": {"key": "Optional"}, "arduino_version": {"key": "Optional"}}}}}, "core": {"schemas": {"port": {"type": "integer"}, "uint8_t": {"type": "integer"}, "uint16_t": {"type": "integer"}, "uint32_t": {"type": "integer"}, "uint64_t": {"type": "integer"}, "positive_float": {}, "zero_to_one_float": {}, "negative_one_to_one_float": {}, "positive_int": {"type": "integer"}, "positive_not_null_int": {"type": "integer"}, "time_period_dict": {"config_vars": {"days": {"key": "Optional"}, "hours": {"key": "Optional"}, "minutes": {"key": "Optional"}, "seconds": {"key": "Optional"}, "milliseconds": {"key": "Optional"}, "microseconds": {"key": "Optional"}}}, "positive_time_period_milliseconds": {"extends": ["core.time_period_dict"]}, "positive_time_period_seconds": {"extends": ["core.time_period_dict"]}, "positive_time_period_minutes": {"extends": ["core.time_period_dict"]}, "time_period_microseconds": {"extends": ["core.time_period_dict"]}, "positive_time_period_microseconds": {"extends": ["core.time_period_dict"]}, "positive_not_null_time_period": {"extends": ["core.time_period_dict"]}, "hex_uint8_t": {}, "hex_uint16_t": {}, "hex_uint32_t": {}, "hex_uint64_t": {}, "i2c_address": {"extends": ["core.hex_uint8_t"]}, "MQTT_COMPONENT_AVAILABILITY_SCHEMA": {"config_vars": {"topic": {"key": "Required"}, "payload_available": {"key": "Optional", "default": "online"}, "payload_not_available": {"key": "Optional", "default": "offline"}}}, "MQTT_COMPONENT_SCHEMA": {"config_vars": {"retain": {"key": "Optional", "type": "boolean"}, "discovery": {"key": "Optional", "type": "boolean"}, "state_topic": {"key": "Optional"}, "availability": {"key": "Optional", "type": "schema", "schema": {"extends": ["core.MQTT_COMPONENT_AVAILABILITY_SCHEMA"]}}}}, "COMPONENT_SCHEMA": {"config_vars": {"setup_priority": {"key": "Optional"}}}, "MQTT_COMMAND_COMPONENT_SCHEMA": {"extends": ["core.MQTT_COMPONENT_SCHEMA"], "config_vars": {"command_topic": {"key": "Optional"}, "command_retain": {"key": "Optional", "type": "boolean"}}}, "ENTITY_BASE_SCHEMA": {"config_vars": {"name": {"key": "Optional", "type": "string", "docs": "**string**: The name of the sensor.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"}, "internal": {"key": "Optional", "type": "boolean", "docs": "**boolean**: Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an `id` without a `name` will implicitly set this to true.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"}, "disabled_by_default": {"key": "Optional", "default": "False", "type": "boolean", "docs": "**boolean**: If true, then this entity should not be added to any client\u2019s frontend, (usually Home Assistant) without the user manually enabling it (via the Home Assistant UI). Requires Home Assistant 2021.9 or newer. Defaults to `false`.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"}, "icon": {"key": "Optional", "docs": "**icon**: Manually set the icon to use for the sensor in the frontend.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"}, "entity_category": {"key": "Optional", "docs": "**string**: The category of the entity. See [https://developers.home-assistant.io/docs/core/entity/#generic-properties](https://developers.home-assistant.io/docs/core/entity/#generic-properties) for a list of available options. Requires Home Assistant 2021.11 or newer. Set to `\"\"` to remove the default entity category.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"}}}}, "platforms": {"sensor": {"docs": "ESPHome has support for many different sensors. Each of them is a platform of the `sensor` domain and each sensor has several base configuration options.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#sensor-component)*"}, "binary_sensor": {}, "light": {}}, "components": {"esphome": {}, "esp32": {}, "esp8266": {}, "logger": {}, "ota": {"docs": "With the OTA (Over The Air) update component you can upload your firmware binaries to your node without having to use a USB cable for uploads. ESPHome natively supports this through its `run` and `upload` helper scripts.\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#ota-update-component)*"}, "i2c": {}, "api": {}, "wifi": {}, "sim800l": {}, "dallas": {}, "pn532": {}, "pn532_i2c": {}, "pcf8574": {}}, "action": {"delay": {"templatable": true, "type": "schema", "schema": {"extends": ["core.positive_time_period_milliseconds"]}}, "if": {"type": "schema", "schema": {"config_vars": {"condition": {"key": "Required", "type": "registry", "registry": "condition"}, "then": {"key": "Optional", "is_list": true, "type": "registry", "registry": "action"}, "else": {"key": "Optional", "is_list": true, "type": "registry", "registry": "action"}}}}, "while": {"type": "schema", "schema": {"config_vars": {"condition": {"key": "Required", "type": "registry", "registry": "condition"}, "then": {"key": "Required", "is_list": true, "type": "registry", "registry": "action"}}}}, "repeat": {"type": "schema", "schema": {"config_vars": {"count": {"key": "Required", "templatable": true, "type": "schema", "schema": {"extends": ["core.positive_not_null_int"]}}, "then": {"key": "Required", "is_list": true, "type": "registry", "registry": "action"}}}}, "wait_until": {}, "lambda": {}}, "condition": {"and": {"is_list": true, "type": "registry", "registry": "condition"}, "or": {"is_list": true, "type": "registry", "registry": "condition"}, "not": {"type": "registry", "registry": "condition"}, "lambda": {}, "for": {"type": "schema", "schema": {"config_vars": {"time": {"key": "Required", "templatable": true, "type": "schema", "schema": {"extends": ["core.positive_time_period_milliseconds"]}}, "condition": {"key": "Required", "type": "registry", "registry": "condition"}}, "extends": ["core.COMPONENT_SCHEMA"]}}}, "pins": ["esp32", "esp8266", "pcf8574"]}}
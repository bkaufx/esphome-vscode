{
  "esphome": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "config_vars": {
          "name": { "key": "Required", "type": "<class 'function'>" },
          "comment": { "key": "Optional", "type": "<class 'function'>" },
          "build_path": { "key": "Required", "type": "<class 'function'>" },
          "platformio_options": {
            "key": "Optional",
            "default": "{}",
            "type": "schema",
            "schema": { "config_vars": {}, "type": "dict" }
          },
          "on_boot": {
            "key": "Optional",
            "type": "trigger",
            "schema": {
              "config_vars": {
                "trigger_id": {
                  "key": "GeneratedID",
                  "type": "<class 'function'>"
                },
                "priority": {
                  "key": "Optional",
                  "default": "600.0",
                  "type": "<class 'voluptuous.validators.Coerce'>"
                },
                "then": { "type": "trigger" }
              }
            }
          },
          "on_shutdown": { "key": "Optional", "type": "trigger" },
          "on_loop": { "key": "Optional", "type": "trigger" },
          "includes": {
            "key": "Optional",
            "default": "[]",
            "type": "<class 'function'>",
            "is_list": true
          },
          "libraries": {
            "key": "Optional",
            "default": "[]",
            "type": "<class 'function'>",
            "is_list": true
          },
          "name_add_mac_suffix": {
            "key": "Optional",
            "default": "False",
            "type": "boolean"
          },
          "project": {
            "key": "Optional",
            "type": "schema",
            "schema": {
              "config_vars": {
                "name": {
                  "key": "Required",
                  "type": "<class 'voluptuous.validators.All'>"
                },
                "version": { "key": "Required", "type": "<class 'function'>" }
              }
            }
          }
        }
      },
      "PRELOAD_CONFIG_SCHEMA": {
        "config_vars": {
          "name": { "key": "Required", "type": "<class 'function'>" },
          "build_path": { "key": "Optional", "type": "<class 'function'>" },
          "platform": {
            "key": "Optional",
            "type": "enum",
            "values": ["esp32", "esp8266"]
          },
          "board": { "key": "Optional", "type": "<class 'function'>" },
          "esp8266_restore_from_flash": {
            "key": "Optional",
            "type": "<class 'function'>"
          },
          "board_flash_mode": {
            "key": "Optional",
            "type": "<class 'function'>"
          },
          "arduino_version": { "key": "Optional", "type": "<class 'function'>" }
        }
      }
    }
  },
  "core": {
    "schemas": {
      "port": { "config_vars": {} },
      "uint8_t": { "config_vars": {} },
      "uint16_t": { "config_vars": {} },
      "uint32_t": { "config_vars": {} },
      "uint64_t": { "config_vars": {} },
      "positive_float": { "config_vars": {} },
      "zero_to_one_float": { "config_vars": {} },
      "negative_one_to_one_float": { "config_vars": {} },
      "positive_int": { "config_vars": {} },
      "positive_not_null_int": { "config_vars": {} },
      "time_period_dict": {
        "config_vars": {
          "days": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          },
          "hours": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          },
          "minutes": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          },
          "seconds": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          },
          "milliseconds": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          },
          "microseconds": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          }
        }
      },
      "positive_time_period_milliseconds": { "config_vars": {} },
      "positive_time_period_seconds": { "config_vars": {} },
      "positive_time_period_minutes": { "config_vars": {} },
      "time_period_microseconds": { "config_vars": {} },
      "positive_time_period_microseconds": { "config_vars": {} },
      "positive_not_null_time_period": { "config_vars": {} },
      "hex_uint8_t": { "config_vars": {} },
      "hex_uint16_t": { "config_vars": {} },
      "hex_uint32_t": { "config_vars": {} },
      "hex_uint64_t": { "config_vars": {} },
      "i2c_address": { "config_vars": {}, "extends": ["core.hex_uint8_t"] },
      "MQTT_COMPONENT_AVAILABILITY_SCHEMA": {
        "config_vars": {
          "topic": { "key": "Required", "type": "<class 'function'>" },
          "payload_available": {
            "key": "Optional",
            "default": "online",
            "type": "<class 'function'>"
          },
          "payload_not_available": {
            "key": "Optional",
            "default": "offline",
            "type": "<class 'function'>"
          }
        }
      },
      "MQTT_COMPONENT_SCHEMA": {
        "config_vars": {
          "retain": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          },
          "discovery": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          },
          "state_topic": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          },
          "availability": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          }
        }
      },
      "COMPONENT_SCHEMA": {
        "config_vars": {
          "setup_priority": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.Coerce'>"
          }
        }
      },
      "MQTT_COMMAND_COMPONENT_SCHEMA": {
        "config_vars": {
          "command_topic": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          },
          "command_retain": {
            "key": "Optional",
            "type": "<class 'voluptuous.validators.All'>"
          }
        },
        "extends": ["core.MQTT_COMPONENT_SCHEMA"]
      },
      "ENTITY_BASE_SCHEMA": {
        "config_vars": {
          "name": { "key": "Optional", "type": "<class 'function'>" },
          "internal": { "key": "Optional", "type": "boolean" },
          "disabled_by_default": {
            "key": "Optional",
            "default": "False",
            "type": "boolean"
          },
          "icon": { "key": "Optional", "type": "<class 'function'>" },
          "entity_category": { "key": "Optional", "type": "<class 'function'>" }
        }
      }
    },
    "platforms": ["sensor", "binary_sensor"],
    "components": [
      "esphome",
      "esp32",
      "esp8266",
      "wifi",
      "sim800l",
      "dallas",
      "pn532",
      "pn532_i2c",
      "pcf8574"
    ],
    "actions": {
      "delay": { "config_vars": {} },
      "if": {
        "config_vars": {
          "condition": {
            "key": "Required",
            "type": "registry",
            "registry": "conditions"
          },
          "then": {
            "key": "Optional",
            "type": "registry",
            "is_list": true,
            "registry": "core.ACTION_REGISTRY"
          },
          "else": {
            "key": "Optional",
            "type": "registry",
            "is_list": true,
            "registry": "core.ACTION_REGISTRY"
          }
        }
      },
      "while": {
        "config_vars": {
          "condition": {
            "key": "Required",
            "type": "registry",
            "registry": "conditions"
          },
          "then": {
            "key": "Required",
            "type": "registry",
            "is_list": true,
            "registry": "core.ACTION_REGISTRY"
          }
        }
      },
      "repeat": {
        "config_vars": {
          "count": { "key": "Required", "type": "<class 'function'>" },
          "then": {
            "key": "Required",
            "type": "registry",
            "is_list": true,
            "registry": "core.ACTION_REGISTRY"
          }
        }
      },
      "wait_until": { "config_vars": {} },
      "lambda": { "config_vars": {} }
    },
    "conditions": {
      "and": { "config_vars": {} },
      "or": { "config_vars": {} },
      "not": { "config_vars": {} },
      "lambda": { "config_vars": {} },
      "for": {
        "config_vars": {
          "time": { "key": "Required", "type": "<class 'function'>" },
          "condition": {
            "key": "Required",
            "type": "registry",
            "registry": "conditions"
          }
        },
        "extends": ["core.COMPONENT_SCHEMA"]
      }
    }
  }
}

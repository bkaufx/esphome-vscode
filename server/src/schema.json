{"$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "definitions": {"CONFIG.COMPONENT_SCHEMA": {"properties": {"setup_priority": {"type": "number"}}, "type": ["object", "null"]}, "CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA": {"allOf": [{"properties": {"name": {"type": "string", "markdownDescription": "string: The name to use for the MQTT Component."}, "retain": {"type": "boolean", "markdownDescription": "boolean: If all MQTT state messages should be retained. Defaults to `True`."}, "discovery": {"type": "boolean", "markdownDescription": "boolean: Manually enable/disable discovery for a component. Defaults to the global default."}, "state_topic": {"type": "string", "markdownDescription": "string: The topic to publish state updates to. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/state`."}, "availability": {"properties": {"topic": {"type": "string"}, "payload_available": {"type": "string"}, "payload_not_available": {"type": "string"}}, "type": ["object", "null"], "markdownDescription": "Manually set what should be sent to Home Assistant for showing entity availability. Default derived from [global birth/last will message](https://esphome.io/components/mqtt.html#mqtt-last-will-birth)."}, "internal": {"type": "boolean"}, "command_topic": {"type": "string", "markdownDescription": "string: The topic to subscribe to for commands from the remote. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/command`."}}, "type": ["object", "null"]}], "markdownDescription": "All components in ESPHome that do some sort of communication through MQTT can have some overrides for specific options."}, "CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA": {"properties": {"topic": {"type": "string"}, "payload_available": {"type": "string"}, "payload_not_available": {"type": "string"}}, "type": ["object", "null"]}, "CONFIG.MQTT_COMPONENT_SCHEMA": {"properties": {"name": {"type": "string"}, "retain": {"type": "boolean"}, "discovery": {"type": "boolean"}, "state_topic": {"type": "string"}, "availability": {"$ref": "#/definitions/CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA"}, "internal": {"type": "boolean"}}, "type": ["object", "null"]}, "POLLING_COMPONENT": {"allOf": [{"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"properties": {"update_interval": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "PIN.GPIO_FULL_ANALOG_PIN_SCHEMA": {"properties": {"number": {"type": ["null", "object", "string", "array", "number"]}, "mode": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "PIN.GPIO_FULL_INPUT_PIN_SCHEMA": {"properties": {"number": {"type": "string", "markdownDescription": "pin: The pin number."}, "mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: A pin mode to set for the pin at startup, corresponds to Arduino\u2019s `pinMode` call."}, "inverted": {"type": "boolean", "markdownDescription": "boolean: If all read and written values should be treated as inverted. Defaults to `False`."}}, "type": ["string", "object"], "markdownDescription": "In some places, ESPHome also supports a more advanced \u201cpin schema\u201d."}, "PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA": {"properties": {"number": {"type": "string"}, "mode": {"type": ["null", "object", "string", "array", "number"]}, "inverted": {"type": "boolean"}}, "type": ["string", "object"]}, "REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA": {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The remote transmitter to send the remote code with. Defaults to the first one defined in the configuration."}, "repeat": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Optionally set the code to be repeated a number of times. Defaults to sending the code only once.\n  * **times** (int): The number of times to repeat the code.\n  \n  * **wait_time** ([Time](https://esphome.io/guides/configuration-types.html#config-time)): The time to wait between repeats."}}, "type": ["object", "null"], "markdownDescription": "Remote transmitters support a number of [actions](https://esphome.io/guides/automations.html#config-action) that can be used to send remote codes. All supported protocols are listed below. All actions additionally have these configuration variables:"}, "REMOTE_BASE.JVC_SCHEMA": {"properties": {"data": {"type": "string"}}, "type": ["object", "null"]}, "REMOTE_BASE.LG_SCHEMA": {"properties": {"data": {"type": "string"}, "nbits": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "REMOTE_BASE.NEC_SCHEMA": {"properties": {"address": {"type": "string"}, "command": {"type": "string"}}, "type": ["object", "null"]}, "REMOTE_BASE.PANASONIC_SCHEMA": {"properties": {"address": {"type": "string"}, "command": {"type": "string"}}, "type": ["object", "null"]}, "REMOTE_BASE.PIONEER_SCHEMA": {"properties": {"rc_code_1": {"type": "string"}, "rc_code_2": {"type": "string"}}, "type": ["object", "null"]}, "REMOTE_BASE.RAW_SCHEMA-code[]": {"type": ["object", "null"], "properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}}, "REMOTE_BASE.RAW_SCHEMA": {"properties": {"code": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA-code[]"}}, "code_storage_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "REMOTE_BASE.RC5_SCHEMA": {"properties": {"address": {"type": "string"}, "command": {"type": "string"}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]": {"type": "number"}, "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA": {"properties": {"code": {"type": ["null", "object", "string", "array", "number"]}, "protocol": {"type": ["object", "null"], "properties": {"pulse_length": {"type": "number"}, "sync": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "zero": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "one": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "inverted": {"type": "boolean"}}}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat": {"properties": {"times": {"type": ["null", "object", "string", "array", "number"]}, "wait_time": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TRANSMITTER": {"properties": {"repeat": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat"}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA": {"properties": {"group": {"type": ["null", "object", "string", "array", "number"]}, "device": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": "boolean"}, "protocol": {"type": ["object", "null"], "properties": {"pulse_length": {"type": "number"}, "sync": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "zero": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "one": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "inverted": {"type": "boolean"}}}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA": {"properties": {"address": {"type": "number"}, "channel": {"type": "number"}, "state": {"type": "boolean"}, "protocol": {"type": ["object", "null"], "properties": {"pulse_length": {"type": "number"}, "sync": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "zero": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "one": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "inverted": {"type": "boolean"}}}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA": {"properties": {"family": {"type": ["null", "object", "string", "array", "number"]}, "group": {"type": "number"}, "device": {"type": "number"}, "state": {"type": "boolean"}, "protocol": {"type": ["object", "null"], "properties": {"pulse_length": {"type": "number"}, "sync": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "zero": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "one": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "inverted": {"type": "boolean"}}}}, "type": ["object", "null"]}, "REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA": {"properties": {"group": {"type": ["null", "object", "string", "array", "number"]}, "device": {"type": "number"}, "state": {"type": "boolean"}, "protocol": {"type": ["object", "null"], "properties": {"pulse_length": {"type": "number"}, "sync": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "zero": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "one": {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}, "inverted": {"type": "boolean"}}}}, "type": ["object", "null"]}, "REMOTE_BASE.SONY_SCHEMA": {"properties": {"data": {"type": "string"}, "nbits": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "AUTOMATION.AUTOMATION_SCHEMA": {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "automation_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}, "uart.write": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "data": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "homeassistant.service-data": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "homeassistant.service-variables": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "homeassistant.tag_scanned": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "tag": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "canbus.send": {"properties": {"canbus_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Optionally set the can bus id to use for transmitting the frame. Not needed if you are using only 1 can bus."}, "can_id": {"type": "number", "markdownDescription": "int: Allows to override the can id configured in the can bus device."}, "use_extended_id": {"type": "boolean", "markdownDescription": "boolean: default *False* identifies the type of *can_id*: *False*: Standard 11 Bit IDs, *True*: Extended 29Bit ID"}, "data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "binary data: Data to transmit, up to 8 bytes or characters are supported by can bus per frame."}}, "type": ["object", "null"]}, "dfplayer.play": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "file": {"type": ["null", "object", "string", "array", "number"]}, "loop": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "dfplayer.set_device": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "device": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "dfplayer.set_volume": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "volume": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "dfplayer.set_eq": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "eq_preset": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "rtttl.play": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "rtttl": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "tm1651.set_level_percent": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the TM1651."}, "level_percent": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), int: Level from 0 to 100"}}, "type": ["object", "null"]}, "tm1651.set_level": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the TM1651."}, "level": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), int: Level from 0 to 7"}}, "type": ["object", "null"]}, "tm1651.set_brightness": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the TM1651."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), int: There is three levels of brightness (`1`, `2` or `3`) from lowest to highest brightness."}}, "type": ["object", "null"]}, "automation.ACTION_REGISTRY": {"anyOf": [{"type": "object", "properties": {"delay": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "This action delays the execution of the next action in the action list by a specified time period."}}}, {"type": "object", "properties": {"if": {"properties": {"condition": {"$ref": "#/definitions/condition_list", "markdownDescription": "[All Conditions](https://esphome.io/guides/automations.html#config-condition): The condition to check which branch to take. See [Conditions](https://esphome.io/guides/automations.html#config-condition)."}, "then": {"anyOf": [{"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}], "markdownDescription": "[Actions](https://esphome.io/guides/automations.html#config-action): The action to perform if the condition evaluates to true. Defaults to doing nothing."}, "else": {"anyOf": [{"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}], "markdownDescription": "[Actions](https://esphome.io/guides/automations.html#config-action): The action to perform if the condition evaluates to false. Defaults to doing nothing."}}, "type": ["object", "null"], "markdownDescription": "This action first evaluated a certain condition (`if:`) and then either executes the `then:` branch or the `else:` branch depending on the output of the condition."}}}, {"type": "object", "properties": {"while": {"properties": {"condition": {"$ref": "#/definitions/condition_list", "markdownDescription": "The condition to check whether to execute. See [Conditions](https://esphome.io/guides/automations.html#config-condition)."}, "then": {"anyOf": [{"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}], "markdownDescription": "[Actions](https://esphome.io/guides/automations.html#config-action): The action to perform until the condition evaluates to false."}}, "type": ["object", "null"], "markdownDescription": "This action is similar to the [if](https://esphome.io/guides/automations.html#if-action) Action. The `while` action executes a block until a given condition evaluates to false."}}}, {"type": "object", "properties": {"wait_until": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "This action allows your automations to wait until a condition evaluates to true. (So this is just a shorthand way of writing a `while` action with an empty `then` block.)"}}}, {"type": "object", "properties": {"lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "This action executes an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda))."}}}, {"type": "object", "properties": {"component.update": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Using this action you can manually call the `update()` method of a component."}}}, {"type": "object", "properties": {"logger.log": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Print a formatted message to the logs."}}}, {"type": "object", "properties": {"mqtt.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": ["null", "object", "string", "array", "number"]}, "payload": {"type": ["null", "object", "string", "array", "number"]}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Publish an MQTT message on a topic using this action in automations."}}}, {"type": "object", "properties": {"mqtt.publish_json": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": ["null", "object", "string", "array", "number"]}, "payload": {"type": ["null", "object", "string", "array", "number"]}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Publish a JSON-formatted MQTT message on a topic using this action in automations."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_jvc": {"allOf": [{"properties": {"data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The JVC code to send, see dumper output for more info."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a JVC infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_lg": {"allOf": [{"properties": {"data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The LG code to send, see dumper output for more info."}, "nbits": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The number of bits to send. Defaults to `28`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an LG infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_nec": {"allOf": [{"properties": {"address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The address to send, see dumper output for more details."}, "command": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The NEC command to send."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an NEC infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_pioneer": {"allOf": [{"properties": {"rc_code_1": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The remote control code to send, see dumper output for more details."}, "rc_code_2": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The secondary remote control code to send; some codes are sent in two parts."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Pioneer infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_sony": {"allOf": [{"properties": {"data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The Sony code to send, see dumper output for more info."}, "nbits": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The number of bits to send. Defaults to `12`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) a Sony infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_raw": {"allOf": [{"properties": {"code": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "list: The raw code to send as a list of integers. Positive numbers represent a digital high signal and negative numbers a digital low signal. The number itself encodes how long the signal should last (in microseconds)."}, "code_storage_id": {"type": ["null", "object", "string", "array", "number"]}, "carrier_frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Optionally set a frequency to send the signal with for infrared signals. Defaults to `0Hz`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a raw code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc5": {"allOf": [{"properties": {"address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The address to send, see dumper output for more details."}, "command": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The RC5 command to send."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends an RC5 infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc_switch_raw": {"allOf": [{"properties": {"code": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The raw code to send, copy this from the dump output."}, "protocol": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information."}, "repeat": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a raw RC-Switch code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc_switch_type_a": {"allOf": [{"properties": {"group": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The group to send the command to."}, "device": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The device in the group to send the command to."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean: The on/off state to send."}, "protocol": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information."}, "repeat": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type A RC-Switch code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc_switch_type_b": {"allOf": [{"properties": {"address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The address to send the command to."}, "channel": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The channel to send the command to."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean: The on/off state to send."}, "protocol": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information."}, "repeat": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type B RC-Switch code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc_switch_type_c": {"allOf": [{"properties": {"family": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The family to send the command to. Range is `a` to `p`."}, "group": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The group to send the command to. Range is 1 to 4."}, "device": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The device to send the command to. Range is 1 to 4."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean: The on/off state to send."}, "protocol": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information."}, "repeat": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type C RC-Switch code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_rc_switch_type_d": {"allOf": [{"properties": {"group": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The group to send the command to. Range is 1 to 4."}, "device": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The device to send the command to. Range is 1 to 3."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean: The on/off state to send."}, "protocol": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The RC Switch protocol to use, see [RC Switch Protocol](https://esphome.io/components/remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more information."}, "repeat": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a type D RC-Switch code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_samsung": {"allOf": [{"properties": {"data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The data to send, see dumper output for more details."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Samsung infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"remote_transmitter.transmit_panasonic": {"allOf": [{"properties": {"address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The address to send the command to, see dumper output for more details."}, "command": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The command to send."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a Panasonic infrared remote code to a remote transmitter."}}}, {"type": "object", "properties": {"uart.write": {"anyOf": [{"$ref": "#/definitions/uart.write"}, {"type": "array", "items": {"$ref": "#/definitions/uart.write"}}], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) sends a defined UART signal to the given UART bus."}}}, {"type": "object", "properties": {"light.toggle": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the light."}, "transition_length": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable): The length of the transition if the light supports it."}}, "type": ["object", "null"], "markdownDescription": "This action toggles a light with the given ID when executed."}}}, {"type": "object", "properties": {"light.control": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the light."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), boolean: Change the ON/OFF state of the light."}, "transition_length": {"type": ["null", "object", "string", "array", "number"]}, "flash_length": {"type": ["null", "object", "string", "array", "number"]}, "effect": {"type": ["null", "object", "string", "array", "number"]}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"]}, "green": {"type": ["null", "object", "string", "array", "number"]}, "blue": {"type": ["null", "object", "string", "array", "number"]}, "white": {"type": ["null", "object", "string", "array", "number"]}, "color_temperature": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) is a generic call to change the state of a light - it is essentially just a combination of the turn_on and turn_off calls."}}}, {"type": "object", "properties": {"light.turn_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the light."}, "state": {"type": ["null", "object", "string", "array", "number"]}, "transition_length": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable): The length of the transition if the light supports it."}, "flash_length": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable): If set, will flash the given color for this period of time and then go back to the previous state."}, "effect": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string, [templatable](https://esphome.io/guides/automations.html#config-templatable): If set, will attempt to start an effect with the given name."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable): The brightness of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing brightness."}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable): The red channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing red."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable): The green channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing green channel."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable): The blue channel of the light. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing blue channel."}, "white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage, [templatable](https://esphome.io/guides/automations.html#config-templatable): The white channel value of RGBW lights. Must be in range `0%` to `100%` or `0.0` to `1.0`. Defaults to not changing white value."}, "color_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float, [templatable](https://esphome.io/guides/automations.html#config-templatable): The white color temperature value (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) for CWWW / RGBWW lights. Defaults to not changing the color temperature value."}}, "type": ["object", "null"], "markdownDescription": "This action turns a light with the given ID on when executed."}}}, {"type": "object", "properties": {"light.turn_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the light."}, "transition_length": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable): The length of the transition if the light supports it."}, "state": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action turns a light with the given ID off when executed."}}}, {"type": "object", "properties": {"light.dim_relative": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the light."}, "relative_brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage: The relative brightness to dim the light by."}, "transition_length": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time), [templatable](https://esphome.io/guides/automations.html#config-templatable): The length of the transition."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to dim a light that supports brightness by a relative amount."}}}, {"type": "object", "properties": {"light.addressable_set": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the addressable light to control."}, "range_from": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), int: The beginning of the range of LEDs to control. 0-based indexing. Defaults to 0 (the beginning of the strip)."}, "range_to": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), int: The end of the range of LEDs to control - this is a half-open interval. 0-based indexing. Defaults to the end of the strip (`num_leds`)."}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage: The value to set the red channel to."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage: The value to set the green channel to."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage: The value to set the blue channel to."}, "white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), percentage: The value to set the white channel to."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually set a range of LEDs on an addressable light to a specific color."}}}, {"type": "object", "properties": {"display.page.show": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"display.page.show_next": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"display.page.show_previous": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"homeassistant.service": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "service": {"type": ["null", "object", "string", "array", "number"]}, "data": {"$ref": "#/definitions/homeassistant.service-data"}, "data_template": {"$ref": "#/definitions/homeassistant.service-data"}, "variables": {"$ref": "#/definitions/homeassistant.service-variables"}}, "type": ["object", "null"], "markdownDescription": "When using the native API with Home Assistant, you can create Home Assistant service calls straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation)."}}}, {"type": "object", "properties": {"homeassistant.event": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "event": {"type": ["null", "object", "string", "array", "number"]}, "data": {"$ref": "#/definitions/homeassistant.service-data"}, "data_template": {"$ref": "#/definitions/homeassistant.service-data"}, "variables": {"$ref": "#/definitions/homeassistant.service-data"}}, "type": ["object", "null"], "markdownDescription": "When using the native API with Home Assistant, you can create events in the Home Assistant event bus straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation)."}}}, {"type": "object", "properties": {"homeassistant.tag_scanned": {"anyOf": [{"$ref": "#/definitions/homeassistant.tag_scanned"}, {"type": "array", "items": {"$ref": "#/definitions/homeassistant.tag_scanned"}}], "markdownDescription": "When using the native API with Home Assistant, you can push tag_scanned to Home Assistant straight from ESPHome [Automations](https://esphome.io/guides/automations.html#automation)."}}}, {"type": "object", "properties": {"canbus.send": {"anyOf": [{"$ref": "#/definitions/canbus.send"}, {"type": "array", "items": {"$ref": "#/definitions/canbus.send"}}], "markdownDescription": "The can bus can transmit frames by means of the `canbus.send` action. There are several forms to use it:"}}}, {"type": "object", "properties": {"climate.control": {"$ref": "#/definitions/climate.CLIMATE_CONTROL_ACTION_SCHEMA", "markdownDescription": "This is an [Action](https://esphome.io/guides/automations.html#config-action) for setting parameters for climate devices."}}}, {"type": "object", "properties": {"cover.open": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) opens the cover with the given ID when executed."}}}, {"type": "object", "properties": {"cover.close": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) closes the cover with the given ID when executed."}}}, {"type": "object", "properties": {"cover.stop": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) stops the cover with the given ID when executed."}}}, {"type": "object", "properties": {"cover.control": {"$ref": "#/definitions/cover.COVER_CONTROL_ACTION_SCHEMA", "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) is a more generic version of the other cover actions and allows all cover attributes to be set."}}}, {"type": "object", "properties": {"deep_sleep.enter": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sleep_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"], "markdownDescription": "This action makes the given deep sleep component enter deep sleep immediately."}}}, {"type": "object", "properties": {"deep_sleep.prevent": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action prevents the given deep sleep component from entering deep sleep. Useful for"}}}, {"type": "object", "properties": {"dfplayer.play_next": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Starts playback of next track or skips to the next track."}}}, {"type": "object", "properties": {"dfplayer.play_previous": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Plays the previously played track."}}}, {"type": "object", "properties": {"dfplayer.play": {"anyOf": [{"$ref": "#/definitions/dfplayer.play"}, {"type": "array", "items": {"$ref": "#/definitions/dfplayer.play"}}], "markdownDescription": "Plays a track."}}}, {"type": "object", "properties": {"dfplayer.play_folder": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "folder": {"type": ["null", "object", "string", "array", "number"]}, "file": {"type": ["null", "object", "string", "array", "number"]}, "loop": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Plays files inside numbered folders, folders must be numbered from 1 and with leading zeros. Like `01`, `02`, \u2026 etc. Files inside the folders must be numbered with two leading zeros, like `001.mp3`, `002.mp3`, \u2026 etc. Folder numbers can range from 1 to 99 and file name from 1 to 255 or folder number from 1 to 10 and file number from 1 to 1000."}}}, {"type": "object", "properties": {"dfplayer.set_device": {"anyOf": [{"$ref": "#/definitions/dfplayer.set_device"}, {"type": "array", "items": {"$ref": "#/definitions/dfplayer.set_device"}}], "markdownDescription": "Changes the device in use. Valid values are `TF_CARD` and `USB`."}}}, {"type": "object", "properties": {"dfplayer.set_volume": {"anyOf": [{"$ref": "#/definitions/dfplayer.set_volume"}, {"type": "array", "items": {"$ref": "#/definitions/dfplayer.set_volume"}}], "markdownDescription": "Changes volume."}}}, {"type": "object", "properties": {"dfplayer.set_eq": {"anyOf": [{"$ref": "#/definitions/dfplayer.set_eq"}, {"type": "array", "items": {"$ref": "#/definitions/dfplayer.set_eq"}}], "markdownDescription": "Changes audio equalization preset."}}}, {"type": "object", "properties": {"dfplayer.sleep": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Enters sleep mode. Playback is stopped and the action `dfplayer.set_device: TF_CARD` should be send for playback to be enabled again."}}}, {"type": "object", "properties": {"dfplayer.reset": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Module reset."}}}, {"type": "object", "properties": {"dfplayer.start": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Starts playing a track or resumes paused playback."}}}, {"type": "object", "properties": {"dfplayer.pause": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Pauses playback, playback can be resumed from the same position with `dfplayer.start`."}}}, {"type": "object", "properties": {"dfplayer.stop": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Stops playback."}}}, {"type": "object", "properties": {"dfplayer.random": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Randomly plays all tracks."}}}, {"type": "object", "properties": {"fan.toggle": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Toggles the ON/OFF state of the fan with the given ID when executed."}}}, {"type": "object", "properties": {"fan.turn_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Turns the fan with the given ID off when executed."}}}, {"type": "object", "properties": {"fan.turn_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "oscillating": {"type": ["null", "object", "string", "array", "number"]}, "speed": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Turns the fan with the given ID off when executed."}}}, {"type": "object", "properties": {"globals.set": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](configuration-types.html#config-id): The [ID](configuration-types.html#config-id) of the global variable to set."}, "value": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable): The value to set the global variable to."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to change the value of a [global](https://esphome.io/guides/automations.html#config-globals) variable without having to go through the lambda syntax."}}}, {"type": "object", "properties": {"http_request.send": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "url": {"type": ["null", "object", "string", "array", "number"]}, "headers": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "verify_ssl": {"type": "boolean"}, "method": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: HTTP method to use (`GET`, `POST`, `PUT`, `DELETE`, `PATCH`)."}, "body": {"type": ["null", "object", "string", "array", "number"]}, "json": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}, "type": ["object", "null"]}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a request."}}}, {"type": "object", "properties": {"http_request.post": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "url": {"type": ["null", "object", "string", "array", "number"]}, "headers": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "verify_ssl": {"type": "boolean"}, "method": {"type": ["null", "object", "string", "array", "number"]}, "body": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string, [templatable](https://esphome.io/guides/automations.html#config-templatable): A HTTP body string to send with request."}, "json": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "mapping: A HTTP body in JSON format. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable). See [Examples](https://esphome.io/components/http_request.html#http-request-examples)."}}, "type": ["object", "null"]}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a POST request."}}}, {"type": "object", "properties": {"http_request.get": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "url": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string, [templatable](https://esphome.io/guides/automations.html#config-templatable): URL to send request."}, "headers": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "mapping: Map of HTTP headers. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable)."}, "verify_ssl": {"type": "boolean", "markdownDescription": "boolean: Verify the SSL certificate of the endpoint. Defaults to `true`."}, "method": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a GET request."}}}, {"type": "object", "properties": {"output.turn_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action turns the output with the given ID on when executed."}}}, {"type": "object", "properties": {"output.turn_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action turns the output with the given ID off when executed."}}}, {"type": "object", "properties": {"output.set_level": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "level": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action sets the float output to the given level when executed. Note: This only works with floating point outputs like ESP8266 PWM or LEDC."}}}, {"type": "object", "properties": {"rf_bridge.send_code": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sync": {"type": ["null", "object", "string", "array", "number"]}, "low": {"type": ["null", "object", "string", "array", "number"]}, "high": {"type": ["null", "object", "string", "array", "number"]}, "code": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Send an RF code using this action in automations."}}}, {"type": "object", "properties": {"rf_bridge.learn": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Tell the RF Bridge to learn new protocol timings using this action in automations. A new code with timings will be returned to [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received)"}}}, {"type": "object", "properties": {"rf_bridge.start_advanced_sniffing": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Tell the RF Bridge to listen for the advanced/extra protocols defined in the portisch firmware. The decoded codes with length and protocol will be returned to [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-advanced-code-received)"}}}, {"type": "object", "properties": {"rf_bridge.stop_advanced_sniffing": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Tell the RF Bridge to stop listening for the advanced/extra protocols defined in the portisch firmware."}}}, {"type": "object", "properties": {"rf_bridge.send_advanced_code": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "length": {"type": ["null", "object", "string", "array", "number"]}, "protocol": {"type": ["null", "object", "string", "array", "number"]}, "code": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Send an  RF code using this action in automations."}}}, {"type": "object", "properties": {"rf_bridge.send_raw": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "raw": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Send a raw RF code using this action in automations."}}}, {"type": "object", "properties": {"rtttl.play": {"anyOf": [{"$ref": "#/definitions/rtttl.play"}, {"type": "array", "items": {"$ref": "#/definitions/rtttl.play"}}], "markdownDescription": "Plays an rtttl tone."}}}, {"type": "object", "properties": {"rtttl.stop": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Stops playback."}}}, {"type": "object", "properties": {"script.execute": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action executes the script. The script **mode** dictates what will happen if the script was already running."}}}, {"type": "object", "properties": {"script.stop": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action allows you to stop a given script during execution. If the script is not running, it does nothing. This is useful right now if your want to stop a script that contains a `delay` action, `wait_until` action, or is inside a `while` loop, etc. You can also call this action from the script itself, and any subsequent action will not be executed."}}}, {"type": "object", "properties": {"script.wait": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action suspends execution of the automation until a script has finished executing."}}}, {"type": "object", "properties": {"servo.write": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "level": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "To use your servo motor in [automations](https://esphome.io/guides/automations.html#automation) or templates, you can use this action to set the target level of the servo from -100% to 100%."}}}, {"type": "object", "properties": {"servo.detach": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to disable the output on a servo motor - this will make the servo motor stop immediately and disable its active control."}}}, {"type": "object", "properties": {"sim800l.send_sms": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "recipient": {"type": ["null", "object", "string", "array", "number"]}, "message": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Send a SMS message to a phone recipient using this action in automations."}}}, {"type": "object", "properties": {"stepper.set_target": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "target": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "To use your stepper motor in [automations](https://esphome.io/guides/automations.html#automation) or templates, you can use this action to set the target position (in steps). The stepper will always run towards the target position and stop once it has reached the target."}}}, {"type": "object", "properties": {"stepper.report_position": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the stepper."}, "position": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int, [templatable](https://esphome.io/guides/automations.html#config-templatable): The position to report in steps."}}, "type": ["object", "null"], "markdownDescription": "All steppers start out with a target and current position of `0` on boot. However, if you for example want to home a stepper motor, it can be useful to **report** the stepper where it is currently at."}}}, {"type": "object", "properties": {"stepper.set_speed": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the stepper."}, "speed": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), float: The speed in `steps/s` (steps per seconds) to drive the stepper at."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to set the speed of a stepper at runtime."}}}, {"type": "object", "properties": {"switch.turn_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action turns a switch with the given ID on when executed."}}}, {"type": "object", "properties": {"switch.turn_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action turns a switch with the given ID off when executed."}}}, {"type": "object", "properties": {"switch.toggle": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This action toggles a switch with the given ID when executed."}}}, {"type": "object", "properties": {"tm1651.turn_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the TM1651."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns on the LEDs."}}}, {"type": "object", "properties": {"tm1651.turn_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the TM1651."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns off all the LEDs."}}}, {"type": "object", "properties": {"tm1651.set_level_percent": {"anyOf": [{"$ref": "#/definitions/tm1651.set_level_percent"}, {"type": "array", "items": {"$ref": "#/definitions/tm1651.set_level_percent"}}], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime. Automatically calculates input level in percentages to actual level for the display."}}}, {"type": "object", "properties": {"tm1651.set_level": {"anyOf": [{"$ref": "#/definitions/tm1651.set_level"}, {"type": "array", "items": {"$ref": "#/definitions/tm1651.set_level"}}], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime."}}}, {"type": "object", "properties": {"tm1651.set_brightness": {"anyOf": [{"$ref": "#/definitions/tm1651.set_brightness"}, {"type": "array", "items": {"$ref": "#/definitions/tm1651.set_brightness"}}], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the brightness of the battery display at runtime."}}}, {"type": "object", "properties": {"binary_sensor.template.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "You can also publish a state to a template binary sensor from elsewhere in your YAML file with the `binary_sensor.template.publish` action."}}}, {"type": "object", "properties": {"climate.pid.reset_integral_term": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): ID of the PID Climate being reset."}}, "type": ["object", "null"], "markdownDescription": "This action resets the integral term of the PID controller to 0. This might be necessary under certain conditions to avoid the control loop to overshoot (or undershoot) a target."}}}, {"type": "object", "properties": {"climate.pid.autotune": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): ID of the PID Climate to start autotuning for."}, "noiseband": {"type": "number", "markdownDescription": "float: The noiseband of the process (=sensor) variable. The value of the PID controller must be able to reach this value. Defaults to `0.25`."}, "positive_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The positive output power to drive the heat output at. Defaults to `1.0`."}, "negative_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The positive output power to drive the cool output at. Defaults to `-1.0`."}}, "type": ["object", "null"], "markdownDescription": "This action starts the autotune process of the PID controller."}}}, {"type": "object", "properties": {"climate.pid.set_control_parameters": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): ID of the PID Climate to start autotuning for."}, "kp": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The factor for the proportional term of the PID controller."}, "ki": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The factor for the integral term of the PID controller. Defaults to `0`."}, "kd": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The factor for the derivative term of the PID controller. Defaults to `0`."}}, "type": ["object", "null"], "markdownDescription": "This action sets new values for the control parameters of the PID controller. This can be used to manually tune the PID controller. Make sure to take update the values you want on the YAML file! They will reset on the next reboot."}}}, {"type": "object", "properties": {"cover.template.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": ["null", "object", "string", "array", "number"]}, "position": {"type": ["null", "object", "string", "array", "number"]}, "current_operation": {"type": ["null", "object", "string", "array", "number"]}, "tilt": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "You can also publish a state to a template cover from elsewhere in your YAML file with the `cover.template.publish` action."}}}, {"type": "object", "properties": {"output.esp8266_pwm.set_frequency": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the PWM output to change."}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), float: The frequency to set in hertz."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an ESP8266 PWM channel at runtime. Use cases include controlling a passive buzzer (for pitch control)."}}}, {"type": "object", "properties": {"output.ledc.set_frequency": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the LEDC output to change."}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), float: The frequency to set in hertz."}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an LEDC channel at runtime. Use cases include controlling a passive buzzer (for pitch control)."}}}, {"type": "object", "properties": {"sensor.integration.reset": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to reset the value of the integration sensor to zero. For example this can be used to reset the integration sensor to zero at midnight with a time-based automation."}}}, {"type": "object", "properties": {"mhz19.abc_disable": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) disables automatic baseline calibration on the sensor with the given ID."}}}, {"type": "object", "properties": {"mhz19.abc_enable": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) enables automatic baseline calibration on the sensor with the given ID."}}}, {"type": "object", "properties": {"mhz19.calibrate_zero": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) executes zero point calibration command on the sensor with the given ID."}}}, {"type": "object", "properties": {"sensor.rotary_encoder.set_value": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "value": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "The internal state of the rotary encoder can be manually changed to any value with this action. After executing this action, rotating the encoder further will increase/decrease the state relative to the newly set internal value."}}}, {"type": "object", "properties": {"sensor.template.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "You can also publish a state to a template sensor from elsewhere in your YAML file with the `sensor.template.publish` action."}}}, {"type": "object", "properties": {"switch.template.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "You can also publish a state to a template switch from elsewhere in your YAML file with the `switch.template.publish` action."}}}, {"type": "object", "properties": {"text_sensor.template.publish": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "state": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "You can also publish a state to a template text sensor from elsewhere in your YAML file with the `text_sensor.template.publish` action."}}}, {"type": "object", "properties": {"ds1307.write_time": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time to the RTC hardware."}}}, {"type": "object", "properties": {"ds1307.read_time": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time from the RTC hardware."}}}]}, "automation.CONDITION_REGISTRY": {"anyOf": [{"type": "object", "properties": {"and": {"anyOf": [{"$ref": "#/definitions/automation.CONDITION_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/automation.CONDITION_REGISTRY"}}]}}}, {"type": "object", "properties": {"or": {"anyOf": [{"$ref": "#/definitions/automation.CONDITION_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/automation.CONDITION_REGISTRY"}}]}}}, {"type": "object", "properties": {"not": {"$ref": "#/definitions/condition_list"}}}, {"type": "object", "properties": {"lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "This condition performs an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda)) and can be used to create conditional flow in actions."}}}, {"type": "object", "properties": {"for": {"allOf": [{"properties": {"time": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), [Time](configuration-types.html#config-time): The time for which the condition has to have been true."}, "condition": {"$ref": "#/definitions/condition_list", "markdownDescription": "[Condition](https://esphome.io/guides/automations.html#config-condition): The condition to check."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given condition has been true for at least a given amount of time."}}}, {"type": "object", "properties": {"mqtt.connected": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the MQTT client is currently connected to the MQTT broker."}}}, {"type": "object", "properties": {"binary_sensor.is_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"binary_sensor.is_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"light.is_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"light.is_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"api.connected": {"type": "string", "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if at least one client is connected to the ESPHome native API. Please note client not only includes Home Assistant, but also ESPHome\u2019s OTA log output if logs are shown remotely."}}}, {"type": "object", "properties": {"sensor.in_range": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "above": {"type": "number", "markdownDescription": "float: The minimum for the condition."}, "below": {"type": "number", "markdownDescription": "float: The maximum for the condition."}}, "type": ["object", "null"], "markdownDescription": "This condition passes if the state of the given sensor is inside a range."}}}, {"type": "object", "properties": {"dfplayer.is_playing": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This Condition returns true while playback is active."}}}, {"type": "object", "properties": {"pn532.is_writing": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"rtttl.is_playing": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This Condition returns true while playback is active."}}}, {"type": "object", "properties": {"script.is_running": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given script is running. In case scripts are run in `parallel`, this condition only tells you if at least one script of the given id is running, not how many."}}}, {"type": "object", "properties": {"time.has_time": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if time has been set and is valid."}}}, {"type": "object", "properties": {"sun.is_above_horizon": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "elevation": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"sun.is_below_horizon": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "elevation": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"switch.is_on": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"switch.is_off": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"text_sensor.state": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The text sensor ID."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[templatable](https://esphome.io/guides/automations.html#config-templatable), string: The state to compare to."}}, "type": ["object", "null"], "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) allows you to check if a given text sensor has a specific state."}}}, {"type": "object", "properties": {"wifi.connected": {"type": "string", "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the WiFi client is currently connected to a station."}}}]}, "binary_sensor.FILTER_REGISTRY": {"anyOf": [{"type": "object", "properties": {"invert": {"type": "string"}}}, {"type": "object", "properties": {"delayed_on_off": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"delayed_on": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"delayed_off": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"lambda": {"type": ["null", "object", "string", "array", "number"]}}}]}, "simple_automation": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"$ref": "#/definitions/AUTOMATION.AUTOMATION_SCHEMA"}]}, "strobe-colors": {"properties": {"state": {"type": "boolean"}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"]}, "green": {"type": ["null", "object", "string", "array", "number"]}, "blue": {"type": ["null", "object", "string", "array", "number"]}, "white": {"type": ["null", "object", "string", "array", "number"]}, "duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"]}, "addressable_color_wipe-colors": {"properties": {"red": {"type": ["null", "object", "string", "array", "number"]}, "green": {"type": ["null", "object", "string", "array", "number"]}, "blue": {"type": ["null", "object", "string", "array", "number"]}, "white": {"type": ["null", "object", "string", "array", "number"]}, "random": {"type": "boolean"}, "num_leds": {"type": "number"}}, "type": ["object", "null"]}, "light.EFFECTS_REGISTRY": {"anyOf": [{"type": "object", "properties": {"lambda": {"allOf": [{"properties": {"lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The code to execute. `static` variables are especially useful."}, "update_interval": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which the lambda code is executed. A value of `0ms` means that the lambda is always executed, without a cool-down. Defaults to `0ms`."}, "name": {"type": "string", "markdownDescription": "string: The name of the custom effect."}}, "type": ["object", "null"]}], "markdownDescription": "This effect allows you to write completely custom light effects yourself using [lambdas](https://esphome.io/guides/automations.html#config-lambda)."}}}, {"type": "object", "properties": {"automation": {"allOf": [{"properties": {"sequence": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The actions to perform in sequence until the effect is stopped."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect."}}, "type": ["object", "null"]}], "markdownDescription": "Additionally to the `lambda` and `addressable_lambda` light effects, effects can also be written through ESPHome\u2019s [Automation](https://esphome.io/guides/automations.html#automation) system with the `automation` effect type."}}}, {"type": "object", "properties": {"random": {"allOf": [{"properties": {"transition_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The duration of each transition to start. Defaults to `5s`."}, "update_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which a new color is selected and transitioned to."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Random`."}}, "type": ["object", "null"]}], "markdownDescription": "This effect makes a transition (of length `transition_length`) to a randomly-chosen color every `update_interval`."}}}, {"type": "object", "properties": {"strobe": {"allOf": [{"properties": {"colors": {"anyOf": [{"$ref": "#/definitions/strobe-colors"}, {"type": "array", "items": {"$ref": "#/definitions/strobe-colors"}}], "markdownDescription": "list: A list of colors to cycle through. Defaults to a quick cycle between ON and OFF.\n  * **state** (*Optional*, boolean): The ON/OFF state to show. Defaults to `True`.\n  \n  * **brightness** (*Optional*, percentage): The brightness of the light. Defaults to `100%`.\n  \n  * **red** (*Optional*, percentage): The percentage that the red color should be on for RGB lights. Defaults to `100%`.\n  \n  * **green** (*Optional*, percentage): The percentage that the green color should be on for RGB lights. Defaults to `100%`.\n  \n  * **blue** (*Optional*, percentage): The percentage that the blue color should be on for RGB lights. Defaults to `100%`.\n  \n  * **white** (*Optional*, percentage): The percentage that the white color should be on for RGBW lights. Defaults to `100%`.\n  \n  * **duration** (**Required**, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration this color should be active."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Strobe`."}}, "type": ["object", "null"]}], "markdownDescription": "This effect cycles through a list of colors with specific durations."}}}, {"type": "object", "properties": {"flicker": {"allOf": [{"properties": {"alpha": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage that the last color value should affect the light. More or less the \u201cforget-factor\u201d of an exponential moving average. Defaults to `95%`."}, "intensity": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The intensity of the flickering, basically the maximum amplitude of the random offsets. Defaults to `1.5%`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Flicker`."}}, "type": ["object", "null"]}], "markdownDescription": "This effect \u201chovers\u201d around the active color of the light and flickers each color channel a bit."}}}, {"type": "object", "properties": {"addressable_lambda": {"allOf": [{"properties": {"lambda": {"type": ["null", "object", "string", "array", "number"]}, "update_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "name": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "This effect allows you to access each LED individually in a custom light effect."}}}, {"type": "object", "properties": {"addressable_rainbow": {"allOf": [{"properties": {"speed": {"type": "number", "markdownDescription": "int: The speed of the effect, unitless. Defaults to `10`."}, "width": {"type": "number", "markdownDescription": "int: The \u201cwidth\u201d of a full-scale rainbow, unitless. Defaults to `50`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Rainbow`."}}, "type": ["object", "null"]}], "markdownDescription": "A light effect for individually-addressable LEDs that creates a moving rainbow over the whole LED strip using the HSV color wheel."}}}, {"type": "object", "properties": {"addressable_color_wipe": {"allOf": [{"properties": {"colors": {"anyOf": [{"$ref": "#/definitions/addressable_color_wipe-colors"}, {"type": "array", "items": {"$ref": "#/definitions/addressable_color_wipe-colors"}}], "markdownDescription": "list: The colors to shift in at the beginning of the strip. Defaults to shifting in random colors.\n  * **red** (*Optional*, percentage): The percentage the red color channel should be on. Defaults to `100%`.\n  \n  * **green** (*Optional*, percentage): The percentage the green color channel should be on. Defaults to `100%`.\n  \n  * **blue** (*Optional*, percentage): The percentage the blue color channel should be on. Defaults to `100%`.\n  \n  * **random** (*Optional*, boolean): If set to `True`, will overwrite the RGB colors by a new, randomly-chosen color each time. Defaults to `False`.\n  \n  * **num_leds** (*Optional*, int): The number of leds of this type to have before moving on to the next color."}, "add_led_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which to shift in new leds at the beginning of the strip. Defaults to `100ms`."}, "reverse": {"type": "boolean", "markdownDescription": "boolean: Whether to reverse the direction of the color wipe. Defaults to `False`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Color Wipe`."}}, "type": ["object", "null"]}], "markdownDescription": "A light effect for individually-addressable LEDs that continuously introduces new colors at the beginning of the strip and shifts them forward every `add_led_interval`."}}}, {"type": "object", "properties": {"addressable_scan": {"allOf": [{"properties": {"move_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which to move the dot/line one LED forward. Defaults to `100ms`."}, "scan_width": {"type": "number", "markdownDescription": "integer: The number of LEDs to use. Defaults to `1`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Scan`."}}, "type": ["object", "null"]}], "markdownDescription": "Create a single, fast-moving dot moving back and forth an individually-addressable LED strip. The color is chosen by the currently active light color."}}}, {"type": "object", "properties": {"addressable_twinkle": {"allOf": [{"properties": {"twinkle_probability": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage with which, at any time step, a randomly-chosen LED should start its twinkle animation."}, "progress_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which to progress the effect. This affects the duration of a twinkle animation. Defaults to `4ms`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Twinkle`."}}, "type": ["object", "null"]}], "markdownDescription": "A light effect for individually-addressable LED strips that randomly chooses some LEDs and let\u2019s them bright up for a moment, like a stars twinkling in the night\u2019s sky. The color of the pixels will be chosen by the currently active light color."}}}, {"type": "object", "properties": {"addressable_random_twinkle": {"allOf": [{"properties": {"twinkle_probability": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage with which, at any time step, a randomly-chosen LED should start its twinkle animation."}, "progress_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which to progress the effect. This affects the duration of a twinkle animation. Defaults to `4ms`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Random Twinkle`."}}, "type": ["object", "null"]}], "markdownDescription": "A light effect similar to `addressable_twinkle`, but using random colors for each twinkle animation."}}}, {"type": "object", "properties": {"addressable_fireworks": {"allOf": [{"properties": {"update_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval with which to progress the effect. Defaults to `32ms`."}, "spark_probability": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The probability to start a new firework spark at a randomly-chosen LED at any given time step. Defaults to `10%`."}, "use_random_color": {"type": "boolean", "markdownDescription": "boolean: Whether to use random colors for new firework sparks. Defaults to using the currently active light color."}, "fade_out_rate": {"type": "number", "markdownDescription": "integer: The rate with which to fade out the LED strip, unitless. Needs to be carefully chosen so that the whole strip doesn\u2019t light up forever if the fade out rate is too low or that the firework sparks do not propagate for a long time. Defaults to `120`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Fireworks`."}}, "type": ["object", "null"]}], "markdownDescription": "A light effect for individually-addressable LED strips that randomly sparks some fireworks at random positions and lets the sparkles cascade over the LED strip."}}}, {"type": "object", "properties": {"addressable_flicker": {"allOf": [{"properties": {"update_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time interval for updating the random offsets. Defaults to `16ms`."}, "intensity": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The intensity of the effect, basically how much the random values can offset the currently active light color. Defaults to `5%`."}, "name": {"type": "string", "markdownDescription": "string: The name of the effect. Defaults to `Addressable Flicker`."}}, "type": ["object", "null"]}], "markdownDescription": "An effect similar to the `flicker` effect, but for individually-addressable LED strips. This effect flickers each LED by its own random amount around the currently active light color."}}}, {"type": "object", "properties": {"adalight": {"allOf": [{"$ref": "#/definitions/uart_bus"}, {"properties": {"name": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "This effect enables controlling addressable lights using UART-based [Adalight](https://learn.adafruit.com/adalight-diy-ambient-tv-lighting) protocol, allowing to create realtime ambient lighting effects."}}}, {"type": "object", "properties": {"e131": {"allOf": [{"properties": {"e131_id": {"type": ["null", "object", "string", "array", "number"]}, "universe": {"type": "number", "markdownDescription": "integer: The value of universe, between 1 to 512."}, "channels": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The type of data. This is used to specify if it is a `MONO`, `RGB` or `RGBW` light and in which order the colors are. Defaults to `RGB`."}, "name": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "This effect enables controlling addressable lights using UDP-based [E1.31](https://www.doityourselfchristmas.com/wiki/index.php?title=E1.31_(Streaming-ACN)_Protocol) protocol."}}}, {"type": "object", "properties": {"wled": {"allOf": [{"properties": {"port": {"type": "number", "markdownDescription": "integer: The port to run the UDP server on. Defaults to `21324`."}, "name": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "This effect enables controlling addressable lights using UDP-based [UDP Realtime Control](https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control) protocol used by [WLED](https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control), allowing to create realtime ambient lighting effects."}}}]}, "remote_base.BINARY_SENSOR_REGISTRY": {"anyOf": [{"type": "object", "properties": {"jvc": {"$ref": "#/definitions/REMOTE_BASE.JVC_SCHEMA", "markdownDescription": "Trigger on a decoded JVC remote code with the given data.\n  * **data** (**Required**, int): The JVC code to trigger on, see dumper output for more info."}}}, {"type": "object", "properties": {"lg": {"$ref": "#/definitions/REMOTE_BASE.LG_SCHEMA", "markdownDescription": "Trigger on a decoded LG remote code with the given data.\n  * **data** (**Required**, int): The LG code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `28`."}}}, {"type": "object", "properties": {"nec": {"$ref": "#/definitions/REMOTE_BASE.NEC_SCHEMA", "markdownDescription": "Trigger on a decoded NEC remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The NEC command to listen for."}}}, {"type": "object", "properties": {"pioneer": {"$ref": "#/definitions/REMOTE_BASE.PIONEER_SCHEMA", "markdownDescription": "Trigger on a decoded Pioneer remote code with the given data.\n  * **rc_code_1** (**Required**, int): The remote control code trigger on, see dumper output for more details."}}}, {"type": "object", "properties": {"sony": {"$ref": "#/definitions/REMOTE_BASE.SONY_SCHEMA", "markdownDescription": "Trigger on a decoded Sony remote code with the given data.\n  * **data** (**Required**, int): The Sony code to trigger on, see dumper output for more info.\n  \n  * **nbits** (*Optional*, int): The number of bits of the remote code. Defaults to `12`."}}}, {"type": "object", "properties": {"raw": {"$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA", "markdownDescription": "Trigger on a raw remote code with the given code.\n  * **code** (**Required**, list): The code to listen for, see [remote_transmitter.transmit_raw Action](remote_transmitter.html#remote-transmitter-transmit-raw) for more info. Usually you only need to copy this directly from the dumper output."}}}, {"type": "object", "properties": {"rc5": {"$ref": "#/definitions/REMOTE_BASE.RC5_SCHEMA", "markdownDescription": "Trigger on a decoded RC5 remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The RC5 command to listen for."}}}, {"type": "object", "properties": {"rc_switch_raw": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA", "markdownDescription": "Trigger on a decoded RC Switch raw remote code with the given data.\n  * **code** (**Required**, string): The remote code to listen for, copy this from the dumper output. To ignore a bit in the received data, use `x` at that place in the **code**.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info."}}}, {"type": "object", "properties": {"rc_switch_type_a": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA", "markdownDescription": "Trigger on a decoded RC Switch Type A remote code with the given data.\n  * **group** (**Required**, string): The group, binary string.\n  \n  * **device** (**Required**, string): The device in the group, binary string.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info."}}}, {"type": "object", "properties": {"rc_switch_type_b": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA", "markdownDescription": "Trigger on a decoded RC Switch Type B remote code with the given data.\n  * **address** (**Required**, int): The address, int from 1 to 4.\n  \n  * **channel** (**Required**, int): The channel, int from 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info."}}}, {"type": "object", "properties": {"rc_switch_type_c": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA", "markdownDescription": "Trigger on a decoded RC Switch Type C remote code with the given data.\n  * **family** (**Required**, string): The family. Range is `a` to `p`.\n  \n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 4.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info."}}}, {"type": "object", "properties": {"rc_switch_type_d": {"allOf": [{"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA"}, {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER"}], "markdownDescription": "Trigger on a decoded RC Switch Type D remote code with the given data.\n  * **group** (**Required**, int): The group. Range is 1 to 4.\n  \n  * **device** (**Required**, int): The device. Range is 1 to 3.\n  \n  * **state** (**Required**, boolean): The on/off state to trigger on.\n  \n  * **protocol** (*Optional*): The RC Switch protocol to use, see [RC Switch Protocol](remote_transmitter.html#remote-transmitter-rc-switch-protocol) for more info."}}}, {"type": "object", "properties": {"samsung": {"$ref": "#/definitions/REMOTE_BASE.JVC_SCHEMA", "markdownDescription": "Trigger on a decoded Samsung remote code with the given data.\n  * **data** (**Required**, int): The data to trigger on, see dumper output for more info."}}}, {"type": "object", "properties": {"panasonic": {"$ref": "#/definitions/REMOTE_BASE.PANASONIC_SCHEMA", "markdownDescription": "Trigger on a decoded Panasonic remote code with the given data.\n  * **address** (**Required**, int): The address to trigger on, see dumper output for more info.\n  \n  * **command** (**Required**, int): The command."}}}]}, "remote_base.DUMPER_REGISTRY": {"anyOf": [{"type": "object", "properties": {"jvc": {"type": "string"}}}, {"type": "object", "properties": {"lg": {"type": "string"}}}, {"type": "object", "properties": {"nec": {"type": "string"}}}, {"type": "object", "properties": {"pioneer": {"type": "string"}}}, {"type": "object", "properties": {"sony": {"type": "string"}}}, {"type": "object", "properties": {"raw": {"type": "string"}}}, {"type": "object", "properties": {"rc5": {"type": "string"}}}, {"type": "object", "properties": {"rc_switch": {"type": "string"}}}, {"type": "object", "properties": {"samsung": {"type": "string"}}}, {"type": "object", "properties": {"panasonic": {"type": "string"}}}]}, "calibrate_linear": {"type": ["null", "object", "string", "array", "number"]}, "sensor.FILTER_REGISTRY": {"anyOf": [{"type": "object", "properties": {"offset": {"type": "number"}}}, {"type": "object", "properties": {"multiply": {"type": "number"}}}, {"type": "object", "properties": {"filter_out": {"type": "number"}}}, {"type": "object", "properties": {"median": {"properties": {"window_size": {"type": "number"}, "send_every": {"type": "number"}, "send_first_at": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"sliding_window_moving_average": {"properties": {"window_size": {"type": "number"}, "send_every": {"type": "number"}, "send_first_at": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"exponential_moving_average": {"properties": {"alpha": {"type": "number"}, "send_every": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"lambda": {"type": ["null", "object", "string", "array", "number"]}}}, {"type": "object", "properties": {"delta": {"type": "number"}}}, {"type": "object", "properties": {"or": {"anyOf": [{"$ref": "#/definitions/sensor.FILTER_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/sensor.FILTER_REGISTRY"}}]}}}, {"type": "object", "properties": {"throttle": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"heartbeat": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"debounce": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}}, {"type": "object", "properties": {"calibrate_linear": {"anyOf": [{"$ref": "#/definitions/calibrate_linear"}, {"type": "array", "items": {"$ref": "#/definitions/calibrate_linear"}}]}}}, {"type": "object", "properties": {"calibrate_polynomial": {"properties": {"datapoints": {"anyOf": [{"$ref": "#/definitions/calibrate_linear"}, {"type": "array", "items": {"$ref": "#/definitions/calibrate_linear"}}]}, "degree": {"type": "number"}}, "type": ["object", "null"]}}}]}, "condition_list": {"oneOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.CONDITION_REGISTRY"}}, {"$ref": "#/definitions/automation.CONDITION_REGISTRY"}]}, "esphome-platformio_options": {"type": "object"}, "esphome-on_boot": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "priority": {"type": "number", "markdownDescription": "float: The priority to execute your custom initialization code. A higher value means a high priority and thus also your code being executed earlier. Please note this is an ESPhome-internal value and any change will not be marked as a breaking change. Defaults to `-10`. Priorities (you can use any value between them too):\n  * `800.0`: This is where all hardware initialization of vital components is executed. For example setting switches to their initial state.\n  \n  * `600.0`: This is where most sensors are set up.\n  \n  * `250.0`: At this priority, WiFi is initialized.\n  \n  * `200.0`: Network connections like MQTT/native API are set up at this priority.\n  \n  * `-100.0`: At this priority, pretty much everything should already be initialized."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esphome-on_shutdown": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esphome-on_loop": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esphome-includes": {"type": ["null", "object", "string", "array", "number"]}, "esphome-libraries": {"type": "string"}, "esphome": {"properties": {"name": {"type": "string", "markdownDescription": "string: This is the name of the node. It should always be unique in your ESPhome network. May only contain lowercase characters, digits, underscores and hyphens. See [Changing ESPHome Node Name](https://esphome.io/components/esphome.html#esphome-changing-node-name)."}, "platform": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The platform your board is on, either `ESP32` or `ESP8266`. See [arduino_version](https://esphome.io/components/esphome.html#esphome-arduino-version)."}, "board": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The board ESPHome should specify for PlatformIO. For the ESP32, choose the appropriate one from [this list](http://docs.platformio.org/en/latest/platforms/espressif32.html#boards) and use [this list](http://docs.platformio.org/en/latest/platforms/espressif8266.html#boards) for ESP8266-based boards. *This only affects pin aliases and some internal settings*, if unsure choose the generic board option!"}, "comment": {"type": "string", "markdownDescription": "string: Additional text information about this node. Only for display in UI."}, "arduino_version": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The version of the Arduino framework to link the project against. See [arduino_version](https://esphome.io/components/esphome.html#esphome-arduino-version)."}, "build_path": {"type": "string", "markdownDescription": "string: Customize where ESPHome will store the build files for your node. By default, ESPHome puts all PlatformIO project files under a folder `<NODE_NAME>/`, but you can customize this behavior using this option."}, "platformio_options": {"$ref": "#/definitions/esphome-platformio_options", "markdownDescription": "mapping: Additional options to pass over to PlatformIO in the platformio.ini file. See [platformio_options](https://esphome.io/components/esphome.html#esphome-platformio-options)."}, "esp8266_restore_from_flash": {"type": "boolean", "markdownDescription": "boolean: Whether to save & restore data from flash on ESP8266s. Defaults to `no`. See [esp8266_restore_from_flash](https://esphome.io/components/esphome.html#esphome-esp8266-restore-from-flash) for more info"}, "board_flash_mode": {"type": ["null", "object", "string", "array", "number"]}, "on_boot": {"$ref": "#/definitions/esphome-on_boot", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the node starts. See [on_boot](https://esphome.io/components/esphome.html#esphome-on-boot)."}, "on_shutdown": {"$ref": "#/definitions/esphome-on_shutdown", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform right before the node shuts down. See [on_shutdown](https://esphome.io/components/esphome.html#esphome-on-shutdown)."}, "on_loop": {"$ref": "#/definitions/esphome-on_loop", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform on each `loop()` iteration. See [on_loop](https://esphome.io/components/esphome.html#esphome-on-loop)."}, "includes": {"anyOf": [{"$ref": "#/definitions/esphome-includes"}, {"type": "array", "items": {"$ref": "#/definitions/esphome-includes"}}], "markdownDescription": "list of files: A list of C[++] files to include in the main (auto-generated) sketch file for custom components. The paths in this list are relative to the directory where the YAML configuration file is in. Should have file extension `.h` - See [includes](https://esphome.io/components/esphome.html#esphome-includes) for more info."}, "libraries": {"anyOf": [{"$ref": "#/definitions/esphome-libraries"}, {"type": "array", "items": {"$ref": "#/definitions/esphome-libraries"}}], "markdownDescription": "list of libraries: A list of [platformio libraries](https://platformio.org/lib) to include in the project. See [platformio lib install](https://docs.platformio.org/en/latest/userguide/lib/cmd_install.html)."}}, "type": ["object", "null"]}, "uart_bus": {"properties": {"uart_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "spi_bus": {"properties": {"spi_id": {"type": ["null", "object", "string", "array", "number"]}, "cs_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA"}}, "type": ["object", "null"]}, "i2c_bus": {"properties": {"i2c_id": {"type": ["null", "object", "string", "array", "number"]}, "address": {"type": "string"}}, "type": ["object", "null"]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_press": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_release": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_click": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "min_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The minimum duration the click should last. Defaults to `50ms`."}, "max_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The maximum duration the click should last. Defaults to `350ms`."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "min_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The minimum duration the click should last. Defaults to `50ms`."}, "max_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The maximum duration the click should last. Defaults to `350ms`."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]": {"type": ["null", "object", "string", "array", "number"]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "timing": {"type": "array", "items": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]"}, "markdownDescription": "The timing of the multi click. This uses a language-based grammar using these styles:\n  * `<ON/OFF> for <TIME> to <TIME>`\n  \n  * `<ON/OFF> for at least <TIME>`\n  \n  * `<ON/OFF> for at most <TIME>`"}, "invalid_cooldown": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): If a multi click is started, but the timing set in `timing` does not match, a \u201ccool down\u201d period will be activated during which no timing will be matched. Defaults to `1s`."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA-on_state": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "binary_sensor.BINARY_SENSOR_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "device_class": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The device class for the sensor. See [https://www.home-assistant.io/components/binary_sensor/](https://www.home-assistant.io/components/binary_sensor/) for a list of available options."}, "filters": {"anyOf": [{"$ref": "#/definitions/binary_sensor.FILTER_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/binary_sensor.FILTER_REGISTRY"}}], "markdownDescription": "list: A list of filters to apply on the binary sensor values such as inverting signals. See [Binary Sensor Filters](https://esphome.io/components/binary_sensor/index.html#binary-sensor-filters)."}, "on_press": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_press", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the button is pressed. See [on_press](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-press)."}, "on_release": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_release", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the button is released. See [on_release](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-release)."}, "on_click": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_click", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the button is held down for a specified period of time. See [on_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-click)."}, "on_double_click": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the button is pressed twice for specified periods of time. See [on_double_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-double-click)."}, "on_multi_click": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the button is pressed in a specific sequence. See [on_multi_click](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-multi-click)."}, "on_state": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_state", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a state is published. See [on_state](https://esphome.io/components/binary_sensor/index.html#binary-sensor-on-state)."}}, "type": ["object", "null"]}]}, "binary_sensor.MULTI_CLICK_TIMING_SCHEMA": {"properties": {"state": {"type": "boolean"}, "min_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "max_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"]}, "canbus.CANBUS_SCHEMA-on_frame": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "can_id": {"type": "number"}, "use_extended_id": {"type": "boolean"}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "canbus.CANBUS_SCHEMA": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "can_id": {"type": "number", "markdownDescription": "integer: default *can id* used for transmitting frames."}, "bit_rate": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "enum: One of the supported bitrates. Defaults to `125KBPS`.\n  * 5KBPS\n  \n  * 10KBPS\n  \n  * 20KBPS\n  \n  * 31K25BPS\n  \n  * 33KBPS\n  \n  * 40KBPS\n  \n  * 50KBPS\n  \n  * 80KBPS\n  \n  * 83K3BPS\n  \n  * 95KBPS\n  \n  * 100KBPS\n  \n  * 125KBPS\n  \n  * 200KBPS\n  \n  * 250KBPS\n  \n  * 500KBPS\n  \n  * 1000KBPS"}, "use_extended_id": {"type": "boolean", "markdownDescription": "boolean: default *False* identifies the type of *can_id*: *False*: Standard 11 bits IDs, *True*: Extended 29 bits ID"}, "on_frame": {"$ref": "#/definitions/canbus.CANBUS_SCHEMA-on_frame", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when ability CAN Frame is received. See [on_frame](https://esphome.io/components/canbus.html#canbus-on-frame)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "climate.CLIMATE_CONTROL_ACTION_SCHEMA": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the climate device to control."}, "mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string, [templatable](https://esphome.io/guides/automations.html#config-templatable): Put the climate device in a specific mode. One of `OFF`, `AUTO`, `COOL` and `HEAT`."}, "target_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the target temperature of a climate device."}, "target_temperature_low": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the lower target temperature of a climate device with a two-point target temperature."}, "target_temperature_high": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the higher target temperature of a climate device with a two-point target temperature."}, "away": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the away mode of the climate device."}, "fan_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the fan mode of the climate device. One of `ON`, `OFF`, `AUTO`, `LOW`, `MEDIUM`, `HIGH`, `MIDDLE`, `FOCUS`, `DIFFUSE`."}, "swing_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable): Set the swing mode of the climate device. One of `OFF`, `BOTH`, `VERTICAL`, `HORIZONTAL`."}}, "type": ["object", "null"]}, "climate.CLIMATE_SCHEMA-visual": {"properties": {"min_temperature": {"type": ["null", "object", "string", "array", "number"]}, "max_temperature": {"type": ["null", "object", "string", "array", "number"]}, "temperature_step": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "climate.CLIMATE_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "visual": {"$ref": "#/definitions/climate.CLIMATE_SCHEMA-visual", "markdownDescription": "Visual settings for the climate device - these do not affect operation and are solely for controlling how the climate device shows up in the frontend.\n  * **min_temperature** (*Optional*, float): The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **max_temperature** (*Optional*, float): The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **temperature_step** (*Optional*, float): The granularity with which the target temperature can be controlled."}}, "type": ["object", "null"]}]}, "cover.COVER_CONTROL_ACTION_SCHEMA": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The cover to control."}, "stop": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "boolean: Whether to stop the cover."}, "state": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The state to set the cover to - one of `OPEN` or `CLOSE`."}, "position": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The cover position to set.\n  * `0.0` = `0%` = `CLOSED`\n  \n  * `1.0` = `100%` = `OPEN`"}, "tilt": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The tilt position to set. In range 0% - 100%."}}, "type": ["object", "null"]}, "cover.COVER_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "device_class": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The device class for the sensor. See [https://www.home-assistant.io/components/cover/](https://www.home-assistant.io/components/cover/) for a list of available options."}}, "type": ["object", "null"]}]}, "display.BASIC_DISPLAY_SCHEMA": {"properties": {"lambda": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "display.FULL_DISPLAY_SCHEMA-pages": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "display.FULL_DISPLAY_SCHEMA": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"rotation": {"type": ["null", "object", "string", "array", "number"]}, "pages": {"anyOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages"}, {"type": "array", "items": {"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages"}}]}}, "type": ["object", "null"]}]}, "fan.FAN_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "oscillation_state_topic": {"type": "string", "markdownDescription": "string: The topic to publish fan oscillation state changes to."}, "oscillation_command_topic": {"type": "string", "markdownDescription": "string: The topic to receive oscillation commands on."}, "speed_state_topic": {"type": "string", "markdownDescription": "string: The topic to publish fan speed state changes to."}, "speed_command_topic": {"type": "string", "markdownDescription": "string: The topic to receive speed commands on."}}, "type": ["object", "null"]}]}, "light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]": {"type": ["null", "object", "string", "array", "number"]}, "light.ADDRESSABLE_LIGHT_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "restore_mode": {"type": ["null", "object", "string", "array", "number"]}, "on_turn_on": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on"}, "on_turn_off": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off"}, "gamma_correct": {"type": "number"}, "default_transition_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "effects": {"type": ["null", "object", "string", "array", "number"]}, "color_correct": {"type": "array", "items": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]"}}, "power_supply": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "light.BINARY_LIGHT_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "restore_mode": {"type": ["null", "object", "string", "array", "number"]}, "on_turn_on": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on"}, "on_turn_off": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off"}, "effects": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "light.BRIGHTNESS_ONLY_LIGHT_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "restore_mode": {"type": ["null", "object", "string", "array", "number"]}, "on_turn_on": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on"}, "on_turn_off": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off"}, "gamma_correct": {"type": "number"}, "default_transition_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "effects": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "light.LIGHT_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "restore_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the light as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the light as ON on bootup."}, "on_turn_on": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_on", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): An automation to perform when the light is turned on. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger)."}, "on_turn_off": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-on_turn_off", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): An automation to perform when the light is turned off. See [light.on_turn_on / light.on_turn_off Trigger](https://esphome.io/components/light/index.html#light-on-turn-on-off-trigger)."}}, "type": ["object", "null"]}]}, "output.BINARY_OUTPUT_SCHEMA": {"properties": {"power_supply": {"type": ["null", "object", "string", "array", "number"]}, "inverted": {"type": "boolean"}}, "type": ["object", "null"]}, "output.FLOAT_OUTPUT_SCHEMA": {"allOf": [{"$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA"}, {"properties": {"max_power": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Sets the maximum output value of this output platform. Must be in range from min_power to 1. Defaults to `1`."}, "min_power": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Sets the minimum output value of this output platform. Must be in range from 0 to max_power. Defaults to `0`."}}, "type": ["object", "null"]}], "markdownDescription": "Each output platform extends this configuration schema."}, "sensor.SENSOR_SCHEMA-on_value": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sensor.SENSOR_SCHEMA-on_raw_value": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sensor.SENSOR_SCHEMA-on_value_range": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "above": {"type": "number", "markdownDescription": "float: The minimum for the trigger."}, "below": {"type": "number", "markdownDescription": "float: The maximum for the trigger."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sensor.SENSOR_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA"}, {"properties": {"mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "unit_of_measurement": {"type": "string", "markdownDescription": "string: Manually set the unit of measurement the sensor should advertise its values with. This does not actually do any maths (conversion between units)."}, "icon": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "icon: Manually set the icon to use for the sensor in the frontend. The icon set here is ignored by Home Assistant, if a device class is already set."}, "accuracy_decimals": {"type": "number", "markdownDescription": "int: Manually set the accuracy of decimals to use when reporting values."}, "device_class": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The device class for the sensor. See [https://www.home-assistant.io/integrations/sensor/#device-class](https://www.home-assistant.io/integrations/sensor/#device-class) for a list of available options. Set to `\"\"` to remove the default device class of a sensor."}, "force_update": {"type": "boolean", "markdownDescription": "boolean: If true, this option will force the frontend (usually Home Assistant) to create a state changed event when the sensor updates even if the value stayed the same. Some applications like Grafana require this when working with Home Assistant, but beware it can significantly increase the database size. Defaults to `false`."}, "expire_after": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Manually set the time in which the sensor values should be marked as \u201cexpired\u201d/\u201cunknown\u201d. Not providing any value means no expiry."}, "filters": {"anyOf": [{"$ref": "#/definitions/sensor.FILTER_REGISTRY"}, {"type": "array", "items": {"$ref": "#/definitions/sensor.FILTER_REGISTRY"}}], "markdownDescription": "Specify filters to use for some basic transforming of values. See [Sensor Filters](https://esphome.io/components/sensor/index.html#sensor-filters) for more information."}, "on_value": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_value", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a new value is published. See [on_value](https://esphome.io/components/sensor/index.html#sensor-on-value)."}, "on_raw_value": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_raw_value", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a raw value is received that hasn\u2019t passed through any filters. See [on_raw_value](https://esphome.io/components/sensor/index.html#sensor-on-raw-value)."}, "on_value_range": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_value_range", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a published value transition from outside to a range to inside. See [on_value_range](https://esphome.io/components/sensor/index.html#sensor-on-value-range)."}}, "type": ["object", "null"]}]}, "stepper.STEPPER_SCHEMA": {"properties": {"max_speed": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The maximum speed in `steps/s` (steps per seconds) to drive the stepper at. Note most steppers can\u2019t step properly with speeds higher than 250 steps/s."}, "acceleration": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The acceleration in `steps/s^2` (steps per seconds squared) to use when starting to move. The default is `inf` which means infinite acceleration, so the stepper will try to drive with the full speed immediately. This value is helpful if that first motion of the motor is too jerky for what it\u2019s moving.  If you make this a small number, it will take the motor a moment to get up  to speed."}, "deceleration": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The same as `acceleration`, but for when the motor is decelerating shortly before reaching the set position. Defaults to `inf` (immediate deceleration)."}}, "type": ["object", "null"]}, "switch.SWITCH_SCHEMA-on_turn_on": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "switch.SWITCH_SCHEMA-on_turn_off": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "switch.SWITCH_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA"}, {"properties": {"mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "icon": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "icon: Manually set the icon to use for the sensor in the frontend."}, "inverted": {"type": "boolean", "markdownDescription": "boolean: Whether to invert the binary state, i.e.\u00a0report ON states as OFF and vice versa. Defaults to `False`."}, "on_turn_on": {"$ref": "#/definitions/switch.SWITCH_SCHEMA-on_turn_on", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): An automation to perform when the switch is turned on. See [switch.on_turn_on / switch.on_turn_off Trigger](https://esphome.io/components/switch/index.html#switch-on-turn-on-off-trigger)."}, "on_turn_off": {"$ref": "#/definitions/switch.SWITCH_SCHEMA-on_turn_off", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): An automation to perform when the switch is turned off. See [switch.on_turn_on / switch.on_turn_off Trigger](https://esphome.io/components/switch/index.html#switch-on-turn-on-off-trigger)."}}, "type": ["object", "null"]}]}, "text_sensor.TEXT_SENSOR_SCHEMA-on_value": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "text_sensor.TEXT_SENSOR_SCHEMA": {"allOf": [{"$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA"}, {"properties": {"mqtt_id": {"type": ["null", "object", "string", "array", "number"]}, "icon": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "icon: Manually set the icon to use for the sensor in the frontend."}, "on_value": {"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA-on_value", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a new value is published. See [on_value](https://esphome.io/components/text_sensor/index.html#text-sensor-on-value)."}}, "type": ["object", "null"]}]}, "time.TIME_SCHEMA-on_time": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "seconds": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which seconds of the minute the automation will trigger. Defaults to `*` (all seconds). Range is from 0 to 59."}, "minutes": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which minutes of the hour the automation will trigger. Defaults to `*` (all minutes). Range is from 0 to 59."}, "hours": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which hours of the day the automation will trigger. Defaults to `*` (all hours). Range is from 0 to 23."}, "days_of_month": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which days of the month the automation will trigger. Defaults to `*` (all days). Range is from 1 to 31."}, "months": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which months of the year to trigger. Defaults to `*` (all months). The month names JAN to DEC are automatically substituted. Range is from 1 (January) to 12 (December)."}, "days_of_week": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Specify for which days of the week to trigger. Defaults to `*` (all days). The names SUN to SAT are automatically substituted. Range is from 1 (Sunday) to 7 (Saturday)."}, "cron": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Alternatively, you can specify a whole cron expression like `* /5 * * * *`. Please note years and some special characters like `L`, `#` are currently not supported."}, "at": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "time.TIME_SCHEMA-on_time_sync": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "time.TIME_SCHEMA": {"allOf": [{"properties": {"timezone": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Manually tell ESPHome what time zone to use with [this format](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html) (warning: the format is quite complicated) or the simpler [TZ database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) in the form <Region>/<City>. ESPHome tries to automatically infer the time zone string based on the time zone of the computer that is running ESPHome, but this might not always be accurate."}, "on_time": {"$ref": "#/definitions/time.TIME_SCHEMA-on_time", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): Automation to run at specific intervals using a cron-like syntax. See [on_time Trigger](https://esphome.io/components/time.html#time-on-time)."}, "on_time_sync": {"$ref": "#/definitions/time.TIME_SCHEMA-on_time_sync", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): Automation to run when the time source could be (re-)synchronized.. See [on_time_sync Trigger](https://esphome.io/components/time.html#time-on-time-sync)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "ads1115": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this ADS1115 Hub. Use this if you want to use multiple ADS1115 hubs at once."}, "continuous_mode": {"type": "boolean", "markdownDescription": "boolean: Set if the ADS1115 should continuously measure voltages or only measure them when an update is called. Please enable this for the [CT Clamp Current Sensor](ct_clamp.html) integration. Defaults to `off`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "animation": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID with which you will be able to reference the animation later in your display code."}, "file": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The path (relative to where the .yaml file is) of the gif file."}, "resize": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: If set, this will resize all the frames to fit inside the given dimensions `WIDTHxHEIGHT` and preserve the aspect ratio."}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Specifies how to encode each frame internally. Defaults to `BINARY`.\n  * `BINARY`: Two colors, suitable for 1 color displays or 2 color image in color displays. Uses 1 bit per pixel, 8 pixels per byte.\n  \n  * `GREYSCALE`: Full scale grey. Uses 8 bits per pixel, 1 pixel per byte.\n  \n  * `RGB24`: Full RGB color stored. Uses 3 bytes per pixel."}, "raw_data_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "apds9960": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "api-services-variables": {"properties": {"<function validate_id_name at 0x7f89c19b8d90>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "api-services": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "service": {"type": "string"}, "variables": {"$ref": "#/definitions/api-services-variables"}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "climate-bang_bang-away_config": {"properties": {"default_target_temperature_low": {"type": ["null", "object", "string", "array", "number"]}, "default_target_temperature_high": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "climate-pid-control_parameters": {"properties": {"kp": {"type": "number"}, "ki": {"type": "number"}, "kd": {"type": "number"}, "min_integral": {"type": "number"}, "max_integral": {"type": "number"}}, "type": ["object", "null"]}, "climate-thermostat-away_config": {"properties": {"default_target_temperature_high": {"type": ["null", "object", "string", "array", "number"]}, "default_target_temperature_low": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "color": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage of the red component. Defaults to `100%`."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage of the green component. Defaults to `100%`."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage of the blue component. Defaults to `100%`."}, "white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The percentage of the white component. Defaults to `100%`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "custom_component-components": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "custom_component": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the binary sensor(s)."}, "components": {"anyOf": [{"$ref": "#/definitions/custom_component-components"}, {"type": "array", "items": {"$ref": "#/definitions/custom_component-components"}}], "markdownDescription": "list: A list of components to initialize. The length here must equal the number of items in the `return` statement of the `lambda`. This is useful if you need to give an `id` to the component you created."}}, "type": ["object", "null"]}, "dallas": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "one_wire_id": {"type": ["null", "object", "string", "array", "number"]}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "number: The pin the sensor bus is connected to."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "deep_sleep-esp32_ext1_wakeup-pins": {"type": ["null", "object", "string", "array", "number"]}, "dfplayer-on_finished_playback": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "dfplayer": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "on_finished_playback": {"$ref": "#/definitions/dfplayer-on_finished_playback", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when playback is finished."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/uart_bus"}]}, "esp32_ble_tracker-on_ble_advertise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address to filter for this automation."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esp32_ble_tracker-on_ble_service_data_advertise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address to filter for this automation."}, "service_uuid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: 16 bit, 32 bit, or 128 bit BLE Service UUID."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esp32_ble_tracker-on_ble_manufacturer_data_advertise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address to filter for this automation."}, "manufacturer_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: 16 bit, 32 bit, or 128 bit BLE Manufacturer ID."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "esp32_camera-data_pins[]": {"type": "string"}, "esp32_camera-external_clock": {"properties": {"pin": {"type": "string"}, "frequency": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "esp32_camera-i2c_pins": {"properties": {"sda": {"type": "string"}, "scl": {"type": "string"}}, "type": ["object", "null"]}, "ethernet-manual_ip": {"allOf": [{"properties": {"static_ip": {"type": ["null", "object", "string", "array", "number"]}, "gateway": {"type": ["null", "object", "string", "array", "number"]}, "subnet": {"type": ["null", "object", "string", "array", "number"]}, "dns1": {"type": ["null", "object", "string", "array", "number"]}, "dns2": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "exposure_notifications-on_exposure_notification": {"allOf": [{"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "fan-speed-speed": {"properties": {"low": {"type": ["null", "object", "string", "array", "number"]}, "medium": {"type": ["null", "object", "string", "array", "number"]}, "high": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "font": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID with which you will be able to reference the font later in your display code."}, "file": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The path (relative to where the .yaml file is) of the TrueType font file."}, "glyphs": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "list: A list of characters you plan to use. Only the characters you specify here will be compiled into the binary. Adjust this if you need some special characters or want to reduce the size of the binary if you don\u2019t plan to use some glyphs. The items in the list can also be more than one character long if you for example want to use font ligatures. Defaults to `!\"%()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`."}, "size": {"type": "number", "markdownDescription": "int: The size of the font in pt (not pixel!). If you want to use the same font in different sizes, create two font objects. Defaults to `20`."}, "raw_data_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "globals": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](configuration-types.html#config-id): Give the global variable an ID so that you can refer to it later in [lambdas](https://esphome.io/guides/automations.html#config-lambda)."}, "type": {"type": "string", "markdownDescription": "string: The C++ type of the global variable, for example `bool` (for `true`/`false`), `int` (for integers), `float` (for decimal numbers), `int[50]` for an array of 50 integers, etc."}, "initial_value": {"type": "string", "markdownDescription": "string: The value with which to initialize this variable if the state can not be restored or if state restoration is not enabled. This needs to be wrapped in quotes! Defaults to the C++ default value for this type (for example `0` for integers)."}, "restore_value": {"type": "boolean", "markdownDescription": "boolean: Whether to try to restore the state on boot up. Be careful: on the ESP8266, you only have a total of 96 bytes available for this! Defaults to `no`. This will use storage in \u201cRTC memory\u201d, so it won\u2019t survive a power-cycle unless you use the `esp8266_restore_from_flash` option to save to flash. See [esp8266_restore_from_flash](https://esphome.io/components/esphome.html) for details."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "gps": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}]}, "i2c": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this I\u00b2C bus if you need multiple I\u00b2C buses."}, "sda": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the data line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO21 for ESP32 and GPIO4 for ESP8266)."}, "scl": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the clock line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO22 for ESP32 and GPIO5 for ESP8266)."}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Set the frequency the I\u00b2C bus should operate on. Defaults to `50kHz`. Values are `50kHz`, `100kHz`, `200kHz`, \u2026 `800kHz`"}, "scan": {"type": "boolean", "markdownDescription": "boolean: If ESPHome should do a search of the I\u00b2C address space on startup. Defaults to `True`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "image": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID with which you will be able to reference the image later in your display code."}, "file": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The path (relative to where the .yaml file is) of the image file."}, "resize": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: If set, this will resize the image to fit inside the given dimensions `WIDTHxHEIGHT` and preserve the aspect ratio."}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Specifies how to encode image internally. Defaults to `BINARY`.\n  * `BINARY`: Two colors, suitable for 1 color displays or 2 color image in color displays. Uses 1 bit per pixel, 8 pixels per byte.\n  \n  * `GREYSCALE`: Full scale grey. Uses 8 bits per pixel, 1 pixel per byte.\n  \n  * `RGB24`: Full RGB color stored. Uses 3 bytes per pixel."}, "dither": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Specifies which dither method used to process the image, only used in GREYSCALE and BINARY type image. Defaults to `NONE`. You can read more about it [here](https://pillow.readthedocs.io/en/stable/reference/Image.html?highlight=Dither#PIL.Image.Image.convert) and [here](https://en.wikipedia.org/wiki/Dither).\n  * `NONE`: Every pixel convert to its nearest color.\n  \n  * `FLOYDSTEINBERG`: Uses Floyd-Steinberg dither to approximate the original image luminosity levels."}, "raw_data_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "interval": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](configuration-types.html#config-time): The interval to execute the action with."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}], "markdownDescription": "[Actions](https://esphome.io/guides/automations.html#config-action): The action to perform."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "light-partition-segments": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "from": {"type": "number"}, "to": {"type": "number"}}, "type": ["object", "null"]}, "logger-logs": {"properties": {"<function string at 0x7f89c19b87b8>": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "logger-on_message": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "level": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "mcp23008": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP23008 component."}, "open_drain_interrupt": {"type": "boolean", "markdownDescription": "bool: Configure the interrupt pin to open-drain mode. Useful when the MCP23008\u2019s power supply is greater than 3.3 volts. Note that this pin will require a pull-up resistor (to 3.3 volts) when this mode is enabled."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "mcp23016": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP23016 component."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "mcp23017": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP23017 component."}, "open_drain_interrupt": {"type": "boolean", "markdownDescription": "bool: Configure interrupt pins to open-drain mode. Useful when the MCP23017\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "mcp23s08": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP23S08 component."}, "deviceaddress": {"type": "number", "markdownDescription": "int: The address of the chip. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/spi_bus"}]}, "mcp23s17": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP23S17 component."}, "deviceaddress": {"type": "number", "markdownDescription": "int: The address of the chip. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/spi_bus"}]}, "mcp3008": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this MCP3008 component."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/spi_bus"}]}, "modbus": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}]}, "mpr121": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Set the ID of this sensor."}, "release_debounce": {"type": "number", "markdownDescription": "integer: The minimum length that no touch is recognized before a release event is created. Range is from 0 to 7. Defaults to 0."}, "touch_debounce": {"type": "number", "markdownDescription": "integer: The minimum length before a touch is recognized. Range is from 0 to 7. Defaults to 0."}, "touch_threshold": {"type": "number", "markdownDescription": "integer: The touch threshold for all channels. This defines the sensitivity for touch detection and should be between 5 and 30 (lower = more sensitive). Defaults to 12. Typically the touch threshold is a little bigger than the release threshold."}, "release_threshold": {"type": "number", "markdownDescription": "integer: The release defines the sensitivity for touch detection and should be between 5 and 30. Defaults to 6."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "mqtt-ssl_fingerprints": {"type": ["null", "object", "string", "array", "number"]}, "mqtt-on_message": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": "string", "markdownDescription": "string: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger."}, "qos": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0."}, "payload": {"type": "string", "markdownDescription": "string: Optionally set a payload to match. Only if exactly the payload you specify with this option is received, the automation will be executed."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "mqtt-on_json_message": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": "string", "markdownDescription": "string: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger."}, "qos": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "my9231": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this `my9231` component. Use this if you have multiple MY9231/MY9291 chains connected at the same time."}, "data_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin which DI is connected to."}, "clock_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin which DCKI is connected to."}, "num_channels": {"type": "number", "markdownDescription": "int: Total number of channels of the whole chain. Must be in range from 3 to 1020. Defaults to 6."}, "num_chips": {"type": "number", "markdownDescription": "int: Number of chips in the chain. Must be in range from 1 to 255. Defaults to 2."}, "bit_depth": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The bit depth to use for all output channels in this chain. Must be one of 8, 12, 14 or 16. Defaults to 16."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "output-custom-binary-outputs": {"allOf": [{"$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "output-custom-binary": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the output(s)."}, "outputs": {"anyOf": [{"$ref": "#/definitions/output-custom-binary-outputs"}, {"type": "array", "items": {"$ref": "#/definitions/output-custom-binary-outputs"}}], "markdownDescription": "list: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](index.html#config-output)."}}, "type": ["object", "null"]}, "output-custom-float-outputs": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "output-custom-float": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the output(s)."}, "outputs": {"anyOf": [{"$ref": "#/definitions/output-custom-float-outputs"}, {"type": "array", "items": {"$ref": "#/definitions/output-custom-float-outputs"}}], "markdownDescription": "list: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](index.html#config-output)."}}, "type": ["object", "null"]}, "output-template-binary": {"allOf": [{"$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "write_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the state of the output is updated."}}, "type": ["object", "null"]}]}, "output-template-float": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "write_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when the state of the output is updated."}}, "type": ["object", "null"]}]}, "pca9685": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this pca9685 component. Use this if you have multiple PCA9685s connected at the same time"}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The frequency to let the component drive all PWM outputs at. Must be in range from 24Hz to 1526Hz."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "pcf8574": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this PCF8574 component."}, "pcf8575": {"type": "boolean", "markdownDescription": "boolean: Whether this is a 16-pin PCF8575. Defaults to `False`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "pn532": {"type": ["null", "object", "string", "array", "number"]}, "pn532_i2c-on_tag": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "pn532_i2c-on_finished_write": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "power_supply": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the power supply so that it can be used by the outputs."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The GPIO pin to control the power supply on."}, "enable_time": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time to that the power supply needs for startup. The output component will wait for this period of time after turning on the PSU and before switching the output on. Defaults to `20ms`."}, "keep_on_time": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time the power supply should be kept enabled after the last output that used it has been switch off. Defaults to `10s`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "rc522_i2c-on_tag": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "rdm6300-on_tag": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_jvc": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_lg": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_nec": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_pioneer": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_sony": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_raw": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_rc5": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_rc_switch": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_samsung": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver-on_panasonic": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "receiver_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "remote_receiver": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation. Use this if you have multiple remote receivers."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to receive the remote signal on."}, "dump": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "list: Decode and dump these remote codes in the logs (at log.level=DEBUG). Set to `all` to dump all available codecs:\n  * **lg**: Decode and dump LG infrared codes.\n  \n  * **nec**: Decode and dump NEC infrared codes.\n  \n  * **panasonic**: Decode and dump Panasonic infrared codes.\n  \n  * **pioneer**: Decode and dump Pioneer infrared codes.\n  \n  * **jvc**: Decode and dump JVC infrared codes.\n  \n  * **samsung**: Decode and dump Samsung infrared codes.\n  \n  * **sony**: Decode and dump Sony infrared codes.\n  \n  * **rc_switch**: Decode and dump RCSwitch RF codes.\n  \n  * **rc5**: Decode and dump RC5 IR codes.\n  \n  * **raw**: Print all remote codes in their raw form. Useful for using arbitrary protocols."}, "tolerance": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The percentage that the remote signal lengths can deviate in the decoding process. Defaults to `25%`."}, "buffer_size": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The size of the internal buffer for storing the remote codes. Defaults to `10kB` on the ESP32 and `1kB` on the ESP8266."}, "filter": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): Filter any pulses that are shorter than this. Useful for removing glitches from noisy signals. Defaults to `10us`."}, "idle": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time that a signal should remain stable (i.e. not change) for it to be considered complete. Defaults to `10ms`."}, "memory_blocks": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The number of RMT memory blocks used. Only used on ESP32 platfrom. Defaults to `3`."}, "on_jvc": {"$ref": "#/definitions/remote_receiver-on_jvc", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a JVC remote code has been decoded. A variable `x` of type [remote_base::JVCData](/api/classesphome_1_1remote__base_1_1_j_v_c_data.html) is passed to the automation for use in lambdas."}, "on_lg": {"$ref": "#/definitions/remote_receiver-on_lg", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a LG remote code has been decoded. A variable `x` of type [remote_base::LGData](/api/classesphome_1_1remote__base_1_1_l_g_data.html) is passed to the automation for use in lambdas."}, "on_nec": {"$ref": "#/definitions/remote_receiver-on_nec", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a NEC remote code has been decoded. A variable `x` of type [remote_base::NECData](/api/classesphome_1_1remote__base_1_1_n_e_c_data.html) is passed to the automation for use in lambdas."}, "on_pioneer": {"$ref": "#/definitions/remote_receiver-on_pioneer", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a pioneer remote code has been decoded. A variable `x` of type [remote_base::PioneerData](/api/classesphome_1_1remote__base_1_1_pioneer_data.html) is passed to the automation for use in lambdas."}, "on_sony": {"$ref": "#/definitions/remote_receiver-on_sony", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Sony remote code has been decoded. A variable `x` of type [remote_base::SonyData](/api/classesphome_1_1remote__base_1_1_sony_data.html) is passed to the automation for use in lambdas."}, "on_raw": {"$ref": "#/definitions/remote_receiver-on_raw", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a raw remote code has been decoded. A variable `x` of type `std::vector<int>` is passed to the automation for use in lambdas."}, "on_rc5": {"$ref": "#/definitions/remote_receiver-on_rc5", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a RC5 remote code has been decoded. A variable `x` of type [remote_base::RC5Data](/api/classesphome_1_1remote__base_1_1_r_c5_data.html) is passed to the automation for use in lambdas."}, "on_rc_switch": {"$ref": "#/definitions/remote_receiver-on_rc_switch", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a RCSwitch RF code has been decoded. A variable `x` of type [remote_base::RCSwitchData](/api/classesphome_1_1remote__base_1_1_r_c_switch_data.html) is passed to the automation for use in lambdas."}, "on_samsung": {"$ref": "#/definitions/remote_receiver-on_samsung", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Samsung remote code has been decoded. A variable `x` of type [remote_base::SamsungData](/api/classesphome_1_1remote__base_1_1_samsung_data.html) is passed to the automation for use in lambdas."}, "on_panasonic": {"$ref": "#/definitions/remote_receiver-on_panasonic", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Panasonic remote code has been decoded. A variable `x` of type [remote_base::PanasonicData](/api/classesphome_1_1remote__base_1_1_panasonic_data.html) is passed to the automation for use in lambdas."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "remote_transmitter": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation. Use this if you have multiple remote transmitters."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to transmit the remote signal on."}, "carrier_duty_percent": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: How much of the time the remote is on. For example, infrared protocols modulate the signal using a carrier signal. Set this is `50%` if you\u2019re working with IR LEDs and to `100%` if working with other things like 433MHz transmitters."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "rf_bridge-on_code_received": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "rf_bridge-on_advanced_code_received": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "rtttl-on_finished_playback": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "rtttl": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [float output](output/index.html#output) to use for this buzzer."}, "on_finished_playback": {"$ref": "#/definitions/rtttl-on_finished_playback", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when playback is finished."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "script": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"id": {"type": "string", "markdownDescription": "[ID](configuration-types.html#config-id): The [ID](configuration-types.html#config-id) of the script. Use this to interact with the script using the script actions."}, "mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Controls what happens when a script is invoked while it is still running from one or more previous invocations. Default to `single`.\n  * `single`: Do not start a new run. Issue a warning.\n  \n  * `restart`: Start a new run after first stopping previous run.\n  \n  * `queued`: Start a new run after previous runs complete.\n  \n  * `parallel`: Start a new, independent run in parallel with previous runs."}, "max_runs": {"type": "number", "markdownDescription": "integer: Allows limiting the maxiumun number of runs when using script modes `queued` and `parallel`, use value `0` for unlimited runs. Defaults to `0`."}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}], "markdownDescription": "[Actions](https://esphome.io/guides/automations.html#config-action): The action to perform."}}, "type": ["object", "null"]}]}, "sensor-atm90e32-phase_a": {"properties": {"voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "reactive_power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "power_factor": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "gain_voltage": {"type": "number"}, "gain_ct": {"type": "number"}}, "type": ["object", "null"]}, "sensor-binary_sensor_map-group-channels": {"properties": {"binary_sensor": {"type": ["null", "object", "string", "array", "number"]}, "value": {"type": "number"}}, "type": ["object", "null"]}, "sensor-binary_sensor_map-group": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "channels": {"anyOf": [{"$ref": "#/definitions/sensor-binary_sensor_map-group-channels"}, {"type": "array", "items": {"$ref": "#/definitions/sensor-binary_sensor_map-group-channels"}}]}}, "type": ["object", "null"]}]}, "sensor-bme280-temperature": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bme280-pressure": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bme280-humidity": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bme680-temperature": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bme680-pressure": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bme680-humidity": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bmp280-temperature": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-bmp280-pressure": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"oversampling": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-hm3301-aqi": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"calculation_type": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "sensor-ina3221-channel_1": {"properties": {"bus_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "shunt_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "shunt_resistance": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "sensor-rotary_encoder-on_clockwise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sensor-rotary_encoder-on_anticlockwise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sensor-sgp30-baseline": {"properties": {"eco2_baseline": {"type": "string"}, "tvoc_baseline": {"type": "string"}}, "type": ["object", "null"]}, "sensor-sgp30-compensation": {"properties": {"humidity_source": {"type": ["null", "object", "string", "array", "number"]}, "temperature_source": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "sensor-teleinfo-tags": {"properties": {"tag_name": {"type": "string"}, "sensor": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}}, "type": ["object", "null"]}, "servo": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of this servo so that it can be controlled."}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the [output component](output/index.html) to use for this servo."}, "min_level": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The PWM duty cycle the minimum value (-100%) will map to. Defaults to `3%`."}, "idle_level": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The PWM duty cycle the idle value (0%) will map to. This is also the state of the servo at startup. Defaults to `7.5%`."}, "max_level": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: The PWM duty cycle the maximum value (100%) will map to. Defaults to `12.0%`."}, "restore": {"type": "boolean", "markdownDescription": "boolean: Whether to restore the state of the servo motor at startup. This is useful if you have an absolute servo motor and it goes back to its 0 position at startup. Defaults to `false`."}, "auto_detach_time": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time after reaching the target value when the servo will be detached`, if set to zero, servo will not be detached. Defaults to `0s`."}, "transition_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time needed for a full movement (-1.0 to 1.0). This will effectively limit the speed of the servo, the larger the value, the slowest the servo will move. Defaults to `` 0s`` This can slow down the servo to avoid loud noises or just make the movement not jerking."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "sim800l-on_sms_received": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sim800l": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "on_sms_received": {"$ref": "#/definitions/sim800l-on_sms_received", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when an SMS is received. See [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-on-sms-received)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "sm16716": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this `sm16716` component. Use this if you have multiple SM16716 chains connected at the same time."}, "data_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin used for MOSI."}, "clock_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin which SCLK is connected to."}, "num_channels": {"type": "number", "markdownDescription": "int: Total number of channels of the whole chain. Must be in range from 3 to 255. Defaults to 3."}, "num_chips": {"type": "number", "markdownDescription": "int: Number of chips in the chain. Must be in range from 1 to 85. Defaults to 1."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "sn74hc595": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this SN74HC595 component."}, "data_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Pin connected to SN74HC595 SER input."}, "clock_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Pin connected to SN74HC595 SRCLK pin"}, "latch_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Pin connected to SN74HC595 RCLK pin"}, "oe_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Pin connected to SN74HC595 OE pin"}, "sr_count": {"type": "number", "markdownDescription": "int: Number of daisy-chained shift registers, up-to 4. Defaults to `1`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "spi": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this SPI hub if you need multiple SPI hubs."}, "clk_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin used for the clock line of the SPI bus."}, "miso_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin used for the MISO line of the SPI bus."}, "mosi_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin used for the MOSI line of the SPI bus."}}, "type": ["object", "null"]}, "sun-on_sunrise": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "elevation": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "sun-on_sunset": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}, {"properties": {"trigger_id": {"type": ["null", "object", "string", "array", "number"]}, "elevation": {"type": ["null", "object", "string", "array", "number"]}, "then": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/automation.ACTION_REGISTRY"}}, {"$ref": "#/definitions/automation.ACTION_REGISTRY"}]}}, "type": ["object", "null"]}]}, "switch-custom-switches": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "switch-gpio-interlock": {"type": ["null", "object", "string", "array", "number"]}, "sx1509-keypad": {"properties": {"key_rows": {"type": "number"}, "key_columns": {"type": "number"}, "sleep_time": {"type": "number"}, "scan_time": {"type": "number"}, "debounce_time": {"type": "number"}}, "type": ["object", "null"]}, "sx1509": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this SX1509 component."}, "keypad": {"$ref": "#/definitions/sx1509-keypad", "markdownDescription": "Add this to enable the keypad.\n  * **key_rows** (**Required**, int): The number of keypad rows to use. This enables any number of the first 7 pins. So a value of 3 enables pins 0,1,2 to be used as the rows for the keypad matrix. This value must be between 1 and 8.\n  \n  * **key_columns** (**Required**, int): The number of keypad columns to use. This enables any number of the last 7 pins. So a value of 4 enables pins 8,9,10,11 to be used as the columns for the keypad matrix. This value must be between 1 and 8.\n  \n  * **sleep_time** (*Optional*, int): No key press within this time will set keypad engine to sleep.\n  \n  * **scan_time** (*Optional*, int): Scan time per row (must be set above debounce time).\n  \n  * **debounce_time** (*Optional*, int): The debounce time is common to all IOs."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "text_sensor-custom-text_sensors": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "text_sensor-wifi_info-ip_address": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "text_sensor-wifi_info-ssid": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "text_sensor-wifi_info-bssid": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "text_sensor-wifi_info-mac_address": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "time-sntp-servers": {"type": ["null", "object", "string", "array", "number"]}, "tlc59208f": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "ttp229_bsf": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually set the ID of this component."}, "sdo_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin the SDO pin is connected to."}, "scl_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin the SCL pin is connected to."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "ttp229_lsf": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually set the ID of this sensor."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "uart": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this UART hub if you need multiple UART hubs."}, "baud_rate": {"type": "number", "markdownDescription": "int: The baud rate of the UART bus."}, "tx_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to send data to from the ESP\u2019s perspective."}, "rx_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to receive data on from the ESP\u2019s perspective."}, "rx_buffer_size": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The size of the buffer used for receiving UART messages. Increase if you use integration that needs to read big payloads from UART. Defaults to `256`."}, "stop_bits": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The number of stop bits to send. Options: 1, 2. Defaults to 1."}, "data_bits": {"type": "number", "markdownDescription": "int: The number of data bits used on the UART bus. Options: 5 to 8. Defaults to 8."}, "parity": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The parity used on the UART bus. Options: `NONE`, `EVEN`, `ODD`. Defaults to `NONE`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "web_server-auth": {"properties": {"username": {"type": "string"}, "password": {"type": "string"}}, "type": ["object", "null"]}, "wifi-networks": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "ssid": {"type": "string", "markdownDescription": "string: The SSID or WiFi network name."}, "password": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The password to use for authentication. Leave empty for no password."}, "channel": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The channel of the network (1-14). If given, only connects to networks that are on this channel."}, "manual_ip": {"$ref": "#/definitions/ethernet-manual_ip"}, "bssid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Optionally define a BSSID (MAC-Address) of the network to connect to. This can be used to further restrict which networks to connect to."}, "hidden": {"type": "boolean", "markdownDescription": "boolean: Whether this network is hidden. Defaults to false. If you add this option you also have to specify ssid."}, "priority": {"type": "number", "markdownDescription": "float: The priority of this network. After each time, the network with the highest priority is chosen. If the connection fails, the priority is decreased by one. Defaults to `0`."}, "eap": {"properties": {"identity": {"type": "string", "markdownDescription": "string: The outer identity to pass to the EAP authentication server. This is required for EAP-TLS."}, "username": {"type": "string", "markdownDescription": "string: The username to present to the authenticating server."}, "password": {"type": "string", "markdownDescription": "string: The password to present to the authentication server. For EAP-TLS this password may be set to decrypt to private key instead."}, "certificate_authority": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Path to a PEM encoded certificate to use when validating the authentication server."}, "certificate": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Path to a PEM encoded certificate to use for EAP-TLS authentication."}, "key": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Path to a PEM encoded private key matching `certificate` for EAP-TLS authentication. Optionally encrypted with `password`."}}, "type": ["object", "null"], "markdownDescription": "WPA2_EAP Enterprise Authentication is supported on ESP32s and ESP8266s. In order to configure this feature you must use the [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks) style configuration. The ESP32 is known to work with PEAP, EAP-TTLS, and the certificate based EAP-TLS. These are advanced settings and you will usually need to consult your enterprise network administrator."}}, "type": ["object", "null"]}], "markdownDescription": "Starting with version 1.10.0, you can give ESPHome a number of WiFi networks to connect to. ESPHome will then attempt to connect to the one with the highest signal strength."}, "wifi-ap": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "ssid": {"type": "string"}, "password": {"type": ["null", "object", "string", "array", "number"]}, "channel": {"type": ["null", "object", "string", "array", "number"]}, "manual_ip": {"$ref": "#/definitions/ethernet-manual_ip"}, "ap_timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"]}]}}, "properties": {"esphome": {"$ref": "#/definitions/esphome", "markdownDescription": "Here you specify some core information that ESPHome needs to create firmwares. Most importantly, this is the section of the configuration where you specify the **name** of the node, the **platform** and **board** you\u2019re using."}, "binary_sensor": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "apds9960"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"direction": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The direction to measure. One of:\n  * **UP**\n  \n  * **DOWN**\n  \n  * **LEFT**\n  \n  * **RIGHT**"}, "apds9960_id": {"type": ["null", "object", "string", "array", "number"]}, "device_class": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "as3935"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"as3935_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "ble_presence"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address to track for this binary sensor. Either this or `service_uuid` has to be present."}, "service_uuid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: 16 bit, 32 bit, or 128 bit BLE Service UUID which can be tracked if the device randomizes the MAC address. Either this or `mac_address` has to be present."}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `ble_presence` binary sensor platform lets you track the presence of a Bluetooth Low Energy device."}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the binary sensor(s)."}, "binary_sensors": {"anyOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"type": "array", "items": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}}], "markdownDescription": "list: A list of binary sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Binary Sensor](index.html#config-binary-sensor)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom binary sensors in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "esp32_touch"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "esp32_touch_id": {"type": ["null", "object", "string", "array", "number"]}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to detect touch events on."}, "threshold": {"type": "number", "markdownDescription": "int: The threshold to use to detect touch events. Smaller values mean a higher probability that the pad is being touched."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `esp32_touch` component creates a global hub for detecting touches on the eight touch pads of the ESP32 as [binary sensors](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor)."}, {"if": {"properties": {"platform": {"const": "gpio"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to periodically check."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The GPIO Binary Sensor platform allows you to use any input pin on your device as a binary sensor."}, {"if": {"properties": {"platform": {"const": "homeassistant"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "entity_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The entity ID to import from Home Assistant."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `homeassistant` binary sensor platform allows you to create binary sensors that **import** states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html)."}, {"if": {"properties": {"platform": {"const": "mpr121"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mpr121_id": {"type": ["null", "object", "string", "array", "number"]}, "channel": {"type": "number", "markdownDescription": "integer: The channel number at the MPR121 the touchkey is connected to."}, "touch_threshold": {"type": "number", "markdownDescription": "integer: A per-channel override of the global touch_threshold value. If not specified, uses the global value."}, "release_threshold": {"type": "number", "markdownDescription": "integer: A per-channel override of the global release_threshold value. If not specified, uses the global value."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `mpr121` sensor platform allows you to use your MPR121 ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial.pdf), [Adafruit](https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/overview)) Capacitive Touch Sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "nextion"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "nextion_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the Nextion display."}, "page_id": {"type": "number", "markdownDescription": "int: The ID of the page the component is on. Use `0` for the default page."}, "component_id": {"type": "number", "markdownDescription": "int: The ID (the number, not name!) of the component to track."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `nextion` binary sensor platform lets you track when a component on the display is touched or not. The binary sensor will turn on when the component with the given component and page id is pressed on, and will turn off as soon as the finger is released."}, {"if": {"properties": {"platform": {"const": "pn532"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pn532_id": {"type": ["null", "object", "string", "array", "number"]}, "uid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The unique ID of the NFC/RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) or [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532."}, {"if": {"properties": {"platform": {"const": "rc522"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "rc522_id": {"type": ["null", "object", "string", "array", "number"]}, "uid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The unique ID of the RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `rc522` component allows you to use RC522 RFID controllers ([datasheet](hthttps://www.nxp.com/docs/en/data-sheet/MFRC522.pdff), [Ali Express](https://es.aliexpress.com/item/1260729519.html)) with ESPHome. ESPHome can read the tag UID from it, every RFID tag comes with a unique UID value. Each known tag can be associated to a binary sensor, or you can use the tag information directly. See [Setting Up Tags](https://esphome.io/components/binary_sensor/rc522.html#rc522-setting-up-tags) for information on how to setup individual binary sensors for this component. The RC522 supports SPI, I\u00b2C and UART communication protocols, ESPHome can use either SPI or I\u00b2C."}, {"if": {"properties": {"platform": {"const": "rc522_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "rc522_id": {"type": ["null", "object", "string", "array", "number"]}, "uid": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "rdm6300"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "rdm6300_id": {"type": ["null", "object", "string", "array", "number"]}, "uid": {"type": "number", "markdownDescription": "integer: The unique ID of the NFC/RFID tag."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `rdm6300` component allows you to use RDM6300 NFC/RFID controllers ([datasheet](https://elty.pl/upload/download/RFID/RDM630-Spec.pdf), [iTead](https://www.itead.cc/rdm6300.html)) with ESPHome. This component is a global hub that establishes the connection to the RDM6300 via [UART](https://esphome.io/components/uart.html#uart) and translates the received data. Using the [RDM6300 binary sensors](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the RDM6300."}, {"if": {"properties": {"platform": {"const": "remote_receiver"}}}, "then": {"$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY"}}, {"if": {"properties": {"platform": {"const": "status"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The Status Binary Sensor exposes the node state (if it\u2019s connected to via MQTT/native API) for Home Assistant."}, {"if": {"properties": {"platform": {"const": "sx1509"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sx1509_id": {"type": ["null", "object", "string", "array", "number"]}, "row": {"type": "number", "markdownDescription": "int: The row number for this key on the keypad."}, "col": {"type": "number", "markdownDescription": "int: The column number for this key on the keypad."}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated repeatedly to get the current state of the binary sensor."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `template` binary sensor platform allows you to define any [lambda template](https://esphome.io/guides/automations.html#config-lambda) and construct a binary sensor out if it."}, {"if": {"properties": {"platform": {"const": "ttp229_bsf"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "ttp229_id": {"type": ["null", "object", "string", "array", "number"]}, "channel": {"type": "number", "markdownDescription": "integer: The channel number at the TTP229 the touchkey is connected to."}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "ttp229_lsf"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "ttp229_id": {"type": ["null", "object", "string", "array", "number"]}, "channel": {"type": "number", "markdownDescription": "integer: The channel number at the TTP229 the touchkey is connected to."}}, "type": ["object", "null"]}]}}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "sensor_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the binary sensor."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` binary sensor platform creates a binary sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured."}, {"if": {"properties": {"platform": {"const": "xiaomi_mjyd02yla"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "bindkey": {"type": ["null", "object", "string", "array", "number"]}, "device_class": {"type": ["null", "object", "string", "array", "number"]}, "idle_time": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "illuminance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "light": {"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_mue4094rt"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "device_class": {"type": ["null", "object", "string", "array", "number"]}, "timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_wx08zm"}}}, "then": {"allOf": [{"$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "tablet": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}]}, "markdownDescription": "With ESPHome you can use different types of binary sensors. They will automatically appear in the Home Assistant front-end and have several configuration options."}, "canbus": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/canbus.CANBUS_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "mcp2515"}}}, "then": {"allOf": [{"$ref": "#/definitions/canbus.CANBUS_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "clock": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "One of `8MHZ`, `16MHZ` or `20MHZ`. Clock crystal used on the MCP2515 device. Defaults to `8MHZ`."}, "mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Operation mode. Default ot `NORMAL`\n  * NORMAL: Normal operation\n  \n  * LOOPBACK: Loopback mode can be used to just test you spi connections to the device\n  \n  * LISTENONLY: only receive data"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/spi_bus"}]}}]}, "markdownDescription": "Controller Area Network (CAN bus) is a serial bus protocol to connect individual systems and sensors as an alternative to conventional multi-wire looms. It allows automotive components to communicate on a single or dual-wire networked data bus up to 1Mbps. CAN is an International Standardization Organization (ISO) defined serial communications bus originally developed for the automotive industry to replace the complex wiring harness with a two-wire bus. The specification calls for high immunity to electrical interference and the ability to self-diagnose and repair data errors. These features have led to CAN\u2019s popularity in a variety of industries including building automation, medical, and manufacturing."}, "climate": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "bang_bang"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the current temperature."}, "default_target_temperature_low": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The default low target temperature for the control algorithm. This can be dynamically set in the frontend later."}, "default_target_temperature_high": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The default high target temperature for the control algorithm. This can be dynamically set in the frontend later."}, "idle_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action to call when the climate device wants to enter idle mode."}, "cool_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action to call when the climate device wants to cooling mode and decrease the current temperature."}, "heat_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action to call when the climate device wants to heating mode and increase the current temperature. At least one of `heat_action` and `cool_action` need to be specified."}, "away_config": {"$ref": "#/definitions/climate-bang_bang-away_config", "markdownDescription": "Additionally specify target temperature range settings for away mode. Away mode can be used to have a second set of target temperatures (for example while the user is away or during nighttime)\n  * **default_target_temperature_low** (**Required**, float): The default low target temperature for the control algorithm during away mode.\n  \n  * **default_target_temperature_high** (**Required**, float): The default high target temperature for the control algorithm during away mode."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `bang_bang` climate platform allows you to regulate a value with a [bang-bang controller](https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control) (also called hysteresis controller)."}, {"if": {"properties": {"platform": {"const": "climate_ir_lg"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "header_high": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): time for the high part of the header for the LG protocol. Defaults to `8000us`"}, "header_low": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): time for the low part of the header for the LG protocol. Defaults to `4000us`"}, "bit_high": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): time for the high part of any bit in the LG protocol. Defaults to `600us`"}, "bit_one_low": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): time for the low part of a \u20181\u2019 bit in the LG protocol. Defaults to `1600us`"}, "bit_zero_low": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): time for the low part of a \u20180\u2019 bit in the LG protocol. Defaults to `550us`"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "coolix"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the climate(s)."}, "climates": {"anyOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"type": "array", "items": {"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}}], "markdownDescription": "list: A list of climates to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Climate](index.html#config-climate)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom climate devices in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "daikin"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "fujitsu_general"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "hitachi_ac344"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "mitsubishi"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "pid"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the current temperature."}, "default_target_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The default target temperature (setpoint) for the control algorithm. This can be dynamically set in the frontend later."}, "cool_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that decreases the current temperature. At least one of `heat_output` and `cool_output` must be specified."}, "heat_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of a [float output](https://esphome.io/components/output/index.html#config-output) that increases the current temperature. At least one of `heat_output` and `cool_output` must be specified."}, "control_parameters": {"$ref": "#/definitions/climate-pid-control_parameters", "markdownDescription": "Control parameters of the PID controller.\n  * **kp** (**Required**, float): The factor for the proportional term of the PID controller.\n  \n  * **ki** (*Optional*, float): The factor for the integral term of the PID controller. Defaults to `0`.\n  \n  * **kd** (*Optional*, float): The factor for the derivative term of the PID controller. Defaults to `0`.\n  \n  * **min_integral** (*Optional*, float): The maximum value of the integral term multiplied by `ki` to prevent windup. Defaults to `-1`.\n  \n  * **max_integral** (*Optional*, float): The minimum value of the integral term multiplied by `ki` to prevent windup. Defaults to `1`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `pid` climate platform allows you to regulate a value with a [PID controller](https://en.wikipedia.org/wiki/PID_controller)."}, {"if": {"properties": {"platform": {"const": "tcl112"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "thermostat"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sensor": {"type": ["null", "object", "string", "array", "number"]}, "idle_action": {"$ref": "#/definitions/simple_automation"}, "cool_action": {"$ref": "#/definitions/simple_automation"}, "dry_action": {"$ref": "#/definitions/simple_automation"}, "fan_only_action": {"$ref": "#/definitions/simple_automation"}, "heat_action": {"$ref": "#/definitions/simple_automation"}, "auto_mode": {"$ref": "#/definitions/simple_automation"}, "cool_mode": {"$ref": "#/definitions/simple_automation"}, "dry_mode": {"$ref": "#/definitions/simple_automation"}, "fan_only_mode": {"$ref": "#/definitions/simple_automation"}, "heat_mode": {"$ref": "#/definitions/simple_automation"}, "off_mode": {"$ref": "#/definitions/simple_automation"}, "fan_mode_on_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_off_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_auto_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_low_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_medium_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_high_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_middle_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_focus_action": {"$ref": "#/definitions/simple_automation"}, "fan_mode_diffuse_action": {"$ref": "#/definitions/simple_automation"}, "swing_both_action": {"$ref": "#/definitions/simple_automation"}, "swing_horizontal_action": {"$ref": "#/definitions/simple_automation"}, "swing_off_action": {"$ref": "#/definitions/simple_automation"}, "swing_vertical_action": {"$ref": "#/definitions/simple_automation"}, "default_target_temperature_high": {"type": ["null", "object", "string", "array", "number"]}, "default_target_temperature_low": {"type": ["null", "object", "string", "array", "number"]}, "hysteresis": {"type": ["null", "object", "string", "array", "number"]}, "away_config": {"$ref": "#/definitions/climate-thermostat-away_config"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `thermostat` climate platform allows you to control a climate control system in much the same manner as a physical thermostat. Its operation is similar to the [bang-bang](bang_bang.html) controller; a sensor measures a value (the air temperature) and the controller will try to keep this value within a range defined by the set point(s). To do this, the controller can activate devices like a heating unit and/or a cooling unit to change the value observed by the sensor. When configured for both heating and cooling, it is essentially two [bang-bang](bang_bang.html) controllers in one; it differs, however, in that interation with the thermostat component is nearly identical to that of a real thermostat."}, {"if": {"properties": {"platform": {"const": "toshiba"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "switch_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the climate switch."}, "target_temperature_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the target temperature."}, "current_temperature_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the current temperature."}, "temperature_multiplier": {"type": "number", "markdownDescription": "float: A multiplier to modify the incoming and outgoing temperature values - [see below](https://esphome.io/components/climate/tuya.html#temperature-multiplier). If the device has different multipliers for current and target temperatures, **temperature_multiplier** can be replaced with both of:\n  * **current_temperature_multiplier** (*Optional*, float): A multiplier to modify the current temperature value.\n  \n  * **target_temperature_multiplier** (*Optional*, float): A multiplier to modify the target temperature value."}, "current_temperature_multiplier": {"type": "number"}, "target_temperature_multiplier": {"type": "number"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` climate platform creates a climate device from a tuya component."}, {"if": {"properties": {"platform": {"const": "whirlpool"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}, "receiver_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the remote_receiver if this platform supports receiver. see: [Using a Receiver](https://esphome.io/components/climate/ir_climate.html#ir-receiver-id)."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: There are two valid models"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "yashima"}}}, "then": {"allOf": [{"$ref": "#/definitions/climate.CLIMATE_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "transmitter_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the remote transmitter."}, "supports_cool": {"type": "boolean", "markdownDescription": "boolean: Enables setting cooling mode for this climate device. Defaults to `True`."}, "supports_heat": {"type": "boolean", "markdownDescription": "boolean: Enables setting heating mode for this climate device. Defaults to `True`."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor that is used to measure the ambient temperature. This is only for reporting the current temperature in the frontend."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}]}, "markdownDescription": "ESPHome has support for climate devices. Climate devices can represent different types of hardware, but the defining factor is that climate devices have a settable target temperature and can be put in different modes like HEAT, COOL, AUTO or OFF."}, "cover": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/cover.COVER_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the cover(s)."}, "covers": {"anyOf": [{"$ref": "#/definitions/cover.COVER_SCHEMA"}, {"type": "array", "items": {"$ref": "#/definitions/cover.COVER_SCHEMA"}}], "markdownDescription": "list: A list of covers to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Cover](index.html#config-cover)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom covers in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "endstop"}}}, "then": {"allOf": [{"$ref": "#/definitions/cover.COVER_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "stop_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be closed or an endstop is reached."}, "open_endstop": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor) that turns on when the open position is reached."}, "open_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be opened."}, "open_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time it takes the cover to open up from the fully-closed state."}, "close_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be closed."}, "close_endstop": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor) that turns on when the closed position is reached."}, "close_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time it takes the cover to close from the fully-open state."}, "max_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The maximum duration the cover should be opening or closing. Useful for protecting from dysfunctional endstops."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `endstop` cover platform allows you to create covers with position control that have endstops at both ends of the cover to detect the fully-open and fully-closed states. When any of these endstops are reached, the cover is stopped (via `stop_action`) and the corresponding state is sent out."}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"$ref": "#/definitions/cover.COVER_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated repeatedly to get the current state of the cover."}, "optimistic": {"type": "boolean", "markdownDescription": "boolean: Whether to operate in optimistic mode - when in this mode, any command sent to the template cover will immediately update the reported state and no lambda needs to be used. Defaults to `false`."}, "assumed_state": {"type": "boolean", "markdownDescription": "boolean: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding one of them. Defaults to `false`."}, "has_position": {"type": "boolean", "markdownDescription": "boolean: Whether this cover will publish its position as a floating point number. By default (`false`), the cover only publishes OPEN/CLOSED position. Parameter useless if you set the POSITION_ACTION (is set to TRUE)."}, "open_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover to be opened."}, "close_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be closed."}, "stop_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be stopped."}, "tilt_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific tilt position. The desired tilt is available in the lambda in the `tilt` variable."}, "tilt_lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated repeatedly to get the current tilt position of the cover."}, "position_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific position. The desired position is available in the lambda in the `pos` variable."}, "restore_mode": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `template` cover platform allows you to create simple covers out of just a few actions and a value lambda. Once defined, it will automatically appear in Home Assistant as a cover and can be controlled through the frontend."}, {"if": {"properties": {"platform": {"const": "time_based"}}}, "then": {"allOf": [{"$ref": "#/definitions/cover.COVER_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "stop_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed to stop the cover when the remote requests the cover to be stopped or when the cover has been opening/closing for the given durations."}, "open_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be opened."}, "open_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time it takes the cover to open up from the fully-closed state."}, "close_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote requests the cover to be closed."}, "close_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time it takes the cover to close from the fully-open state."}, "has_built_in_endstop": {"type": "boolean", "markdownDescription": "boolean: Indicates that the cover has built in end stop detectors. In this configuration the `stop_action` is not performed when the open or close time is completed and if the cover is commanded to open or close the corresponding actions will be performed without checking current state. Defaults to `False`."}, "assumed_state": {"type": "boolean", "markdownDescription": "boolean: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding or disabling one of them. Defaults to `True`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `time_based` cover platform allows you to create covers with position control that do not have any position feedback. The state of the cover is thus always an assumed one, the current position is approximated with the time the cover has been moving in a direction."}]}, "markdownDescription": "The `cover` component is a generic representation of covers in ESPHome. A cover can (currently) either be *closed* or *open* and supports three types of commands: *open*, *close* and *stop*."}, "display": {"type": "array", "items": {"allOf": [{"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "ili9341"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. Options are:\n  * `M5STACK`\n  \n  * `TFT 2.4`"}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "led_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The display\u2019s backlight pin. **Note:** Connect to a PWM-capable pin to switch/dim the display\u2019s backlight **or** save a pin by connecting it through a 3.3K resistor to the +3V supply."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `ili9341` display platform allows you to use ILI9341 ([datasheet](https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf), [Aliexpress](https://s.click.aliexpress.com/e/_dTKH6Mt)) displays with ESPHome. As this is a somewhat higher resolution display and may require pins beyond the typical SPI connections, it is better suited for use with the ESP32."}, {"if": {"properties": {"platform": {"const": "inkplate6"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "greyscale": {"type": "boolean", "markdownDescription": "boolean: Makes the screen display 3 bit colors. Defaults to `False`"}, "partial_updating": {"type": "boolean", "markdownDescription": "boolean: Makes the screen update partially, which is faster, but leaves burnin. Defaults to `False`"}, "full_update_every": {"type": "number", "markdownDescription": "int: When partial updating is enabled, forces a full screen update after chosen number of updates. Defaults to `10`"}, "ckv_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The CKV pin for the Inkplate display."}, "gmod_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The GMOD pin for the Inkplate display."}, "gpio0_enable_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The GPIO0 Enable pin for the Inkplate display."}, "oe_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The OE pin for the Inkplate display."}, "powerup_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Powerup pin for the Inkplate display."}, "sph_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The SPH pin for the Inkplate display."}, "spv_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The SPV pin for the Inkplate display."}, "vcom_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The VCOM pin for the Inkplate display."}, "wakeup_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA"}, "cl_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The CL pin for the Inkplate display. Defaults to GPIO0."}, "le_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The LE pin for the Inkplate display. Defaults to GPIO2."}, "display_data_0_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 0 pin for the Inkplate display. Defaults to GPIO4."}, "display_data_1_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 1 pin for the Inkplate display. Defaults to GPIO5."}, "display_data_2_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 2 pin for the Inkplate display. Defaults to GPIO18."}, "display_data_3_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 3 pin for the Inkplate display. Defaults to GPIO19."}, "display_data_4_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 4 pin for the Inkplate display. Defaults to GPIO23."}, "display_data_5_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 5 pin for the Inkplate display. Defaults to GPIO25."}, "display_data_6_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 6 pin for the Inkplate display. Defaults to GPIO26."}, "display_data_7_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The Data 7 pin for the Inkplate display. Defaults to GPIO27."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "All-in-one e-paper display  `Inkplate 6` Inkplate 6 is a powerful, Wi-Fi enabled ESP32 based six-inch e-paper display \u2013 recycled from a Kindle e-reader. Its main feature is simplicity. Learn more at [Inkplate\u2019s website](https://inkplate.io/)"}, {"if": {"properties": {"platform": {"const": "lcd_gpio"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"dimensions": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "data_pins": {"type": "array", "items": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA"}, "markdownDescription": "list of [Pin Schemas](https://esphome.io/guides/configuration-types.html#config-pin-schema): A list of the data pins you have hooked up to the LCD. The list can either be 8 items long (when you have connected all 8 data pins), or 4 items long (if you\u2019re operating in 4-bit mode with either the first 4 data pins connected or the last 4 data pins connected)."}, "enable_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin you have `EN` hooked up to."}, "rs_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin you have `RS` hooked up to."}, "rw_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Optionally set the pin you have `RW` hooked up to. You can also just permanently connect that pin to GND."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}}, {"if": {"properties": {"platform": {"const": "lcd_pcf8574"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"dimensions": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}}, {"if": {"properties": {"platform": {"const": "max7219"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "num_chips": {"type": "number", "markdownDescription": "integer: The number of chips you wish to use for daisy chaining. Defaults to `1`."}, "intensity": {"type": "number", "markdownDescription": "integer: The intensity with which the MAX7219 should drive the outputs. Range is from 0 (least intense) to 15 (the default)."}, "reverse_enable": {"type": "boolean", "markdownDescription": "boolean: For some displays the order of the chips is reversed so you\u2019ll see \u201c56781234\u201d instead of \u201c12345678\u201d. This option will adjust the output to compensate. Defaults to `False`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `max7219` display platform allows you to use MAX7219 7-segment display drivers ( [datasheet](https://datasheets.maximintegrated.com/en/ds/MAX7219-MAX7221.pdf), [hobbycomponents](https://hobbycomponents.com/displays/597-max7219-8-digit-seven-segment-display-module)) with ESPHome. Please note that this integration is *only* for 7-segment display, not matrix configurations."}, {"if": {"properties": {"platform": {"const": "max7219digit"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "num_chips": {"type": "number", "markdownDescription": "integer: The number of chips you wish to use for daisy chaining. Defaults to `4`."}, "intensity": {"type": "number", "markdownDescription": "integer: The intensity with which the MAX7219 should drive the outputs. Range is from `0`, least intense to `15` the brightest. Defaults to `15`."}, "rotate_chip": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Rotates every 8x8 chip. Valid values are `0`, `90`, `180` and `270`. Defaults to `0`."}, "scroll_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set the scroll mode. One of `CONTINUOUS` or `STOP`. Defaults to `CONTINUOUS`\n  * `CONTINUOUS`: Always scrolls and the text repeats continuously, you might need to add some separation at the end.\n  \n  * `STOP`: When text is over it waits the `scroll_dwell` time and scroll is set back to the start."}, "scroll_enable": {"type": "boolean", "markdownDescription": "boolean: Turn scroll mode on when content does not fit. Defaults to `True`."}, "scroll_speed": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Set scroll speed. Defaults to `250ms`"}, "scroll_delay": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Set delay time before scroll starts. Defaults to `1s`."}, "scroll_dwell": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Sets the wait time at the end of the scroll before starting over. This is only used in mode `STOP`. Defaults to `1s`."}, "reverse_enable": {"type": "boolean", "markdownDescription": "boolean: For some displays the order of the displays is reversed (\u201cDCBA\u201d). This option will reverse the display to (\u201cABCD\u201d) again. Defaults to  `False`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `max7219` display platform allows you to use MAX7219 digit with ESPHome. Please note that this integration is *only* for the digit \u201cmatrix\u201d display, for the 7 segment display see [MAX7219 7-Segment Display](max7219.html)."}, {"if": {"properties": {"platform": {"const": "nextion"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: Set display brightness in %. Defaults to `100%`"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `nextion` display platform allows you to use Nextion LCD displays ([datasheet](https://nextion.itead.cc/resources/datasheets/), [iTead](https://www.itead.cc/display/nextion.html)) with ESPHome."}, {"if": {"properties": {"platform": {"const": "pcd8544"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "cs_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The CS pin."}, "contrast": {"type": "number", "markdownDescription": "int: Set screen contrast (0-255). Defaults to `0x7f`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `pcd8544` display platform allows you to use PCD8544 ([Adafruit](https://www.adafruit.com/product/338)) displays with ESPHome. Connection to this display is made using the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi)."}, {"if": {"properties": {"platform": {"const": "ssd1306_i2c"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin. Defaults to not connected."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: Set display brightness in %. Defaults to `100%`"}, "external_vcc": {"type": "boolean", "markdownDescription": "boolean: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ssd1306_i2c` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1306 or SH1106 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1306.html#ssd1306-spi)."}, {"if": {"properties": {"platform": {"const": "ssd1306_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin. Defaults to not connected."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: Set display brightness in %. Defaults to `100%`"}, "external_vcc": {"type": "boolean", "markdownDescription": "boolean: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `ssd1306_spi` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1306 or SH1106 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#ssd1306-i2c)."}, {"if": {"properties": {"platform": {"const": "ssd1322_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1322 256x64`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "external_vcc": {"type": "boolean"}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}}, {"if": {"properties": {"platform": {"const": "ssd1325_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. Options are:\n  * `SSD1325 128x32` (SSD1325 with 128 columns and 32 rows)\n  \n  * `SSD1325 128x64`\n  \n  * `SSD1325 96x16`\n  \n  * `SSD1325 64x48`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "external_vcc": {"type": "boolean"}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}}, {"if": {"properties": {"platform": {"const": "ssd1327_i2c"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin. Defaults to not connected."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: Set display brightness in %. Defaults to `100%`"}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ssd1327_i2c` display platform allows you to use SSD1327 ([datasheet](https://www.generationrobots.com/media/Ecran_OLED_0_96/SSD1327_datasheet.pdf), [Waveshare](https://www.waveshare.com/1.5inch-oled-module.htm)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1327 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1327.html#ssd1327-spi)."}, {"if": {"properties": {"platform": {"const": "ssd1327_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin. Defaults to not connected."}, "brightness": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "percentage: Set display brightness in %. Defaults to `100%`"}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `ssd1327_spi` display platform allows you to use SSD1327 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1327.pdf), [Adafruit](https://www.adafruit.com/product/326)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1327 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#ssd1327-i2c)."}, {"if": {"properties": {"platform": {"const": "ssd1331_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `ssd1331_spi` display platform allows you to use SSD1331 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1331_1.2.pdf), [Adafruit](https://www.adafruit.com/product/684)) displays with ESPHome. This component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi)."}, {"if": {"properties": {"platform": {"const": "ssd1351_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the display. Options are:\n  * `SSD1351 128x128` (SSD1351 with 128 columns and 128 rows)\n  \n  * `SSD1351 128x96` (SSD1351 with 128 columns and 96 rows)"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "brightness": {"type": ["null", "object", "string", "array", "number"]}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}}, {"if": {"properties": {"platform": {"const": "st7735"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "\u201cSee Models Below\u201d: This the model to use. INITR_BLACKTAB is the default"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "id": {"type": ["null", "object", "string", "array", "number"]}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}, "device_width": {"type": "number", "markdownDescription": "int: The device width. 128 is default"}, "device_height": {"type": "number", "markdownDescription": "int: The device height. 160 is default"}, "col_start": {"type": "number", "markdownDescription": "int: The device height. 160 is default"}, "row_start": {"type": "number", "markdownDescription": "int: The device height. 160 is default"}, "eight_bit_color": {"type": "boolean", "markdownDescription": "\u201cTrue/False\u201d : 8bit mode. Default is False. This saves 50% of the buffer required for the display."}, "use_bgr": {"type": "boolean"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "ST7735 Display Driver."}, {"if": {"properties": {"platform": {"const": "st7789v"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}, "cs_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The CS pin."}, "backlight_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The display\u2019s backlight pin."}, "brightness": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `st7789v` display platform allows you to use ST7789V ([datasheet](https://github.com/Xinyuan-LilyGO/TTGO-T-Display), [Tindie](https://www.tindie.com/products/ttgo/lilygor-ttgo-t-display/)) displays with ESPHome. Note that this component utilizes the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi); the physical connection is already in place on the TTGO T-Display module as shown below."}, {"if": {"properties": {"platform": {"const": "tm1637"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "intensity": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]", "markdownDescription": "integer: The intensity with which the TM1637 should drive the outputs. Range is from 0 (least intense) to 7 (the default)."}, "clk_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin you have the CLK line hooked up to."}, "dio_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin you have the DIO line hooked up to."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `tm1637` display platform allows you to use the popular TM1637 7-segment display drivers with ESPHome."}, {"if": {"properties": {"platform": {"const": "waveshare_epaper"}}}, "then": {"allOf": [{"$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dc_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DC pin."}, "model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The model of the E-Paper display. Options are:\n  * `1.54in`\n  \n  * `2.13in` (not tested)\n  \n  * `2.13in-ttgo` (T5_V2.3 tested)\n  \n  * `2.13in-ttgo-b73` (T5_V2.3 with B73 display tested)\n  \n  * `2.70in` (currently not working with the HAT Rev 2.1 version)\n  \n  * `2.90in`\n  \n  * `2.90inv2`\n  \n  * `2.90in-b` (B/W rendering only)\n  \n  * `4.20in`\n  \n  * `5.83in`\n  \n  * `7.50in`\n  \n  * `7.50inV2` (Can\u2019t use with an ESP8266 as it runs out of RAM)"}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The RESET pin. Defaults to not connected. Make sure you pull this pin high (by connecting it to 3.3V with a resistor) if not connected to a GPIO pin."}, "busy_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The BUSY pin. Defaults to not connected."}, "full_update_every": {"type": "number", "markdownDescription": "int: E-Paper displays have two modes of switching to the next image: A partial update that only changes the pixels that have changed and a full update mode that first clears the entire display and then re-draws the image. The former is much quicker and nicer, but every so often a full update needs to happen because artifacts accumulate. On the `1.54in`, `2.13in`, `2.90in`, and `2.90inv2` models you have the option to switch only do a full-redraw every x-th time using this option. Defaults to `30` on the described models and a full update for all other models."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `waveshare_epaper` display platform allows you to use some E-Paper displays sold by [Waveshare](https://www.waveshare.com/product/displays/e-paper.htm) with ESPHome. The 2.13\u201d [TTGO module](https://github.com/lewisxhe/TTGO-EPaper-Series) with an ESP32 on the board is supported as well. Depending on your specific revision of the board you might need to try out the `-b73` version (see below). Similar modules sold by other vendors might also work but not have been tested yet."}]}, "markdownDescription": "The `display` component houses ESPHome\u2019s powerful rendering and display engine. Fundamentally, there are these types of displays:"}, "fan": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/fan.FAN_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "binary"}}}, "then": {"allOf": [{"$ref": "#/definitions/fan.FAN_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the binary output component to use for this fan."}, "direction_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [output](https://esphome.io/components/output/index.html#output) to use for the direction state of the fan. Default is empty."}, "oscillation_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [output](https://esphome.io/components/output/index.html#output) to use for the oscillation state of this fan. Default is empty."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `binary` fan platform lets you represent any binary [Output Component](https://esphome.io/components/output/index.html#output) as a fan."}, {"if": {"properties": {"platform": {"const": "speed"}}}, "then": {"allOf": [{"$ref": "#/definitions/fan.FAN_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [float output](https://esphome.io/components/output/index.html#output) to use for this fan."}, "oscillation_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [output](https://esphome.io/components/output/index.html#output) to use for the oscillation state of this fan. Default is empty."}, "direction_output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the [output](https://esphome.io/components/output/index.html#output) to use for the direction state of the fan. Default is empty."}, "speed": {"$ref": "#/definitions/fan-speed-speed", "markdownDescription": "Set the float values for each speed setting:\n  * **low** (**Required**, float): Set the value for the low speed setting. Must be in range 0 to 1. Defaults to 0.33.\n  \n  * **medium** (**Required**, float): Set the value for the medium speed setting. Must be in range 0 to 1. Defaults to 0.66.\n  \n  * **high** (**Required**, float): Set the value for the high speed setting. Must be in range 0 to 1. Defaults to 1."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `speed` fan platform lets you represent any float [Output Component](https://esphome.io/components/output/index.html#output) as a fan that supports speed settings."}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/fan.FAN_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "oscillation_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the oscillation switch. Probably not supported on any Tuya controllers currently, but it\u2019s there if need be."}, "speed_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the fan speed."}, "switch_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the fan switch."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` fan platform creates a variable speed fan from a tuya component."}]}, "markdownDescription": "With the `fan` domain you can create components that appear as fans in the Home Assistant frontend. A fan can be switched ON or OFF, optionally has a speed setting (`LOW`, `MEDIUM`, `HIGH`) and can have an oscillate output."}, "light": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/light.LIGHT_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "binary"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BINARY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the binary [Output Component](https://esphome.io/components/output/index.html#output) to use for this light."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `binary` light platform creates a simple ON/OFF-only light from a [binary output component](https://esphome.io/components/output/index.html#output)."}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the light output(s)."}, "lights": {"anyOf": [{"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}, {"type": "array", "items": {"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}}], "markdownDescription": "list: A list of lights to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Light](index.html#config-light)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom lights in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "cwww"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "cold_white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the cold white channel."}, "warm_white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the warm white channel."}, "cold_white_color_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the cold white channel."}, "warm_white_color_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the warm white channel."}, "constant_brightness": {"type": "boolean", "markdownDescription": "boolean: When enabled, this will keep the overall brightness of the cold and warm white channels constant by limiting the combined output to 100% of a single channel. This reduces the possible overall brightness but is necessary for some power supplies that are not able to run both channels at full brightness at once. Defaults to `false`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `cwww` light platform creates an Cold-White+Warm-White light from 2 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The two channels will be mixed using the color temperature configuration options."}, {"if": {"properties": {"platform": {"const": "fastled_clockless"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "num_leds": {"type": "number", "markdownDescription": "int: The number of LEDs attached."}, "rgb_order": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`."}, "max_refresh_rate": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset."}, "chipset": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets) for options."}, "pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the data line of the FastLED light."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `fastled_clockless` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets)."}, {"if": {"properties": {"platform": {"const": "fastled_spi"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "num_leds": {"type": "number", "markdownDescription": "int: The number of LEDs attached."}, "rgb_order": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`."}, "max_refresh_rate": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset."}, "chipset": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets) for options."}, "data_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the data line of the FastLED light."}, "clock_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the clock line of the FastLED light."}, "data_rate": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "frequency: The data rate to use for shifting data to the light. Can help if you have long cables or slow level-shifters."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `fastled_spi` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets)."}, {"if": {"properties": {"platform": {"const": "hbridge"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "pin_a": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the first float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light."}, "pin_b": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the second float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `hbridge` light platform creates a dual color brightness controlled light from two [float output component](https://esphome.io/components/output/index.html#output)."}, {"if": {"properties": {"platform": {"const": "monochromatic"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for this light."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `monochromatic` light platform creates a simple brightness-only light from an [float output component](https://esphome.io/components/output/index.html#output)."}, {"if": {"properties": {"platform": {"const": "neopixelbus"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of light. This is used to specify if it is an RGBW or RGB light and in which order the colors are. Defaults to `GRB`. Change this if you have lights with white value and/or the colors are in the wrong order."}, "variant": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The chipset variant. You can read more about these [here](https://github.com/Makuna/NeoPixelBus/wiki/NeoPixelBus-object#neopixel-led-model-specific-methods) (some of the info on that page is not entirely correct). One of these values:\n  * `800KBPS` (default)\n  \n  * `400KBPS`\n  \n  * `WS2812X`\n  \n  * `SK6812`\n  \n  * `WS2813` (same as `WS2812X`)\n  \n  * `WS2812` (same as `800KBPS`)\n  \n  * `LC8812` (same as `SK6812`)"}, "method": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The method to transmit the data with. You can read more about these here: [ESP32](https://github.com/Makuna/NeoPixelBus/wiki/ESP32-NeoMethods), [ESP8266](https://github.com/Makuna/NeoPixelBus/wiki/ESP8266-NeoMethods)\n  * `ESP8266_DMA` (default for ESP8266, only on pin GPIO3)\n  \n  * `ESP8266_UART0` (only on pin GPIO1)\n  \n  * `ESP8266_UART1` (only on pin GPIO2)\n  \n  * `ESP8266_ASYNC_UART0` (only on pin GPIO1)\n  \n  * `ESP8266_ASYNC_UART1` (only on pin GPIO2)\n  \n  * `ESP32_I2S_0`\n  \n  * `ESP32_I2S_1` (default for ESP32)\n  \n  * `BIT_BANG` (can flicker a bit)"}, "invert": {"type": "boolean", "markdownDescription": "boolean: Invert data output, for use with n-type transistor. Defaults to `no`."}, "pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the data line of the light."}, "clock_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the clock line of the light, for two-pin lights."}, "data_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin for the data line of the light, for two-pin lights."}, "num_leds": {"type": "number", "markdownDescription": "int: The number of LEDs attached."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `neopixelbus` light platform allows you to create RGB lights in ESPHome for a individually addressable lights like NeoPixel or WS2812."}, {"if": {"properties": {"platform": {"const": "partition"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "segments": {"anyOf": [{"$ref": "#/definitions/light-partition-segments"}, {"type": "array", "items": {"$ref": "#/definitions/light-partition-segments"}}], "markdownDescription": "list: The segments this light partition controls\n  * **id** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id)): The ID of the light this segment belongs to.\n  \n  * **from** (**Required**, int): The first LED to address in the segment. Counting starts with 0, so first LED is 0.\n  \n  * **to** (**Required**, int): The index of the last LED to address in this segment."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `partition` light platform allows you to combine multiple addressable light segments (like [FastLED Light](fastled.html) or [Neopixelbus Light](neopixelbus.html)) into a single addressable light. This platform also allows splitting up an addressable lights into multiple segments, so that segments can be individually controlled."}, {"if": {"properties": {"platform": {"const": "rgb"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `rgb` light platform creates an RGB light from 3 [float output components](https://esphome.io/components/output/index.html#output) (one for each color channel)."}, {"if": {"properties": {"platform": {"const": "rgbw"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel."}, "white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the white channel."}, "color_interlock": {"type": "boolean", "markdownDescription": "boolean: When enabled, this will prevent white leds being on at the same time as RGB leds. See [Color Interlock](https://esphome.io/components/light/rgbw.html#rgbw-color-interlock) for more information. Defaults to `false`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `rgbw` light platform creates an RGBW light from 4 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel)."}, {"if": {"properties": {"platform": {"const": "rgbww"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "red": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the red channel."}, "green": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the green channel."}, "blue": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the blue channel."}, "cold_white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the cold white channel."}, "warm_white": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the float [Output Component](https://esphome.io/components/output/index.html#output) to use for the warm white channel."}, "cold_white_color_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the cold white channel."}, "warm_white_color_temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The color temperate (in [mireds](https://en.wikipedia.org/wiki/Mired) or Kelvin) of the warm white channel."}, "constant_brightness": {"type": "boolean", "markdownDescription": "boolean: When enabled, this will keep the overall brightness of the cold and warm white channels constant by limiting the combined output to 100% of a single channel. This reduces the possible overall brightness but is necessary for some power supplies that are not able to run both channels at full brightness at once. Defaults to `false`."}, "color_interlock": {"type": "boolean", "markdownDescription": "boolean: When enabled, this will prevent white leds being on at the same time as RGB leds. See [Color Interlock](rgbw.html#rgbw-color-interlock) for more information. Defaults to `false`."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `rgbww` light platform creates an RGBWW (cold white + warm white) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The cold white and warm white channels will be mixed using the color temperature configuration options."}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"}, {"properties": {"output_id": {"type": ["null", "object", "string", "array", "number"]}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "dimmer_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the dimmer value."}, "min_value_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the MCU minimum value setting.  If this is set then ESPHome will sync the **min_value** to the MCU on startup."}, "switch_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the power switch.  My dimmer required this to be able to turn the light on and off.  Without this you would only be able to change the brightness and would have to toggle the light using the physical buttons."}, "min_value": {"type": "number", "markdownDescription": "int, default 0: The lowest dimmer value allowed.  My dimmer had a minimum of 25 and wouldn\u2019t even accept anything lower, but this option is available if necessary."}, "max_value": {"type": "number", "markdownDescription": "int, default 255: The highest dimmer value allowed.  My dimmer had a maximum of 255 which seems like it would be the typical value."}, "gamma_correct": {"type": "number"}, "default_transition_length": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` light platform creates a simple brightness-only light from a tuya serial component."}]}, "markdownDescription": "The `light` domain in ESPHome lets you create lights that will automatically be shown in Home Assistant\u2019s frontend and have many features such as RGB colors, transitions, flashing and effects."}, "output": {"type": "array", "items": {"allOf": [{"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "ac_dimmer"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "gate_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin used to control the Triac or Mosfet."}, "zero_cross_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin used to sense the AC Zero cross event, you can have several dimmers controlled with the same zero cross detector, in such case duplicate the `zero_cross_pin` config on each output."}, "init_with_half_cycle": {"type": "boolean", "markdownDescription": "boolean: Will send the first full half AC cycle Try to use this for dimmable LED lights, it might help turning on at low brightness levels. On Halogen lamps it might show at initial flicker. Defaults to `False`."}, "method": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set the method for dimming, can be:\n  * `leading pulse` (default): a short pulse to trigger a triac.\n  \n  * `leading`: gate pin driven high until the zero cross is detected\n  \n  * `trailing`: gate pin driven high from zero cross until dim period, this method is suitable for mosfet dimmers only."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "This component has not been fully tested yet, if you are testing this component please share your experience with the dimmer hardware and light model and configuration here [https://github.com/esphome/feature-requests/issues/278](https://github.com/esphome/feature-requests/issues/278)"}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"allOf": [{"type": "object", "properties": {"type": {"type": "string", "markdownDescription": "string: The type of output. One of `binary` and `float`."}}}, {"if": {"properties": {"type": {"const": "binary"}}}, "then": {"$ref": "#/definitions/output-custom-binary"}}, {"if": {"properties": {"type": {"const": "float"}}}, "then": {"$ref": "#/definitions/output-custom-float"}}]}, "markdownDescription": "This integration can be used to create custom binary and float [outputs](index.html) in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "esp32_dac"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to use DAC on. Only GPIO25 and GPIO26 are supported."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The ESP32 DAC platform allows you to output analog voltages using the 8-bit digital-to-analog converter of the ESP32. Unlike the [ESP32 LEDC Output](ledc.html), which can simulate an analog signal by using a fast switching frequency, the hardware DAC can output a *real* analog signal with no need for additional filtering."}, {"if": {"properties": {"platform": {"const": "esp8266_pwm"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to use PWM on."}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "frequency: The frequency to run the PWM with. Lower frequencies have more visual artifacts, but can represent much more colors. Defaults to `1000 Hz`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The ESP8266 Software PWM platform allows you to use a software PWM on the pins GPIO0-GPIO16 on your ESP8266. Note that this is a software PWM, so there can be some flickering during periods of high WiFi activity. Hardware PWMs like the one on the ESP32 (see [ESP32 LEDC Output](ledc.html)) are preferred."}, {"if": {"properties": {"platform": {"const": "gpio"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to use PWM on."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The GPIO output component is quite simple: It exposes a single GPIO pin as an output component. Note that output components are **not** switches and will not show up in Home Assistant. See [GPIO Switch](https://esphome.io/components/switch/gpio.html)."}, {"if": {"properties": {"platform": {"const": "ledc"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to use LEDC on. Can only be GPIO0-GPIO33."}, "frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: At which frequency to run the LEDC channel\u2019s timer. Defaults to 1000Hz."}, "channel": {"type": "number", "markdownDescription": "int: Manually set the [LEDC channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel) to use. Two adjacent channels share the same timer. Defaults to an automatic selection."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The LEDC output component exposes a [LEDC PWM channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html) of the ESP32 as an output component."}, {"if": {"properties": {"platform": {"const": "mcp4725"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The MCP4725 output component allows to use [12bit external DAC](https://learn.sparkfun.com/tutorials/mcp4725-digital-to-analog-converter-hookup-guide/all) in order to have analog output(s) on any board by using I2C. Devices default address is `0x60` and configurable alternative is `0x61`."}, {"if": {"properties": {"platform": {"const": "my9231"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"my9231_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the [Component/Hub](https://esphome.io/components/output/my9231.html#my9231-component). Use this if you have multiple MY9231/MY9291 chains you want to use at the same time."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "channel": {"type": "number", "markdownDescription": "int: Chose the channel of the MY9231/MY9291 chain of this output component. Channel 0 is the most close channel."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The MY9231/MY9291 component represents a MY9231/MY9291 LED diver chain ([MY9231 description](http://www.my-semi.com.tw/file/MY9231_BF_0.91.pdf), [MY9291 description](http://www.my-semi.com.tw/file/MY9291_BF_0.91.pdf)) in ESPHome. Communication is done with two GPIO pins (DI and DCKI) and multiple driver chips can be chained. There are two models with different number of output channels (MY9291 with 4 channels and MY9231 with 3 channels). They are popular driver chips used in smart light bulbs:"}, {"if": {"properties": {"platform": {"const": "pca9685"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pca9685_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the [PCA9685 hub](https://esphome.io/components/output/pca9685.html#pca9685-component). Use this if you have multiple PCA9685s you want to use at the same time."}, "channel": {"type": "number", "markdownDescription": "int: Chose the channel of the PCA9685 of this output component. Must be in range from 0 to 15."}}, "type": ["object", "null"]}]}, "markdownDescription": "The PCA9685 component represents a PCA9685 12-bit PWM driver ([datasheet](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel), [adafruit](https://www.adafruit.com/product/815)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication."}, {"if": {"properties": {"platform": {"const": "slow_pwm"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to pulse."}, "period": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The duration of each cycle. (i.e. a 10s period at 50% duty would result in the pin being turned on for 5s, then off for 5s)"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "Similar to PWM, the Slow PWM Output platform allows you to control GPIO pins by pulsing them on/off over a longer time period. It could be used to control a heating element through a relay where a fast PWM update cycle would not be appropriate."}, {"if": {"properties": {"platform": {"const": "sm16716"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"sm16716_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the [Component/Hub](https://esphome.io/components/output/sm16716.html#sm16716-component). Use this if you have multiple SM16716 chains you want to use at the same time."}, "id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "channel": {"type": "number", "markdownDescription": "int: Chose the channel of the SM16716 chain of this output component."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The SM16716 component represents a SM16716 LED diver chain ([SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf), [SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf)) in ESPHome. Communication is done with two GPIO pins (MOSI and SCLK) and multiple driver chips can be chained. It is used in some smart light bulbs:"}, {"if": {"properties": {"platform": {"const": "sx1509"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sx1509_id": {"type": ["null", "object", "string", "array", "number"]}, "pin": {"type": "number"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"type": "object", "properties": {"type": {"type": "string", "markdownDescription": "string: The type of output. One of `binary` and `float`."}}}, {"if": {"properties": {"type": {"const": "binary"}}}, "then": {"$ref": "#/definitions/output-template-binary"}}, {"if": {"properties": {"type": {"const": "float"}}}, "then": {"$ref": "#/definitions/output-template-float"}}]}, "markdownDescription": "The `template` output component can be used to create templated binary and float outputs in ESPHome."}, {"if": {"properties": {"platform": {"const": "tlc59208f"}}}, "then": {"allOf": [{"$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id to use for this output component."}, "tlc59208f_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the [TLC59208F chip](https://esphome.io/components/output/tlc59208f.html#tlc59208f-component). Use this if you have multiple TLC59208Fs you want to use at the same time."}, "channel": {"type": "number", "markdownDescription": "int: Choose the channel of the TLC59208F for this output component. Must be in range from 0 to 7."}}, "type": ["object", "null"]}]}, "markdownDescription": "The TLC59208F component represents a Texas Instruments TLC59208F 8-bit PWM driver ([datasheet](http://www.ti.com/lit/gpn/tlc59208f), [hw example](https://faboplatform.github.io/ArduinoDocs/03.I2C%20Brick/211_brick_i2c_7seg/)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication."}]}, "markdownDescription": "Each platform of the `output` domain exposes some output to ESPHome. These are grouped into two categories: `binary` outputs (that can only be ON/OFF) and `float` outputs (like PWM, can output any rational value between 0 and 1)."}, "sensor": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "adc"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to measure the voltage on. Or on the ESP8266 alternatively also `VCC`, see [ESP8266 Measuring VCC](https://esphome.io/components/sensor/adc.html#adc-esp8266-vcc)."}, "attenuation": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Only on ESP32. Specify the ADC attenuation to use. See [ESP32 Attenuation](https://esphome.io/components/sensor/adc.html#adc-esp32-attenuation)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The Analog To Digital (`adc`) Sensor allows you to use the built-in ADC in your device to measure a voltage on certain pins. On the ESP8266 only pin A0 (GPIO17) supports this. On the ESP32 pins GPIO32 through GPIO39 can be used."}, {"if": {"properties": {"platform": {"const": "ade7953"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "irq_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin connected to the ADE7935 IRQ line (if connected)"}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in volt. All options from [Sensor](index.html#config-sensor)."}, "current_a": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the A channel in amperes. All options from [Sensor](index.html#config-sensor)."}, "current_b": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the B channel in amperes. All options from [Sensor](index.html#config-sensor)."}, "active_power_a": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](index.html#config-sensor)."}, "active_power_b": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:"}, {"if": {"properties": {"platform": {"const": "ads1115"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "ads1115_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID of the [ADS1115 Hub](https://esphome.io/components/sensor/ads1115.html#ads1115-component) you want to use this sensor."}, "multiplexer": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The multiplexer channel of this sensor. Effectively means between which pins you want to measure voltage."}, "gain": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The gain of this sensor."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `ads1115` domain creates a global hub so that you can later create individual sensors using the [ADS1115 Sensor Platform](https://esphome.io/components/sensor/ads1115.html#id1). To use this hub, first setup the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) and connect the sensor to the pins specified there."}, {"if": {"properties": {"platform": {"const": "aht10"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `aht10` Temperature+Humidity sensor allows you to use your aht10 ([datasheet](http://www.aosong.com/userfiles/files/media/aht10%E8%A7%84%E6%A0%BC%E4%B9%A6v1_1%EF%BC%8820191015%EF%BC%89.pdf)) i2c-based sensor with ESPHome."}, {"if": {"properties": {"platform": {"const": "am2320"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `am2320` Temperature+Humidity sensor allows you to use your AM2320 ([datasheet](https://akizukidenshi.com/download/ds/aosong/AM2320.pdf)) I\u00b2C-based sensor with ESPHome."}, {"if": {"properties": {"platform": {"const": "apds9960"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of sensor measurement. One of\n  * **CLEAR**\n  \n  * **RED**\n  \n  * **GREEN**\n  \n  * **BLUE**\n  \n  * **PROXIMITY**"}, "apds9960_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "markdownDescription": "The `apds9960` sensor platform allows you to use your APDS9960 RGB and gesture sensors ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Proximity/apds9960.pdf), [SparkFun](https://www.sparkfun.com/products/12787)) with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "as3935"}}}, "then": {"allOf": [{"properties": {"as3935_id": {"type": ["null", "object", "string", "array", "number"]}, "distance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Distance in km to the front of the storm and not the distance to a lightning strike.\n  * **name** (**Required**, string): The name for the distance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "lightning_energy": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Lightning energy value. According to the datasheet this is only a pure value that doesn\u2019t have any physical meaning.\n  * **name** (**Required**, string): The name for the lightning energy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The **AS3935** sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close."}, {"if": {"properties": {"platform": {"const": "atc_mithermometer"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "atm90e32"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "phase_a": {"$ref": "#/definitions/sensor-atm90e32-phase_a", "markdownDescription": "The configuration options for the 1st phase.\n  * **voltage** (*Optional*): Use the voltage value of this phase in V (RMS). All options from [Sensor](index.html#config-sensor).\n  \n  * **current** (*Optional*): Use the current value of this phase in amperes. All options from [Sensor](index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this phase in watts. All options from [Sensor](index.html#config-sensor).\n  \n  * **reactive_power** (*Optional*): Use the reactive power value on this phase. All options from [Sensor](index.html#config-sensor).\n  \n  * **power_factor** (*Optional*): Use the power factor value on this phase. All options from [Sensor](index.html#config-sensor).\n  \n  * **gain_voltage** (*Optional*, int): Voltage gain to scale the low voltage AC power pack to household mains feed. Defaults to `7305`.\n  \n  * **gain_ct** (*Optional*, int): CT clamp calibration for this phase. Defaults to `27961`."}, "phase_b": {"$ref": "#/definitions/sensor-atm90e32-phase_a", "markdownDescription": "The configuration options for the 2nd phase. Same options as 1st phase."}, "phase_c": {"$ref": "#/definitions/sensor-atm90e32-phase_a", "markdownDescription": "The configuration options for the 3rd phase. Same options as 1st phase."}, "frequency": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the frequenycy value calculated by the meter. All options from [Sensor](index.html#config-sensor)."}, "chip_temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the chip temperature value. All options from [Sensor](index.html#config-sensor)."}, "line_frequency": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The AC line frequency of the supply voltage. One of `50Hz`, `60Hz`."}, "current_phases": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The number of phases the meter has, `2` or, `3` The 6 Channel Expandable Energy Meter should be set to `3`, and the Split Single Phase meter should be set to `2`. Defaults to `3`."}, "gain_pga": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The gain for the CT clamp, `2X` for 100A, `4X` for 100A - 200A. One of `1X`, `2X`, `4X`. Defaults to `2X` which is suitable for the popular SCT-013-000 clamp."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `atm90e32` sensor platform allows you to use your ATM90E32 voltage/current and power sensors ([datasheet](http://ww1.microchip.com/downloads/en/devicedoc/Atmel-46003-SE-M90E32AS-Datasheet.pdf)) sensors with ESPHome. This sensor is commonly found in CircuitSetup 2 and 6 channel energy meters."}, {"if": {"properties": {"platform": {"const": "bh1750"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "resolution": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The resolution of the sensor in lx. One of `4.0`, `1.0`, `0.5`. Defaults to `0.5` (the maximum resolution)."}, "measurement_time": {"type": "number", "markdownDescription": "int: Manually specifiy the measurement time between `31` and `254`. Defaults to `69`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `bh1750` sensor platform allows you to use your BH1750 ([datasheet](http://www.mouser.com/ds/2/348/bh1750fvi-e-186247.pdf)) ambient light sensor with ESPHome. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "binary_sensor_map"}}}, "then": {"allOf": [{"type": "object", "properties": {"type": {"type": "string"}}}, {"if": {"properties": {"type": {"const": "group"}}}, "then": {"$ref": "#/definitions/sensor-binary_sensor_map-group"}}]}}, {"if": {"properties": {"platform": {"const": "ble_rssi"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address to track for this sensor. Either this or \u2018\u2019service_uuid\u2019\u2019 has to be present."}, "service_uuid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "16 bit, 32 bit, or 128 bit BLE Service UUID: The BLE Service UUID which can be tracked if the device randomizes the MAC address. Either this or \u2018\u2019mac_address\u2019\u2019 has to be present."}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `ble_rssi` sensor platform lets you track the RSSI value or signal strength of a BLE device. See [the binary sensor setup](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-ble-tracker-setting-up-devices) for instructions for setting up this platform."}, {"if": {"properties": {"platform": {"const": "bme280"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor-bme280-temperature", "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor-bme280-pressure", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor-bme280-humidity", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "iir_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `bme280` sensor platform allows you to use your BME280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BME280_DS001-10.pdf), [Adafruit](https://www.adafruit.com/product/2652)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "bme680"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor-bme680-temperature", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor-bme680-pressure", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor-bme680-humidity", "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "gas_resistance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the gas sensor.\n  * **name** (**Required**, string): The name for the gas resistance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "iir_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `1x`, `3x`, `7x`, `15x`, `31x`, `63x` and `127x`. Defaults to `OFF`."}, "heater": {"properties": {"temperature": {"type": "number"}, "duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}}, "type": ["object", "null"], "markdownDescription": "The settings for the internal heater for the gas sensor. Set this to disable the internal heater.\n  * **temperature** (*Optional*, int): The target temperature of the heater between 200 and 400 \u00b0C. Defaults to `320`.\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration the heater should be active. Maximum value is `4032ms`. Defaults to `150ms`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `bme680` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "bmp085"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The BMP085 sensor platform allows you to use your BMP085 ([datasheet](https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf), [Adafruit](https://www.adafruit.com/product/391)) and BMP180 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf), [Adafruit](https://www.adafruit.com/product/1603)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "bmp280"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor-bmp280-temperature", "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor-bmp280-pressure", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "iir_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `bmp280` sensor platform allows you to use your BMP280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001-11.pdf), [Adafruit](https://www.adafruit.com/product/2651)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "ccs811"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "eco2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The eCO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "tvoc": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the total volatile organic compound sensor in parts per billion (ppb).\n  * **name** (**Required**, string): The name for the tvoc sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "baseline": {"type": "string", "markdownDescription": "int: The baseline value for the unit, for calibration purposes. See [Calibrating Baseline](https://esphome.io/components/sensor/ccs811.html#ccs811-calibrating) for more info."}, "temperature": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations."}, "humidity": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ccs811` sensor platform allows you to use CCS811 CO_2 and volatile organic compound sensors ([Adafruit](https://www.adafruit.com/product/3566)) with ESPHome."}, {"if": {"properties": {"platform": {"const": "cse7766"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `cse7766` sensor platform allows you to use your CSE7766 voltage/current and power sensors ([datasheet](http://dl.itead.cc/S31/CSE7766.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POW R2."}, {"if": {"properties": {"platform": {"const": "ct_clamp"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The source sensor to measure voltage values from."}, "sample_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time duration to sample the current clamp with. Higher values can increase accuracy. Defaults to `200ms` which would be 10 whole cycles on a 50Hz system."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The Current Transformer Clamp (`ct_clamp`) sensor allows you to hook up a CT Clamp to an analog voltage sensor (like the [ADC sensor](adc.html)) and convert the readings to measured single phase AC current."}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the sensor(s)."}, "sensors": {"anyOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"type": "array", "items": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}}], "markdownDescription": "list: A list of sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, "markdownDescription": "While I do try to keep the ESPHome configuration options as stable as possible and back-port them, the ESPHome API is less stable. If something in the APIs needs to be changed in order for something else to work, I will do so."}, {"if": {"properties": {"platform": {"const": "dallas"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dallas_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the [dallas hub](https://esphome.io/components/sensor/dallas.html#dallas-component). Use this if you have multiple dallas hubs."}, "address": {"type": "string", "markdownDescription": "int: The address of the sensor. Use either this option or index."}, "index": {"type": "number", "markdownDescription": "int: The index of the sensor starting with 0. So the first sensor will for example have index 0. [It\u2019s recommended to use address instead](https://esphome.io/components/sensor/dallas.html#dallas-getting-ids)."}, "resolution": {"type": "number", "markdownDescription": "int: An optional resolution from 8 to 12. Higher means more accurate. Defaults to the maximum for most Dallas temperature sensors: 12."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `dallas` component allows you to use your [DS18b20](https://www.adafruit.com/product/374) ([datasheet](https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)) and similar 1-Wire temperature sensors."}, {"if": {"properties": {"platform": {"const": "dht"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin where the DHT bus is connected."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "model": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: Manually specify the DHT model, can be one of `AUTO_DETECT`, `DHT11`, `DHT22`, `DHT22_TYPE2`, `AM2302`, `RHT03`, `SI7021` and helps with some connection issues. Defaults to `AUTO_DETECT`.  Auto detection doesn\u2019t work for the SI7021 chip."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The DHT Temperature+Humidity sensor allows you to use your DHT11 ([datasheet](https://akizukidenshi.com/download/ds/aosong/DHT11.pdf), [Adafruit](https://www.adafruit.com/product/386)), DHT22 ([datasheet](https://www.sparkfun.com/datasheets/Sensors/Temperature/DHT22.pdf), [Adafruit](https://www.adafruit.com/product/385)), AM2302 ([datasheet](https://cdn-shop.adafruit.com/datasheets/Digital+humidity+and+temperature+sensor+AM2302.pdf), [Adafruit](https://www.adafruit.com/product/393)), RHT03 ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf), [SparkFun](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf)) and SI7021 (one wire Sonoff version) ([datasheet](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf), [SparkFun](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf)) sensors with ESPHome."}, {"if": {"properties": {"platform": {"const": "dht12"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `dht12` Temperature+Humidity sensor allows you to use your DHT12 ([datasheet](http://www.robototehnika.ru/file/DHT12.pdf), [electrodragon](http://www.electrodragon.com/product/dht12/)) I\u00b2C-based sensor with ESPHome. This sensor is also called AM2320 by some sellers."}, {"if": {"properties": {"platform": {"const": "duty_cycle"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Set the ID of this sensor for use in lambdas."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to observe for the duty cycle."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The duty cycle sensor allows you to measure for what percentage of time a signal on a GPIO pin is HIGH or LOW."}, {"if": {"properties": {"platform": {"const": "esp32_hall"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `esp32_hall` sensor platform allows you to use the integrated [hall effect sensor](https://en.wikipedia.org/wiki/Hall_effect_sensor) of the ESP32 chip to measure the magnitude and direction of magnetic field around the chip (with quite poor accuracy)."}, {"if": {"properties": {"platform": {"const": "ezo"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ezo` sensor platform allows you to use your EZO sensor circuits with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "hdc1080"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The HDC1080 Temperature+Humidity sensor allows you to use your HDC1080 ([datasheet](http://www.ti.com/lit/ds/symlink/hdc1080.pdf), [Adafruit](https://www.adafruit.com/product/2635)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "hlw8012"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "sel_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin SEL is connected to."}, "cf_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin CF is connected to."}, "cf1_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin CF1 is connected to."}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "energy": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the total energy value of the sensor in Wh. All options from [Sensor](index.html#config-sensor)."}, "current_resistor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The value of the shunt resistor for current measurement. Defaults to the Sonoff POW\u2019s value `0.001 ohm`."}, "voltage_divider": {"type": "number", "markdownDescription": "float: The value of the voltage divider on the board as `(R_upstream + R_downstream) / R_downstream`. Defaults to the Sonoff POW\u2019s value `2351`."}, "change_mode_every": {"type": "number", "markdownDescription": "int: After how many updates to cycle between the current/voltage measurement mode. Note that the first value after switching is discarded because it is often inaccurate. Defaults to `8`."}, "initial_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The initial measurement mode. Defaults to `VOLTAGE`. Possible initial measurement modes are `VOLTAGE` or `CURRENT`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `hlw8012` sensor platform allows you to use your HLW8012 voltage/current and power sensors ([datasheet](https://github.com/xoseperez/hlw8012/blob/master/docs/HLW8012.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POWs."}, {"if": {"properties": {"platform": {"const": "hm3301"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "pm_1_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_2_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_10_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "aqi": {"$ref": "#/definitions/sensor-hm3301-aqi", "markdownDescription": "AQI sensor. Requires the `pm_2_5` and `pm_10_0` sensors defined. See below.\n  * **calculation_type** (**Required**): One of: `AQI` or `CAQI`.\n  \n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `HM3301` sensor platform allows you to use your HM3301 particulate matter sensor ([more info](http://wiki.seeedstudio.com/Grove-Laser_PM2.5_Sensor-HM3301)) sensors with ESPHome."}, {"if": {"properties": {"platform": {"const": "hmc5883l"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "address": {"type": "string", "markdownDescription": "int: Manually specify the I\u00b2C address of the sensor. Defaults to `0x1E`."}, "oversampling": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Number of readings to average over for each sample. One of `1x`, `2x`, `4x`, `8x`. Defaults to `1x`."}, "range": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Select a range / gain preset. This does not affect the scale of the values published but allows one to avoid overflows at the cost of reading resolution. Supported values are 88\u00b5T, 130\u00b5T, 190\u00b5T, 250\u00b5T, 400\u00b5T, 470\u00b5T, 560\u00b5T, 810\u00b5T. Default range is \u00b1130\u00b5T."}, "field_strength_x": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](index.html#config-sensor)."}, "field_strength_y": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](index.html#config-sensor)."}, "field_strength_z": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](index.html#config-sensor)."}, "heading": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `hmc5883l` allows you to use your HMC5883L triple-axis magnetometers ([datasheet](https://cdn-shop.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf), [Adafruit](https://www.adafruit.com/product/1746)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "homeassistant"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "entity_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The entity ID to import from Home Assistant."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `homeassistant` sensor platform allows you to create sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html)."}, {"if": {"properties": {"platform": {"const": "htu21d"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The HTU21D Temperature+Humidity sensor allows you to use your HTU21D ([Adafruit](https://www.adafruit.com/product/1899)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "hx711"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "dout_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The DOUT (or DAT) pin."}, "clk_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The CLK pin."}, "gain": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `hx711` sensor platform allows you to use your HX711 load cell amplifier ([datasheet](https://www.mouser.com/ds/2/813/hx711_english-1022875.pdf), [SparkFun](https://www.sparkfun.com/products/13879)) with ESPHome"}, {"if": {"properties": {"platform": {"const": "ina219"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "bus_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](index.html#config-sensor)."}, "shunt_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "shunt_resistance": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`."}, "max_voltage": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The maximum bus voltage you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `32V` (the max)."}, "max_current": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ina219` sensor platform allows you to use your INA219 High Side DC Current Sensor ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-ina219-current-sensor-breakout.pdf), [Adafruit](https://www.adafruit.com/product/904)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "ina226"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "bus_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](index.html#config-sensor)."}, "shunt_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "shunt_resistance": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`."}, "max_current": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ina226` sensor platform allows you to use your INA226 DC Current and Power Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina226.pdf), [eBay](https://www.ebay.com/sch/i.html?_nkw=INA226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "ina3221"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "channel_1": {"$ref": "#/definitions/sensor-ina3221-channel_1", "markdownDescription": "The configuration options for the 1st channel.\n  * **shunt_resistance** (*Optional*, float): The value of the shunt resistor on this channel for current calculation. Defaults to `0.1 ohm`.\n  \n  * **current** (*Optional*): Use the current value on this channel in amperes. All options from [Sensor](index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this channel in watts. All options from [Sensor](index.html#config-sensor).\n  \n  * **bus_voltage** (*Optional*): Use the bus voltage (voltage of the high side contact) value on this channel in V. All options from [Sensor](index.html#config-sensor).\n  \n  * **shunt_voltage** (*Optional*): Use the shunt voltage (voltage across the shunt resistor) value on this channel in V. All options from [Sensor](index.html#config-sensor)."}, "channel_2": {"$ref": "#/definitions/sensor-ina3221-channel_1", "markdownDescription": "The configuration options for the 2nd channel. Same options as 1st channel."}, "channel_3": {"$ref": "#/definitions/sensor-ina3221-channel_1", "markdownDescription": "The configuration options for the 3rd channel. Same options as 1st channel."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ina3221` sensor platform allows you to use your INA3221 3-Channel DC Current Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina3221.pdf), [switchdoc](http://www.switchdoc.com/ina3221-breakout-board/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "inkbird_ibsth1_mini"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address of the Inkbird IBS-TH1 Mini device."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the battery level sensor\n  * **name** (**Required**, string): The name for the battery level sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `inkbird_ibsth1_mini` sensor platform lets you track the output of Inkbird IBS-TH1 Mini Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity and the battery level of the IBS-TH1 Mini device every time the sensor sends out a BLE broadcast. Note that contrary to other implementations, ESPHome can track as many IBS-TH1 Mini devices at once as you want."}, {"if": {"properties": {"platform": {"const": "integration"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the sensor to integrate over time."}, "time_unit": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The time unit to integrate with, one of `ms`, `s`, `min`, `h` or `d`."}, "integration_method": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The integration method to use. One of `trapezoid`, `left` or `right`. Defaults to `trapezoid`."}, "restore": {"type": "boolean", "markdownDescription": "boolean: Whether to store the intermediate result on the device so that the value can be restored upon power cycle or reboot. Warning: this option can wear out your flash. Defaults to `false`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `integration` sensor is a helper sensor that can integrate values from other sensors over time. This can for example be useful to integrate the values of a water flow sensor (in m^3/s) over time (result is in m^3)."}, {"if": {"properties": {"platform": {"const": "max31855"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "reference_temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "[Sensor](index.html#config-sensor): Access the internal temperature sensor of the MAX31855. Requires a **name** and/or **id**."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `max31855` temperature sensor allows you to use your MAX31855 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31855.pdf)) with ESPHome"}, {"if": {"properties": {"platform": {"const": "max31856"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mains_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `MAX31856` temperature sensor allows you to use your MAX31856 Thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31856.pdf)) with ESPHome"}, {"if": {"properties": {"platform": {"const": "max31865"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "reference_resistance": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Reference resistor on the PCB. Adafruit\u2019s PT100 (#3328) uses 430 \u03a9, their PT1000 (#3648) uses 4300 \u03a9."}, "rtd_nominal_resistance": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Nominal resistance of the RTD at 0\u00b0C. PT100 is 100 \u03a9, PT1000 is 1000 \u03a9."}, "mains_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`."}, "rtd_wires": {"type": "number", "markdownDescription": "int: The number of RTD wires. Be sure to solder board jumpers to match! Defaults to `4`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `max31865` temperature sensor allows you to use your max31865 RTD temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf)) with ESPHome"}, {"if": {"properties": {"platform": {"const": "max6675"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}]}, "markdownDescription": "The `max6675` temperature sensor allows you to use your MAX6675 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf), [SainSmart](https://www.sainsmart.com/products/max6675-module-k-type-thermocouple-thermocouple-sensor-temperature-0-1024-for-arduino)) with ESPHome"}, {"if": {"properties": {"platform": {"const": "mcp3008"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The id of the parent MCP3008 component."}, "mcp3008_id": {"type": ["null", "object", "string", "array", "number"]}, "number": {"type": "number", "markdownDescription": "int: The pin number of the MCP3008"}, "reference_voltage": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The reference voltage. Defaults to `3.3V`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The Microchip Technology Inc. MCP3008 devices are successive approximation 10-bit Analogto-Digital (A/D) converters with on-board sample and hold circuitry."}, {"if": {"properties": {"platform": {"const": "mcp9808"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The MCP9808 Temperature sensor allows you to use your MCP9808 ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf), [Adafruit](https://www.adafruit.com/product/1782)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "mhz19"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for actions."}, "co2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor. Please note that this is not officially documented in the datasheet and seems to be quite inaccurate.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "automatic_baseline_calibration": {"type": "boolean", "markdownDescription": "boolean: MH-Z19 has automatic calibration procedure. The automatic calibration cycle is every 24 hours after powered on. Set this value to `false` to disable ABC on boot (it\u2019s better if you use sensor indoor). Set this value to `true` to enable ABC on boot. Doesn\u2019t send calibration command if not set (default sensor logic will be used)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `mhz19` sensor platform allows you to use MH-Z19 CO_2 and temperature sensors ([refspace](https://revspace.nl/MHZ19)) with ESPHome."}, {"if": {"properties": {"platform": {"const": "mpu6050"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "accel_x": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the X-Axis of the Accelerometer. All options from [Sensor](index.html#config-sensor)."}, "accel_y": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the Y-Axis of the Accelerometer. All options from [Sensor](index.html#config-sensor)."}, "accel_z": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the Z-Axis of the Accelerometer. All options from [Sensor](index.html#config-sensor)."}, "gyro_x": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the X-Axis of the Gyroscope. All options from [Sensor](index.html#config-sensor)."}, "gyro_y": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the Y-Axis of the Gyroscope. All options from [Sensor](index.html#config-sensor)."}, "gyro_z": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the Z-Axis of the Gyroscope. All options from [Sensor](index.html#config-sensor)."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the internal temperature of the sensor. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `mpu6050` sensor platform allows you to use your MPU6050 Accelerometer/Gyroscope ([datasheet](https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf), [SparkFun](https://www.sparkfun.com/products/11028)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "mqtt_subscribe"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mqtt_parent_id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": "string", "markdownDescription": "string: The MQTT topic to listen for numeric messages."}, "qos": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The MQTT QoS to subscribe with. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `mqtt_subscribe` sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and parse each message into a floating point number."}, {"if": {"properties": {"platform": {"const": "ms5611"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `ms5611` sensor platform allows you to use your MS5611 atmospheric pressure sensors ([hobbytronics](http://www.hobbytronics.co.uk/ms5611-altitude-sensor)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "ntc"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Set the ID of this sensor for use in lambdas."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor to read the resistance values from to convert to temperature readings."}, "calibration": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The calibration parameters of the sensor - see above for more details."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `ntc` platform is a helper sensor that allows you to convert resistance readings from a NTC thermistor to temperature readings."}, {"if": {"properties": {"platform": {"const": "pid"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "climate_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the pid climate to get the values from."}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The value to monitor. One of\n  * `RESULT` - The resulting value (sum of P, I, and D terms).\n  \n  * `ERROR` - The calculated error (setpoint - process_variable)\n  \n  * `PROPORTIONAL` - The proportional term of the PID controller.\n  \n  * `INTEGRAL` - The integral term of the PID controller.\n  \n  * `DERIVATIVE` - The derivative term of the PID controller.\n  \n  * `HEAT` - The resulting heating power to the supplied to the `heat_output`.\n  \n  * `COOL` - The resulting cooling power to the supplied to the `cool_output`.\n  \n  * `KP` - The current factor for the proportional term of the PID controller.\n  \n  * `KI` - The current factor for the integral term of the PID controller.\n  \n  * `KD` - The current factor for the differential term of the PID controller."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "pmsx003"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "type": {"type": ["null", "object", "string", "array", "number"]}, "pm_1_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](index.html#config-sensor)."}, "pm_2_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](index.html#config-sensor)."}, "pm_10_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](index.html#config-sensor)."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the temperature value in \u00b0C for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the humidity value in % for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](index.html#config-sensor)."}, "formaldehyde": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the formaldehyde (HCHO) concentration in \u00b5g per cubic meter for the `PMS5003ST`. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `pmsx003` sensor platform allows you to use your PMS5003, PMS7003, \u2026 particulate matter ([datasheet](http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms5003-manual_v2-3.pdf)) sensors with ESPHome."}, {"if": {"properties": {"platform": {"const": "pulse_counter"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin to count pulses on."}, "count_mode": {"properties": {"rising_edge": {"type": ["null", "object", "string", "array", "number"]}, "falling_edge": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Configure how the counter should behave on a detected rising edge/falling edge.\n  * **rising_edge** (*Optional*): What to do when a rising edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `INCREMENT`.\n  \n  * **falling_edge** (*Optional*): What to do when a falling edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `DISABLE`."}, "internal_filter": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): If a pulse shorter than this time is detected, it\u2019s discarded and no pulse is counted. Defaults to `13us`. On the ESP32, this value can not be higher than `13us`, for the ESP8266 you can use larger intervals too. If you enable this, set up the `count_mode` to increase on the falling edge, not leading edge. For S0 pulse meters that are used to meter power consumption 50-100 ms is a reasonable value."}, "total": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Report the total number of pulses All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The pulse counter sensor allows you to count the number of pulses and the frequency of a signal on any pin."}, {"if": {"properties": {"platform": {"const": "pulse_width"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Set the ID of this sensor for use in lambdas."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin to observe for the pulse width."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `pulse_width` sensor allows you to measure how long a given digital signal is HIGH. For example this can be used to measure PWM signals to transmit some value over a simple protocol."}, {"if": {"properties": {"platform": {"const": "pzem004t"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "energy": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:"}, {"if": {"properties": {"platform": {"const": "pzemac"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "energy": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the (active) energy value of the sensor in watt*hours. All options from [Sensor](index.html#config-sensor)."}, "frequency": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](index.html#config-sensor)."}, "power_factor": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power factor value of the sensor. All options from [Sensor](index.html#config-sensor)."}, "modbus_id": {"type": ["null", "object", "string", "array", "number"]}, "address": {"type": "string", "markdownDescription": "int: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:"}, {"if": {"properties": {"platform": {"const": "pzemdc"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](index.html#config-sensor)."}, "current": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](index.html#config-sensor)."}, "power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](index.html#config-sensor)."}, "modbus_id": {"type": ["null", "object", "string", "array", "number"]}, "address": {"type": "string", "markdownDescription": "int: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:"}, {"if": {"properties": {"platform": {"const": "qmc5883l"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "address": {"type": "string", "markdownDescription": "int: Manually specify the  I\u00b2c address of the sensor. Defaults to `0x1E`."}, "range": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The range parameter for the sensor."}, "oversampling": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The oversampling parameter for the sensor."}, "field_strength_x": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](index.html#config-sensor)."}, "field_strength_y": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](index.html#config-sensor)."}, "field_strength_z": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](index.html#config-sensor)."}, "heading": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `qmc5883l` allows you to use your QMC5883L triple-axis magnetometers ([datasheet](http://wiki.sunfounder.cc/images/7/72/QMC5883L-Datasheet-1.0.pdf)) with ESPHome. This sensor is very simular to the [HMC5883L](hmc5883l.html#hmc5883l) sensor and is oftern found as a knock off replacement. The QMC5883L sensor preforms on par to the HMC5883L sensor, though the congiuration differs. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "resistance"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Set the ID of this sensor for use in lambdas."}, "sensor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The sensor to read the voltage values from to convert to resistance readings."}, "configuration": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of circuit, one of `DOWNSTREAM` or `UPSTREAM`."}, "resistor": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The value of the resistor with a constant value."}, "reference_voltage": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The reference voltage. Defaults to `3.3V`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `resistance` platform is a helper sensor that allows you to convert readings from a voltage sensor (such as the [ADC Sensor](adc.html)) into resistance readings in \u2126 (ohm)."}, {"if": {"properties": {"platform": {"const": "rotary_encoder"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin_a": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The first pin for determining the step value. Must not be a pin from an external I/O expander."}, "pin_b": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The second pin for determining the step value. Must not be a pin from an external I/O expander."}, "pin_reset": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): An optional pin that resets the step value. This is useful with rotary encoders that have have a third pin. Defaults to no reset pin."}, "resolution": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The resolution of the sensor, this controls how many pulses are generated by one step:\n  * 1 (default)\n  \n  * 2\n  \n  * 4"}, "min_value": {"type": "number", "markdownDescription": "int: The minimum value this rotary encoder will go to, turning the knob further will not decrease the number. Defaults to no minimum."}, "max_value": {"type": "number", "markdownDescription": "int: The maximum value this rotary encoder will go to, turning the knob further will not increase the number. Defaults to no maximum."}, "on_clockwise": {"$ref": "#/definitions/sensor-rotary_encoder-on_clockwise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): Actions to be performed when the knob is turned clockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers)."}, "on_anticlockwise": {"$ref": "#/definitions/sensor-rotary_encoder-on_anticlockwise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): Actions to be performed when the knob is turned anticlockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `rotary_encoder` sensor platform allows you to use any continuous-rotation rotary encoders with ESPHome. These devices usually have two pins with which they encode the rotation. Every time the knob of the rotary encoder is turned, the signals of the two pins go HIGH and LOW in turn. See [this Arduino article](https://playground.arduino.cc/Main/RotaryEncoders) to gain a better understanding of these sensors."}, {"if": {"properties": {"platform": {"const": "ruuvitag"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "MAC Address: The MAC address of the RuuviTag device."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pressure": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "acceleration": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the acceleration sensor.\n  * **name** (**Required**, string): The name for the acceleration sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "acceleration_x": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the acceleration x sensor.\n  * **name** (**Required**, string): The name for the acceleration x sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "acceleration_y": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the acceleration y sensor.\n  * **name** (**Required**, string): The name for the acceleration y sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "acceleration_z": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the acceleration z sensor.\n  * **name** (**Required**, string): The name for the acceleration z sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "battery_voltage": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the battery voltage sensor.\n  * **name** (**Required**, string): The name for the battery voltage sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "tx_power": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the transmit power sensor\n  * **name** (**Required**, string): The name for the transmit power sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used."}, "movement_counter": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the movement count sensor\n  * **name** (**Required**, string): The name for the movement count sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used."}, "measurement_sequence_number": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the measurment sequence number sensor\n  * **name** (**Required**, string): The name for the measurment sequence number sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used."}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `ruuvitag` sensor platform lets you track the output of RuuviTag Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity, acceleration and battery voltage of a RuuviTag device with RAWv1 protocol every time the sensor sends out a BLE broadcast. RAWv2 protocol is supported too. Then tx power, movement count and measurement sequence number are also tracked."}, {"if": {"properties": {"platform": {"const": "scd30"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "co2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the CO\u2082 sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the Temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the Humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "automatic_self_calibration": {"type": "boolean", "markdownDescription": "bool: Whether to enable automatic self calibration (ASC). Defaults to `true`."}, "altitude_compensation": {"type": "number", "markdownDescription": "int: Enable compensating deviations due to current altitude (in metres). Notice: setting *altitude_compensation* is ignored if *ambient_pressure_compensation* is set."}, "ambient_pressure_compensation": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: Enable compensation of measured CO\u2082 values based on given ambient pressure in mBar."}, "temperature_offset": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: Temperature and humidity offsets may occur when operating the sensor in end-customer devices. This variable allows the compensation of those effects by setting a temperature offset."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `scd30` sensor platform  allows you to use your Sensiron SCD30 CO\u2082 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "sds011"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "pm_2_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](index.html#config-sensor)."}, "pm_10_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](index.html#config-sensor)."}, "rx_only": {"type": "boolean", "markdownDescription": "boolean: Whether the sensor is connected **only by RX pin** to the UART bus. Since the SDS011 can not be configured in RX-only mode, `update_interval` has no effect and the sensor must be configured separately. Defaults to `false`."}, "update_interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The interval to check the sensor in minutes. This affects the working period of the SDS011 sensor. Defaults to `0min`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `sds011` sensor platform allows you to use SDS011 particulate matter sensors ([datasheet](https://nettigo.pl/attachments/398)) with ESPHome."}, {"if": {"properties": {"platform": {"const": "senseair"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for actions."}, "co2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `senseair` sensor platform allows you to use SenseAir CO_2 sensor ([website](https://senseair.com/products/size-counts/senseair-s8-residential/)) with ESPHome."}, {"if": {"properties": {"platform": {"const": "sgp30"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "eco2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the CO\u2082eq. sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "tvoc": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the total Volatile Organic Compounds sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "baseline": {"$ref": "#/definitions/sensor-sgp30-baseline", "markdownDescription": "The block containing baselines for calibration purposes. See [Calibrating Baseline](https://esphome.io/components/sensor/sgp30.html#sgp30-calibrating) for more info.\n  * **eco2_baseline** (**Required**, int): The eCO2 baseline for calibration purposes.\n  \n  * **tvoc_baseline** (**Required**, int): The TVOC baseline for calibration purposes."}, "compensation": {"$ref": "#/definitions/sensor-sgp30-compensation", "markdownDescription": "The block containing sensors used for compensation.\n  * **temperature_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations.\n  \n  * **humidity_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `sgp30` sensor platform  allows you to use your Sensiron SGP30 multi-pixel gas ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9_Gas_Sensors/Datasheets/Sensirion_Gas_Sensors_SGP30_Datasheet.pdf)) sensors or the SVM30 breakout-boards  ([product page](https://www.sensirion.com/en/environmental-sensors/gas-sensors/multi-gas-humidity-temperature-module-svm30/)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "sht3xd"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `sht3xd` sensor platform Temperature+Humidity sensor allows you to use your Sensiron SHT31-D ([datasheet](https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf), [Adafruit](https://www.adafruit.com/product/2857) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "shtcx"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `shtcx` sensor platform Temperature+Humidity sensor allows you to use your Sensiron SHTC1 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC1_Datasheet.pdf), [Sensirion STHC1](https://www.sensirion.com/en/environmental-sensors/humidity-sensors/digital-humidity-sensor-for-consumer-electronics-and-iot/)) and the newer SHTC3 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC3_Datasheet.pdf), [SparkFun](https://www.sparkfun.com/products/15074) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "sps30"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "pm_1_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 1\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_2_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_4_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 4\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_10_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 10\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pmc_0_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Number Concentration** sensor for ultrafine particles up to 0.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pmc_1_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 1\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pmc_2_5": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pmc_4_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 4\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pmc_10_0": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 10\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pm_size": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `sps30` sensor platform allows you to use your Sensiron SPS30 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/0_Datasheets/Particulate_Matter/Sensirion_PM_Sensors_SPS30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. However, at the moment only I\u00b2C communication is implemented."}, {"if": {"properties": {"platform": {"const": "sts3x"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `sts3x` sensor platform Temperature sensor allows you to use your Sensiron STS30-DIS, STS31-DIS or STS35-DIS ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/3_Temperature_Sensors/Sensirion_Temperature_Sensors_Table_Overview.pdf), [Sensirion STS3x](https://www.sensirion.com/sts3x/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "sun"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "sun_id": {"type": ["null", "object", "string", "array", "number"]}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of value to track. One of `elevation` and `azimuth`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}}, {"if": {"properties": {"platform": {"const": "tcs34725"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "red_channel": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the percentage of how strongly the red color channel is activated. All options from [Sensor](index.html#config-sensor)."}, "green_channel": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the percentage of how strongly the green color channel is activated. All options from [Sensor](index.html#config-sensor)."}, "blue_channel": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the percentage of how strongly the blue color channel is activated. All options from [Sensor](index.html#config-sensor)."}, "clear_channel": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the percentage of how strongly the clear (without a color filter) channel is activated. All options from [Sensor](index.html#config-sensor)."}, "illuminance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the total illuminance of the sensor in lx. All options from [Sensor](index.html#config-sensor)."}, "color_temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "Get the calculated color temperature of the light in Kelvin. All options from [Sensor](index.html#config-sensor)."}, "integration_time": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The amount of time the light sensor is exposed. Valid values are `2.4ms` (default), `24ms`, `50ms`, `101ms`, `154ms`, `700ms`."}, "gain": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Set the gain for the internal ADCs to work better in certain low-light conditions. Valid values are `1x` (default), `4x`, `16x`, `60x` (highest gain)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `tcs34725` sensor platform allows you to use your TCS34725 RGB color sensors ([datasheet](https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf), [Adafruit](https://www.adafruit.com/product/1334)), color temperature and illuminance sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "teleinfo"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "historical_mode": {"type": "boolean", "markdownDescription": "Wether to use historical mode or standard mode. With historical mode, baudrate of 1200 must be used whereas 9600 must be used in standard mode. Defaults to `False`."}, "tags": {"anyOf": [{"$ref": "#/definitions/sensor-teleinfo-tags"}, {"type": "array", "items": {"$ref": "#/definitions/sensor-teleinfo-tags"}}], "markdownDescription": "Specify the tag you want to retrieve from the Teleinformation and select with what name to transmit it.\n  * **name** (**Required**, string): The name of the tag corresponding to what the electrical counter send.\n  \n  * **sensor** (**Required**, [Sensor](index.html#config-sensor)): Associate a sensor with the tag. See options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/uart_bus"}]}, "markdownDescription": "The `teleinfo` component allows you to retrieve data from a French electrical counter using Teleinformation ([datasheet](https://www.enedis.fr/sites/default/files/Enedis-NOI-CPT_54E.pdf)). It works with Linky electrical counter but also legacy EDF electrical counter."}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated every update interval to get the new value of the sensor"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `template` sensor platform allows you to create a sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda)."}, {"if": {"properties": {"platform": {"const": "tmp102"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The TMP102 Temperature sensor allows you to use your TMP102 ([Sparkfun](https://www.sparkfun.com/products/13314)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "tmp117"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The TMP117 Temperature+Humidity sensor allows you to use your TMP117 ([datasheet](https://www.ti.com/lit/ds/symlink/tmp117.pdf), [sparkfun](https://www.sparkfun.com/products/15805)) sensors with ESPHome."}, {"if": {"properties": {"platform": {"const": "total_daily_energy"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "time_id": {"type": ["null", "object", "string", "array", "number"]}, "power_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the power sensor to integrate over time."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `total_daily_energy` sensor is a helper sensor that can use the energy value of other sensors like the [HLW8012](hlw8012.html), [CSE7766](cse7766.html), etc and integrate it over time."}, {"if": {"properties": {"platform": {"const": "tsl2561"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "integration_time": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time the sensor will take for each measurement. Longer means more accurate values. One of `14ms`, `101ms`, `402ms`. Defaults to `402ms`."}, "gain": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The gain of the sensor. Higher values are better in low-light conditions. One of `1x` and `16x`. Defaults to `1x`."}, "is_cs_package": {"type": "boolean", "markdownDescription": "boolean: The \u201cCS\u201d package of this sensor has a slightly different formula for calculating the illuminance in lx. Set this to `true` if you\u2019re working with a CS package. Defaults to `false`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `tsl2561` sensor platform allows you to use your TSL2561 ([datasheet](https://cdn-shop.adafruit.com/datasheets/TSL2561.pdf), [Adafruit](https://www.adafruit.com/product/439)) ambient light sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work."}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "sensor_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the sensor."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` sensor platform creates a sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured."}, {"if": {"properties": {"platform": {"const": "tx20"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "wind_speed": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the wind speed sensor.\n  * **name** (**Required**, string): The name for the wind speed sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "wind_direction_degrees": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the direction in degrees sensor.\n  * **name** (**Required**, string): The name for the direction sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin, where the black or brown cable are connected."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tx20` sensor platform allows you to use your TX20/TX23 ([Amazon](https://www.amazon.de/Technoline-Tx-20/dp/B01HXZ3KLA), [lacrosse_tx23](https://www.lacrossetechnology.com/tx23-wind-sensor)) wind direction and speed sensors with ESPHome. The only required pin is the black or brown cable (which is used to transmit data.) The red cable should be connected to VCC (3.3V), green initiates the data transfer when connected to GND and should therefore be directly connected to GND and the yellow cable should be always connected to ground. The difference from the TX20 to the TX23 seems to be that the green cable does not matter any more and the wind sensor is just sending a datagram every 2 seconds - pretty much the same as when the green cable was connected to GND in the TX20."}, {"if": {"properties": {"platform": {"const": "ultrasonic"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "trigger_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The output pin to periodically send the trigger pulse to."}, "echo_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The input pin on which to wait for the echo."}, "timeout": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The number of meters for the timeout. Most sensors can only sense up to 2 meters. Defaults to 2 meters."}, "pulse_time": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The duration for which the trigger pin will be active. Defaults to `10us`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The ultrasonic distance sensor allows you to use simple ultrasonic sensors like the HC-SR04 ([datasheet](https://www.electroschematics.com/wp-content/uploads/2013/07/HC-SR04-datasheet-version-2.pdf), [SparkFun](https://www.sparkfun.com/products/13959)) with ESPHome to measure distances. These sensors usually can\u2019t measure anything more than about two meters and may sometimes make some annoying clicking sounds."}, {"if": {"properties": {"platform": {"const": "uptime"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `uptime` sensor allows you to track the time the ESP has stayed up for in seconds. Time rollovers are automatically handled."}, {"if": {"properties": {"platform": {"const": "vl53l0x"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "signal_rate_limit": {"type": "number", "markdownDescription": "float: Set the return signal rate limit in units of MCPS (mega counts per second). This is the minimum signal amplitude detected by the sensor necessary for it to report a valid reading. Setting a lower value may increase the range of the sensor but also increases the chance of getting inaccurate readings. Defaults to `0.25`."}, "long_range": {"type": "boolean", "markdownDescription": "bool: Set the sensor in long range mode. The signal_rate_limit is overruled to `0.1`. Defaults to false."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "The `vl53l0x` sensor platform allows you to use VL53L0X optical time of flight ([datasheet](https://www.st.com/resource/en/datasheet/vl53l0x.pdf), [ST](https://www.st.com/resource/en/datasheet/vl53l0x.pdf)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back"}, {"if": {"properties": {"platform": {"const": "wifi_signal"}}}, "then": {"allOf": [{"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `wifi_signal` sensor platform allows you to read the signal strength of the currently connected [WiFi Access Point](https://esphome.io/components/wifi.html)."}, {"if": {"properties": {"platform": {"const": "xiaomi_cgd1"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "bindkey": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_cgg1"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_gcls002"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "moisture": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "illuminance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "conductivity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_hhccjcy01"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "moisture": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "illuminance": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "conductivity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_hhccpot002"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "moisture": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "conductivity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_jqjcy01ym"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "formaldehyde": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_lywsd02"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_lywsd03mmc"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "bindkey": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_lywsdcgq"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "xiaomi_mhoc401"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "bindkey": {"type": ["null", "object", "string", "array", "number"]}, "mac_address": {"type": ["null", "object", "string", "array", "number"]}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "battery_level": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA"}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "zyaura"}}}, "then": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "clock_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin where the clock bus is connected."}, "data_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The pin where the data bus is connected."}, "co2": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the CO2 sensor.\n  * **name** (**Required**, string): The name for the CO2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "temperature": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}, "humidity": {"$ref": "#/definitions/sensor.SENSOR_SCHEMA", "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](index.html#config-sensor)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The ZyAura CO2 & Temperature & Humidity sensor allows you to use your [ZGm05(3)(U)](http://www.zyaura.com/products/ZGm05.asp) ([MT8057](https://masterkit.ru/shop/1266110), [MT8057S](https://medgadgets.ru/shop/kit-mt8057.html)), [ZG1683R(U)](http://www.zyaura.com/products/ZG1683R.asp) ([MT8060](https://masterkit.ru/shop/1921398)), [ZG1583RUD](http://www.zyaura.com/products/ZG1583RUD.asp) monitors with ESPHome."}]}, "markdownDescription": "ESPHome has support for many different sensors. Each of them is a platform of the `sensor` domain and each sensor has several base configuration options."}, "stepper": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/stepper.STEPPER_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "a4988"}}}, "then": {"allOf": [{"$ref": "#/definitions/stepper.STEPPER_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Specify the ID of the stepper so that you can control it."}, "step_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The `STEP` pin of the A4988 stepper driver."}, "dir_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The `DIRECTION` pin of the A4988 stepper driver."}, "sleep_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Optionally also use the `SLEEP` pin of the A4988 stepper driver. If specified, the driver will be put into sleep mode as soon as the stepper reaches the target steps."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}, {"if": {"properties": {"platform": {"const": "uln2003"}}}, "then": {"allOf": [{"$ref": "#/definitions/stepper.STEPPER_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Specify the ID of the stepper so that you can control it."}, "pin_a": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin **a** of the stepper control board."}, "pin_b": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin **b** of the stepper control board."}, "pin_c": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin **c** of the stepper control board."}, "pin_d": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin **d** of the stepper control board."}, "sleep_when_done": {"type": "boolean", "markdownDescription": "boolean: Whether to turn off all coils when the stepper has reached the target position"}, "step_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The step mode to operate the motor with. One of:\n  * `FULL_STEP` (Default)\n  \n  * `HALF_STEP`\n  \n  * `WAVE_DRIVE`"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}}]}, "markdownDescription": "The `stepper` component allows you to use stepper motors with ESPHome. Currently only the A4988 stepper driver ([datasheet](https://www.pololu.com/file/0J450/a4988_DMOS_microstepping_driver_with_translator.pdf)) and ULN2003 ([datasheet](http://www.ti.com/lit/ds/symlink/uln2003a.pdf)) are supported."}, "switch": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the switch(es)."}, "switches": {"anyOf": [{"$ref": "#/definitions/switch-custom-switches"}, {"type": "array", "items": {"$ref": "#/definitions/switch-custom-switches"}}], "markdownDescription": "list: A list of switches to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Switch](index.html#config-switch)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom switches in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "gpio"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The GPIO pin to use for the switch."}, "restore_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the pin as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the pin as ON on bootup."}, "interlock": {"anyOf": [{"$ref": "#/definitions/switch-gpio-interlock"}, {"type": "array", "items": {"$ref": "#/definitions/switch-gpio-interlock"}}], "markdownDescription": "list: A list of other GPIO switches in an interlock group. See [Interlocking](https://esphome.io/components/switch/gpio.html#switch-gpio-interlocking)."}, "interlock_wait_time": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): For interlocking mode, set how long to wait after other items in an interlock group have been disabled before re-activating. Useful for motors where immediately turning on in the other direction could cause problems."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `gpio` switch platform allows you to use any pin on your node as a switch. You can for example hook up a relay to a GPIO pin and use it through this platform."}, {"if": {"properties": {"platform": {"const": "output"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "output": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): The ID of the output component to use."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `output` switch platform allows you to use any output component as a switch."}, {"if": {"properties": {"platform": {"const": "remote_transmitter"}}}, "then": {"type": ["null", "object", "string", "array", "number"]}}, {"if": {"properties": {"platform": {"const": "restart"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "icon": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `restart` switch platform allows you to restart your node remotely through Home Assistant."}, {"if": {"properties": {"platform": {"const": "shutdown"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "icon": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `shutdown` switch platform allows you to shutdown your node remotely through Home Assistant. It does this by putting the node into deep sleep mode with no wakeup source selected. After enabling, the only way to startup the ESP again is by pressing the reset button or restarting the power supply."}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated repeatedly to get the current state of the switch."}, "optimistic": {"type": "boolean", "markdownDescription": "boolean: Whether to operate in optimistic mode - when in this mode, any command sent to the template cover will immediately update the reported state. Defaults to `false`."}, "assumed_state": {"type": "boolean", "markdownDescription": "boolean: Whether the true state of the switch is not known. This will make the Home Assistant frontend show buttons for both ON and OFF actions, instead of hiding one of them when the switch is ON/OFF. Defaults to `false`."}, "turn_off_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned off."}, "turn_on_action": {"$ref": "#/definitions/simple_automation", "markdownDescription": "[Action](https://esphome.io/guides/automations.html#config-action): The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned on."}, "restore_state": {"type": "boolean", "markdownDescription": "boolean: Sets whether ESPHome should attempt to restore the state on boot-up and call the turn on/off actions with the recovered values. Defaults to `no`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `template` switch platform allows you to create simple switches out of just actions and an optional value lambda. Once defined, it will automatically appear in Home Assistant as a switch and can be controlled through the frontend."}, {"if": {"properties": {"platform": {"const": "tuya"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "tuya_id": {"type": ["null", "object", "string", "array", "number"]}, "switch_datapoint": {"type": "number", "markdownDescription": "int: The datapoint id number of the switch."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `tuya` switch platform creates a sensor from a tuya serial component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured."}, {"if": {"properties": {"platform": {"const": "uart"}}}, "then": {"allOf": [{"$ref": "#/definitions/switch.SWITCH_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "data": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string or list of bytes: The data to send via UART. Either an ASCII string or a list of bytes."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/uart_bus"}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `uart` switch platform allows you to send a pre-defined sequence of bytes on a [UART bus](https://esphome.io/components/uart.html) when triggered."}]}, "markdownDescription": "The `switch` domain includes all platforms that should show up like a switch and can only be turned ON or OFF."}, "text_sensor": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "ble_scanner"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `ble_scanner` text sensor platform lets you track reachable BLE devices. See the [BLE Tracker Configuration variables](https://esphome.io/components/esp32_ble_tracker.html#config-esp32-ble-tracker) for instructions for setting up scan parameters. The sensor platform is similar to [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html) but in contrast to that platform, this text sensor sends out all raw BLE scan information and does not filter devices."}, {"if": {"properties": {"platform": {"const": "custom"}}}, "then": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): The lambda to run for instantiating the text sensor(s)."}, "text_sensors": {"anyOf": [{"$ref": "#/definitions/text_sensor-custom-text_sensors"}, {"type": "array", "items": {"$ref": "#/definitions/text_sensor-custom-text_sensors"}}], "markdownDescription": "list: A list of text sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Text Sensor](index.html#config-text-sensor)."}}, "type": ["object", "null"]}, "markdownDescription": "This integration can be used to create custom text sensors in ESPHome using the C++ (Arduino) API."}, {"if": {"properties": {"platform": {"const": "homeassistant"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "entity_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The entity ID to import from Home Assistant."}}, "type": ["object", "null"]}]}, "markdownDescription": "The `homeassistant` text sensor platform allows you to create a sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html)."}, {"if": {"properties": {"platform": {"const": "mqtt_subscribe"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "mqtt_parent_id": {"type": ["null", "object", "string", "array", "number"]}, "topic": {"type": "string", "markdownDescription": "string: The MQTT topic to listen for numeric messages."}, "qos": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The MQTT QoS to subscribe with. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `mqtt_subscribe` text sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and save the most recent value in its `id(mysensor).state`."}, {"if": {"properties": {"platform": {"const": "sun"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "sun_id": {"type": ["null", "object", "string", "array", "number"]}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of value to track. One of `sunrise` and `sunset`."}, "elevation": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The elevation to calculate the next sunrise/sunset event for. Defaults to `0\u00b0`."}, "format": {"type": "string", "markdownDescription": "string: The format to format the time value with, see [Displaying Time](display/index.html#display-strftime) for more information. Defaults to `%X`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}}, {"if": {"properties": {"platform": {"const": "template"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "lambda": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[lambda](https://esphome.io/guides/automations.html#config-lambda): Lambda to be evaluated every update interval to get the new value of the text sensor"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}]}, "markdownDescription": "The `template` text sensor platform allows you to create a text sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda)."}, {"if": {"properties": {"platform": {"const": "version"}}}, "then": {"allOf": [{"$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "icon": {"type": ["null", "object", "string", "array", "number"]}, "hide_timestamp": {"type": "boolean", "markdownDescription": "boolean: Allows you to hide the compilation timestamp from the version string. Defaults to `False`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "markdownDescription": "The `version` text sensor platform exposes the ESPHome version the firmware was compiled against as a text sensor."}, {"if": {"properties": {"platform": {"const": "wifi_info"}}}, "then": {"properties": {"ip_address": {"$ref": "#/definitions/text_sensor-wifi_info-ip_address", "markdownDescription": "Expose the IP Address of the ESP as a text sensor. All options from [Text Sensor](index.html#config-text-sensor)."}, "ssid": {"$ref": "#/definitions/text_sensor-wifi_info-ssid", "markdownDescription": "Expose the SSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](index.html#config-text-sensor)."}, "bssid": {"$ref": "#/definitions/text_sensor-wifi_info-bssid", "markdownDescription": "Expose the BSSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](index.html#config-text-sensor)."}, "mac_address": {"$ref": "#/definitions/text_sensor-wifi_info-mac_address", "markdownDescription": "Expose the Mac Address of the WiFi card. All options from [Text Sensor](index.html#config-text-sensor)."}}, "type": ["object", "null"]}, "markdownDescription": "The `wifi_info` text sensor platform exposes different WiFi information via text sensors."}]}, "markdownDescription": "Text sensors are a lot like normal [sensors](https://esphome.io/components/sensor/index.html). But where the \u201cnormal\u201d sensors only represent sensors that output **numbers**, this component can represent any *text*."}, "time": {"type": "array", "items": {"allOf": [{"$ref": "#/definitions/time.TIME_SCHEMA"}, {"type": "object", "properties": {"platform": {"type": "string"}}}, {"if": {"properties": {"platform": {"const": "ds1307"}}}, "then": {"allOf": [{"$ref": "#/definitions/time.TIME_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/i2c_bus"}]}, "markdownDescription": "You first need to set up the [I2C](i2c.html) component."}, {"if": {"properties": {"platform": {"const": "gps"}}}, "then": {"allOf": [{"$ref": "#/definitions/time.TIME_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "gps_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "markdownDescription": "You first need to set up the [GPS](gps.html) component."}, {"if": {"properties": {"platform": {"const": "homeassistant"}}}, "then": {"allOf": [{"$ref": "#/definitions/time.TIME_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "markdownDescription": "The preferred way to get time in ESPHome is using Home Assistant. With the `homeassistant` time platform, the [native API](api.html) connection to Home Assistant will be used to periodically synchronize the current time."}, {"if": {"properties": {"platform": {"const": "sntp"}}}, "then": {"allOf": [{"$ref": "#/definitions/time.TIME_SCHEMA"}, {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "servers": {"anyOf": [{"$ref": "#/definitions/time-sntp-servers"}, {"type": "array", "items": {"$ref": "#/definitions/time-sntp-servers"}}], "markdownDescription": "list of strings: Choose up to 3 NTP servers that are used for the clock source. Defaults to `0.pool.ntp.org`, `1.pool.ntp.org` and `2.pool.ntp.org`"}}, "type": ["object", "null"]}]}, "markdownDescription": "Configuration variables:"}]}, "markdownDescription": "The `time` component allows you to set up real time clock time sources for ESPHome. You can then get the current time in [lambdas](https://esphome.io/guides/automations.html#config-lambda)."}, "adalight": {}, "ads1115": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/ads1115"}}, {"$ref": "#/definitions/ads1115"}]}, "animation": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/animation"}}, {"$ref": "#/definitions/animation"}], "markdownDescription": "Allows to use animated images on displays. Animation inherits all options from the image component. It adds an additional lambda method: `next_frame()` to change the shown picture of a gif."}, "apds9960": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/apds9960"}}, {"$ref": "#/definitions/apds9960"}]}, "api": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "port": {"type": "number", "markdownDescription": "integer: The port to run the API Server on. Defaults to `6053`."}, "password": {"type": "string", "markdownDescription": "string: The password to protect the API Server with. Defaults to no password."}, "reboot_timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time to wait before rebooting when no client connects to the API. This is needed because sometimes the low level ESP functions report that the ESP is connected to the network, when in fact it is not - only a full reboot fixes it. Can be disabled by setting this to `0s`. Defaults to `15min`."}, "services": {"$ref": "#/definitions/api-services", "markdownDescription": "list: A list of user-defined services. See [User-defined Services](https://esphome.io/components/api.html#api-services)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The ESPHome native API is used to communicate with clients directly, with a highly-optimized network protocol. Currently, only the ESPHome tool and Home Assistant use this native API."}, "as3935_i2c": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "irq_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The IRQ pin, which indicates if a lightning strike has been detected."}, "indoor": {"type": "boolean", "markdownDescription": "boolean: Indicates if the sensor is used indoor. Defaults to `true`."}, "noise_level": {"type": "number", "markdownDescription": "integer: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`."}, "watchdog_threshold": {"type": "number", "markdownDescription": "integer: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`."}, "spike_rejection": {"type": "number", "markdownDescription": "integer: Helps to differentiate between real events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`."}, "lightning_threshold": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`."}, "mask_disturber": {"type": "boolean", "markdownDescription": "boolean: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`."}, "div_ratio": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`."}, "capacitance": {"type": "number", "markdownDescription": "integer: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/i2c_bus"}], "markdownDescription": "The `as3935_i2c` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close."}, "as3935_spi": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "irq_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The IRQ pin, which indicates if a lightning strike has been detected."}, "indoor": {"type": "boolean", "markdownDescription": "boolean: Indicates if the sensor is used indoor. Defaults to `true`."}, "noise_level": {"type": "number", "markdownDescription": "integer: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`."}, "watchdog_threshold": {"type": "number", "markdownDescription": "integer: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`."}, "spike_rejection": {"type": "number", "markdownDescription": "integer: Helps to differentiate between real events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`."}, "lightning_threshold": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`."}, "mask_disturber": {"type": "boolean", "markdownDescription": "boolean: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`."}, "div_ratio": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "integer: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`."}, "capacitance": {"type": "number", "markdownDescription": "integer: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/spi_bus"}], "markdownDescription": "The `as3935_spi` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close."}, "captive_portal": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "web_server_base_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The captive portal component in ESPHome is a fallback mechanism for when connecting to the configured [WiFi](wifi.html) fails."}, "color": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/color"}}, {"$ref": "#/definitions/color"}], "markdownDescription": "When using RGB-capable displays in ESPHome you may wish to use custom colors. A `color` component exists for just this purpose:"}, "custom_component": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/custom_component"}}, {"$ref": "#/definitions/custom_component"}], "markdownDescription": "This integration can be used to create generic custom components in ESPHome using the C++ (Arduino) API. This integration should be used in cases where none of ESPHome\u2019s abstraction layers (for example the \u201csensor\u201d, \u201cbinary sensor\u201d, \u201cswitch\u201d, etc concepts) work well for your integration."}, "dallas": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/dallas"}}, {"$ref": "#/definitions/dallas"}]}, "debug": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `debug` component can be used to debug problems with ESPHome. At startup, it prints a bunch of useful information like reset reason, free heap size, ESPHome version and so on."}, "deep_sleep": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "run_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time duration the node should be active, i.e. run code."}, "sleep_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time duration to stay in deep sleep mode."}, "wakeup_pin": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): Only on ESP32. A pin to wake up to once in deep sleep mode. Use the inverted property to wake up to LOW signals."}, "wakeup_pin_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Only on ESP32. Specify how to handle waking up from a `wakeup_pin` if the wakeup pin is already in the state with which it would wake up when attempting to enter deep sleep. See [ESP32 Wakeup Pin Mode](https://esphome.io/components/deep_sleep.html#deep-sleep-esp32-wakeup-pin-mode). Defaults to `IGNORE`"}, "esp32_ext1_wakeup": {"properties": {"pins": {"anyOf": [{"$ref": "#/definitions/deep_sleep-esp32_ext1_wakeup-pins"}, {"type": "array", "items": {"$ref": "#/definitions/deep_sleep-esp32_ext1_wakeup-pins"}}]}, "mode": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"], "markdownDescription": "Use the EXT1 wakeup source of the ESP32 to wake from deep sleep to wake up on multiple pins. This cannot be used together with wakeup pin.\n  * **pins** (**Required**, list of pin numbers): The pins to wake up on.\n  \n  * **mode** (*Optional*): The mode to use for the wakeup source. Must be one of `ALL_LOW` (wake up when all pins go LOW) or `ANY_HIGH` (wake up when any pin goes HIGH)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `deep_sleep` component can be used to automatically enter a deep sleep mode on the ESP8266/ESP32 after a certain amount of time. This is especially useful with nodes that operate on batteries and therefore need to conserve as much energy as possible."}, "dfplayer": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/dfplayer"}}, {"$ref": "#/definitions/dfplayer"}], "markdownDescription": "The `dfplayer` ([datasheet](https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299)), component allows you to play sound and music stored in an SD card or USB flash drive."}, "e131": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "method": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "Listening method, one of `multicast` or `unicast`. Defaults to `multicast`."}}, "type": ["object", "null"]}, "esp32_ble_beacon": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for code generation."}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The type of beacon to create, currently only supports `iBeacon`."}, "uuid": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) to identify the beacon."}, "major": {"type": "number", "markdownDescription": "integer: The iBeacon major identifier of this beacon. Usually used to group beacons, for example for grouping all beacons in the same building, but has no effect if the BLE receiver doesn\u2019t use it. Defaults to `10167`."}, "minor": {"type": "number", "markdownDescription": "integer: The iBeacon minor identifier of this beacon. Usually used to identify beacons within an iBeacon group. Defaults to `61958`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `esp32_ble_beacon` component creates a Bluetooth Low Energy Beacon with your ESP32 device. Beacons are BLE devices that repeatedly just send out a pre-defined packet of data. This packet can then be received by devices like smartphones and can then be used to track a phone\u2019s location."}, "esp32_ble_tracker": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this ESP32 BLE Hub."}, "scan_parameters": {"properties": {"duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "interval": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "window": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"]}, "active": {"type": "boolean"}}, "type": ["object", "null"], "markdownDescription": "Advanced parameters for configuring the scan behavior of the ESP32. See also [this guide by Texas Instruments](http://dev.ti.com/tirex/content/simplelink_academy_cc2640r2sdk_1_12_01_16/modules/ble_scan_adv_basic/ble_scan_adv_basic.html#scanning) for reference.\n  * **interval** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The interval between each consecutive scan window. This is the time the ESP spends on each of the 3 BLE advertising channels. Defaults to `320ms`.\n  \n  * **window** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The time the ESP is actively listening for packets on a channel during each scan interval. If this is close to the `interval` value, the ESP will spend more time listening to packets (but also consume more power).\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration of each complete scan. This has no real impact on the device but can be used to debug the BLE stack. Defaults to `5min`.\n  \n  * **active** (*Optional*, boolean): Whether to actively send scan requests to request more data after having received an advertising packet. With some devices this is necessary to receive all data, but also drains those devices\u2019 power a (tiny) bit more. Defaults to `true`."}, "on_ble_advertise": {"$ref": "#/definitions/esp32_ble_tracker-on_ble_advertise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Bluetooth advertising is received. See [on_ble_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-advertise)."}, "on_ble_service_data_advertise": {"$ref": "#/definitions/esp32_ble_tracker-on_ble_service_data_advertise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Bluetooth advertising with service data is received. See [on_ble_service_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-service-data-advertise)."}, "on_ble_manufacturer_data_advertise": {"$ref": "#/definitions/esp32_ble_tracker-on_ble_manufacturer_data_advertise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a Bluetooth advertising with manufcaturer data is received. See [on_ble_manufacturer_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-manufacturer-data-advertise)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `esp32_ble_tracker` component creates a global hub so that you can track bluetooth low energy devices using your ESP32 node."}, "esp32_camera": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "name": {"type": "string", "markdownDescription": "string: The name of the camera."}, "data_pins": {"type": "array", "items": {"$ref": "#/definitions/esp32_camera-data_pins[]"}, "markdownDescription": "list of pins: The data lanes of the camera, this must be a list of 8 GPIO pins."}, "vsync_pin": {"type": "string", "markdownDescription": "pin: The pin the VSYNC line of the camera is connected to."}, "href_pin": {"type": "string", "markdownDescription": "pin: The pin the HREF line of the camera is connected to."}, "pixel_clock_pin": {"type": "string", "markdownDescription": "pin: The pin the pixel clock line of the camera is connected to."}, "external_clock": {"$ref": "#/definitions/esp32_camera-external_clock", "markdownDescription": "The configuration of the external clock to drive the camera.\n  * **pin** (**Required**, pin): The pin the external clock line is connected to.\n  \n  * **frequency** (*Optional*, float): The frequency of the external clock, must be either 20MHz or 10MHz. Defaults to `20MHz`."}, "i2c_pins": {"$ref": "#/definitions/esp32_camera-i2c_pins", "markdownDescription": "The I\u00b2C control pins of the camera.\n  * **sda** (**Required**, pin): The SDA pin of the I\u00b2C interface. Also called `SIOD`.\n  \n  * **scl** (**Required**, pin): The SCL pin of the I\u00b2C interface. Also called `SIOC`."}, "reset_pin": {"type": "string", "markdownDescription": "pin: The ESP pin the reset pin of the camera is connected to. If set, this will reset the camera before the ESP boots."}, "power_down_pin": {"type": "string", "markdownDescription": "pin: The ESP pin to power down the camera. If set, this will power down the camera while it is inactive."}, "max_framerate": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The maximum framerate the camera will generate images at. Up to 60Hz is possible (with reduced frame sizes), but beware of overheating. Defaults to `10 fps`."}, "idle_framerate": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "float: The framerate to capture images at when no client is requesting a full stream. Defaults to `0.1 fps`."}, "resolution": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "enum: The resolution the camera will capture images at. Higher resolutions require more memory, if there\u2019s not enough memory you will see an error during startup.\n  * `160x120` (QQVGA)\n  \n  * `128x160` (QQVGA2)\n  \n  * `176x144` (QCIF)\n  \n  * `240x176` (HQVGA)\n  \n  * `320x240` (QVGA)\n  \n  * `400x296` (CIF)\n  \n  * `640x480` (VGA, default)\n  \n  * `800x600` (SVGA)\n  \n  * `1024x768` (XGA)\n  \n  * `1280x1024` (SXGA)\n  \n  * `1600x1200` (UXGA)"}, "jpeg_quality": {"type": "number", "markdownDescription": "int: The JPEG quality that the camera should encode images with. From 10 (best) to 63 (worst). Defaults to `10`."}, "contrast": {"type": "number", "markdownDescription": "int: The contrast to apply to the picture, from -2 to 2. Defaults to `0`."}, "brightness": {"type": "number", "markdownDescription": "int: The brightness to apply to the picture, from -2 to 2. Defaults to `0`."}, "saturation": {"type": "number", "markdownDescription": "int: The saturation to apply to the picture, from -2 to 2. Defaults to `0`."}, "vertical_flip": {"type": "boolean", "markdownDescription": "bool: Whether to flip the image vertically. Defaults to `true`."}, "horizontal_mirror": {"type": "boolean", "markdownDescription": "bool: Whether to mirror the image horizontally. Defaults to `true`."}, "test_pattern": {"type": "boolean", "markdownDescription": "boolean: When enabled, the camera will show a test pattern that can be used to debug connection issues."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `esp32_camera` component allows you to use ESP32-based camera boards in ESPHome that directly integrate into Home Assistant through the native API."}, "esp32_touch": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for code generation."}, "setup_mode": {"type": "boolean", "markdownDescription": "boolean: Whether debug messages with the touch pad value should be displayed in the logs. Useful for finding out suitable thresholds for the binary sensors, but spam the logs. See [setting up touch pads](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor) for more information. Defaults to false."}, "iir_filter": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Optionally set up an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter should be applied to all touch pads. This can increase the accuracy of the touch pads a lot, but higher values decrease the response time. A good value to start with is `10ms`. Default is no IIR filter."}, "sleep_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Set a time period denoting the amount of time the touch peripheral should sleep between measurements. This can decrease power usage but make the sensor slower. Default is about 27 milliseconds."}, "measurement_duration": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): Set the conversion time for all touch pads. A longer conversion time means that more charge/discharge cycles of the touch pad can be performed, therefore increasing accuracy. Default is about 8ms, the maximum amount."}, "low_voltage_reference": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The low voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `0.5V`, `0.6V`, `0.7V`, `0.8V`. Default is `0.5V`."}, "high_voltage_reference": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The high voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `2.4V`, `2.5V`, `2.6V`, `2.7V`. Default is `2.7V`."}, "voltage_attenuation": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "The voltage attenuation to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `1.5V`, `1V`, `0.5V`, `0V`. Default is `0V`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}]}, "ethernet": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "type": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The type of LAN chipset. Must be one of `LAN8720` or `TLK110` (see datasheet for more details)."}, "mdc_pin": {"type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The MDC pin of the board. Usually this is `GPIO23`."}, "mdio_pin": {"$ref": "#/definitions/esp32_camera-data_pins[]", "type": "string", "markdownDescription": "[Pin](https://esphome.io/guides/configuration-types.html#config-pin): The MDIO pin of the board. Usually this is `GPIO18`."}, "clk_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The clock mode of the data lines, this must be one of these values: (see datasheet of your board for more details)\n  * `GPIO0_IN` (Default) - External clock\n  \n  * `GPIO0_OUT` - Internal clock\n  \n  * `GPIO16_OUT` - Internal clock\n  \n  * `GPIO17_OUT` - Internal clock"}, "phy_addr": {"type": "number", "markdownDescription": "int: The PHY addr type of the ethernet controller. Defaults to 0."}, "power_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin with which to control the power of the board. Leave unspecified for no power pin (default)"}, "manual_ip": {"$ref": "#/definitions/ethernet-manual_ip", "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use."}, "domain": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Set the domain of the node hostname used for uploading. For example, if it\u2019s set to `.local`, all uploads will be sent to `<HOSTNAME>.local`. Defaults to `.local`."}, "use_address": {"type": "string"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "This core ESPHome component sets up ethernet connections for ESP32s. Ethernet for ESP8266 is not supported."}, "exposure_notifications": {"properties": {"on_exposure_notification": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/exposure_notifications-on_exposure_notification"}}, {"$ref": "#/definitions/exposure_notifications-on_exposure_notification"}], "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to run when an exposure notification bluetooth message is received.A variable `x` of type [exposure_notifications::ExposureNotification](/api/structesphome_1_1exposure__notifications_1_1_exposure_notification.html) is passed to the automation."}}, "type": ["object", "null"], "markdownDescription": "The `exposure_notifications` component uses the [ESP32 Bluetooth Low Energy Tracker Hub](esp32_ble_tracker.html) to discover nearby COVID-19 exposure notification bluetooth messages sent by phones running the [Google/Apple Exposure Notification service](https://www.google.com/covid19/exposurenotifications/)."}, "font": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/font"}}, {"$ref": "#/definitions/font"}], "markdownDescription": "The rendering engine also has a powerful font drawer which integrates seamlessly into ESPHome. Whereas in most Arduino display projects you have to use one of a few pre-defined fonts in very specific sizes, with ESPHome you have the option to use **any** TrueType (`.ttf`) font file at **any** size! Granted the reason for it is actually not having to worry about the licensing of font files :)"}, "globals": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/globals"}}, {"$ref": "#/definitions/globals"}], "markdownDescription": "In some cases you might require to share a global variable across multiple lambdas. For example, global variables can be used to store the state of a garage door."}, "gps": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/gps"}}, {"$ref": "#/definitions/gps"}], "markdownDescription": "The `gps` component allows you to connect GPS modules to your ESPHome project. Any GPS module that uses the standardized NMEA communication protocol will work."}, "http_request": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "useragent": {"type": "string", "markdownDescription": "string: User-Agent header for requests. Defaults to `ESPHome`."}, "timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): Timeout for request. Defaults to `5s`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `http_request` component lets you make HTTP/HTTPS requests."}, "i2c": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/i2c"}}, {"$ref": "#/definitions/i2c"}], "markdownDescription": "This component sets up the I\u00b2C bus for your ESP32 or ESP8266. In order for these components to work correctly, you need to define the I\u00b2C bus in your configuration. Please note the ESP will enable its internal 10k\u2126 pullup resistors for these pins, so you usually don\u2019t need to put on external ones. You can use multiple devices on one I\u00b2C bus as each device is given a unique address for communicating between between it and the ESP. You can do this by hopping wires from the two lines (SDA and SCL) from each device board to the next device board or by connecting the wires from each device back to the two I\u00b2C pins on the ESP."}, "image": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/image"}}, {"$ref": "#/definitions/image"}], "markdownDescription": "Use this component to store graphical images on the device, you can then draw the images on compatible displays."}, "interval": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/interval"}}, {"$ref": "#/definitions/interval"}]}, "logger": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "baud_rate": {"type": "number", "markdownDescription": "int: The baud rate to use for the serial UART port. Defaults to `115200`. Set to `0` to disable logging via UART."}, "tx_buffer_size": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "int: The size of the buffer used for log messages. Decrease this if you\u2019re having memory problems. Defaults to `512`."}, "hardware_uart": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The Hardware UART to use for logging. Defaults to `UART0`."}, "level": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The global log level. Any log message with a lower severity will not be shown. Defaults to `DEBUG`."}, "logs": {"$ref": "#/definitions/logger-logs", "markdownDescription": "mapping: Manually set the log level for a specific component or tag. See [Manual Log Levels for more information](https://esphome.io/components/logger.html#logger-manual-tag-specific-levels)."}, "on_message": {"$ref": "#/definitions/logger-on_message", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when a message is to be looged. The vairables `int level`, `const char* tag` and `const char* message` are available for lambda processing."}, "esp8266_store_log_strings_in_flash": {"type": "boolean", "markdownDescription": "boolean: If set to false, disables storing log strings in the flash section of the device (uses more memory). Defaults to true."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The logger component automatically logs all log messages through the serial port and through MQTT topics. By default, all logs with a severity higher than `DEBUG` will be shown. Decreasing the log level can help with the performance of the application and memory size."}, "mcp23008": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp23008"}}, {"$ref": "#/definitions/mcp23008"}]}, "mcp23016": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp23016"}}, {"$ref": "#/definitions/mcp23016"}]}, "mcp23017": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp23017"}}, {"$ref": "#/definitions/mcp23017"}]}, "mcp23s08": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp23s08"}}, {"$ref": "#/definitions/mcp23s08"}]}, "mcp23s17": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp23s17"}}, {"$ref": "#/definitions/mcp23s17"}]}, "mcp3008": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mcp3008"}}, {"$ref": "#/definitions/mcp3008"}]}, "modbus": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/modbus"}}, {"$ref": "#/definitions/modbus"}]}, "mpr121": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/mpr121"}}, {"$ref": "#/definitions/mpr121"}]}, "mqtt": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "broker": {"type": "string", "markdownDescription": "string: The host of your MQTT broker."}, "port": {"type": "number", "markdownDescription": "int: The port to connect to. Defaults to 1883."}, "username": {"type": "string", "markdownDescription": "string: The username to use for authentication. Empty (the default) means no authentication."}, "password": {"type": "string", "markdownDescription": "string: The password to use for authentication. Empty (the default) means no authentication."}, "client_id": {"type": "string", "markdownDescription": "string: The client id to use for opening connections. See [Defaults](https://esphome.io/components/mqtt.html#mqtt-defaults) for more information."}, "discovery": {"type": "boolean", "markdownDescription": "boolean: If Home Assistant automatic discovery should be enabled. Defaults to `True`."}, "discovery_retain": {"type": "boolean", "markdownDescription": "boolean: Whether to retain MQTT discovery messages so that entities are added automatically on Home Assistant restart. Defaults to `True`."}, "discovery_prefix": {"type": "string", "markdownDescription": "string: The prefix to use for Home Assistant\u2019s MQTT discovery. Should not contain trailing slash. Defaults to `homeassistant`."}, "birth_message": {"allOf": [{"properties": {"topic": {"type": "string"}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": "boolean"}, "payload": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message): The message to send when a connection to the broker is established. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information."}, "will_message": {"allOf": [{"properties": {"topic": {"type": "string"}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": "boolean"}, "payload": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message): The message to send when the MQTT connection is dropped. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information."}, "shutdown_message": {"allOf": [{"properties": {"topic": {"type": "string"}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": "boolean"}, "payload": {"type": "string"}}, "type": ["object", "null"]}], "markdownDescription": "[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message): The message to send when the node shuts down and the connection is closed cleanly. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information."}, "topic_prefix": {"type": "string", "markdownDescription": "string: The prefix used for all MQTT messages. Should not contain trailing slash. Defaults to `<APP_NAME>`."}, "log_topic": {"allOf": [{"properties": {"topic": {"type": "string"}, "qos": {"type": ["null", "object", "string", "array", "number"]}, "retain": {"type": "boolean"}, "level": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}], "markdownDescription": "[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message): The topic to send MQTT log messages to."}, "ssl_fingerprints": {"anyOf": [{"$ref": "#/definitions/mqtt-ssl_fingerprints"}, {"type": "array", "items": {"$ref": "#/definitions/mqtt-ssl_fingerprints"}}], "markdownDescription": "list: Only on ESP8266. A list of SHA1 hashes used for verifying SSL connections. See [SSL Fingerprints](https://esphome.io/components/mqtt.html#mqtt-ssl-fingerprints) for more information."}, "keepalive": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[Time](https://esphome.io/guides/configuration-types.html#config-time): The time to keep the MQTT socket alive, decreasing this can help with overall stability due to more WiFi traffic with more pings. Defaults to 15 seconds."}, "reboot_timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time to wait before rebooting when no MQTT connection exists. Can be disabled by setting this to `0s`. Defaults to `15min`."}, "on_message": {"$ref": "#/definitions/mqtt-on_message", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when a message on a specific MQTT topic is received. See [on_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-message)."}, "on_json_message": {"$ref": "#/definitions/mqtt-on_json_message", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when a JSON message on a specific MQTT topic is received. See [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-json-message)."}}, "type": ["object", "null"], "markdownDescription": "The MQTT Client Component sets up the MQTT connection to your broker and is currently required for ESPHome to work. In most cases, you will just be able to copy over the [MQTT section](https://www.home-assistant.io/components/mqtt/) of your Home Assistant configuration."}, "my9231": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/my9231"}}, {"$ref": "#/definitions/my9231"}]}, "ota": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "safe_mode": {"type": "boolean", "markdownDescription": "boolean: Whether to enable safe mode. Defaults to `True`."}, "port": {"type": "number", "markdownDescription": "int: The port to use for OTA updates. Defaults to `3232` for the ESP32 and `8266` for the ESP8266."}, "password": {"type": "string", "markdownDescription": "string: The password to use for updates."}, "reboot_timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time to wait before rebooting when in safe mode. Defaults to `5min`."}, "num_attempts": {"type": "number", "markdownDescription": "int: The number of attempts to wait before entering safe mode. Defaults to `10`."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "With the OTA (Over The Air) update component you can upload your firmware binaries to your node without having to use an USB cable for uploads. ESPHome natively supports this through its `run` and `upload` helper scripts."}, "pca9685": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/pca9685"}}, {"$ref": "#/definitions/pca9685"}]}, "pcf8574": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/pcf8574"}}, {"$ref": "#/definitions/pcf8574"}], "markdownDescription": "The PCF8574 component allows you to use PCF8574 or PCF8575 I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/pcf8574.pdf), [SparkFun](https://www.sparkfun.com/products/retired/8130)) in ESPHome. It uses [I\u00b2C Bus](i2c.html#i2c) for communication."}, "pn532": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/pn532"}}, {"$ref": "#/definitions/pn532"}]}, "pn532_i2c": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this component."}, "on_tag": {"$ref": "#/definitions/pn532_i2c-on_tag", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag)."}, "on_finished_write": {"$ref": "#/definitions/pn532_i2c-on_finished_write"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}], "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532."}, "pn532_spi": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this component."}, "on_tag": {"$ref": "#/definitions/pn532_i2c-on_tag", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag)."}, "on_finished_write": {"$ref": "#/definitions/pn532_i2c-on_finished_write"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}], "markdownDescription": "The `pn532_spi` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532."}, "power_supply": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/power_supply"}}, {"$ref": "#/definitions/power_supply"}], "markdownDescription": "The `power_supply` component allows you to have a high power mode for certain outputs. For example, if you\u2019re using an [ATX power supply](https://en.wikipedia.org/wiki/ATX) to power your LED strips, you usually don\u2019t want to have the power supply on all the time while the output is not on. The power supply component can be attached to any [Output Component](output/index.html#output) and will automatically switch on if any of the outputs are on. Furthermore, it also has a cooldown time that keeps the power supply on for a while after the last output has been disabled."}, "prometheus": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "web_server_base_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `prometheus` component enables an HTTP endpoint for the [Web Server Component](web_server.html) in order to integrate a [Prometheus](https://prometheus.io/) installation."}, "rc522_i2c": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this component."}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin connected to the RST line. Some tests shows the RC522 working okay without this."}, "on_tag": {"$ref": "#/definitions/rc522_i2c-on_tag", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/i2c_bus"}], "markdownDescription": "The `rc522_i2c` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) (also avilable over SPI). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522."}, "rc522_spi": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this component."}, "reset_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The pin connected to the RST line. Some tests shows the RC522 working okay without this."}, "on_tag": {"$ref": "#/definitions/rc522_i2c-on_tag", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/POLLING_COMPONENT"}, {"$ref": "#/definitions/spi_bus"}], "markdownDescription": "The `rc522_spi` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [SPI](https://esphome.io/components/spi.html#spi) (also avilable over I\u00b2C). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522."}, "rdm6300": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID for this component."}, "on_tag": {"$ref": "#/definitions/rdm6300-on_tag", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform when a tag is read. See [on_tag](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-on-tag)."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}]}, "remote_receiver": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/remote_receiver"}}, {"$ref": "#/definitions/remote_receiver"}], "markdownDescription": "The `remote_receiver` component lets you receive and decode any remote signal, these can for example be infrared remotes or 433MHz signals."}, "remote_transmitter": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/remote_transmitter"}}, {"$ref": "#/definitions/remote_transmitter"}], "markdownDescription": "The `remote_transmitter` component lets you send digital packets to control devices in your home. For example this includes infrared data or 433MHz RF signals."}, "rf_bridge": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "on_code_received": {"$ref": "#/definitions/rf_bridge-on_code_received", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An action to be performed when a code is received. See [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received)."}, "on_advanced_code_received": {"$ref": "#/definitions/rf_bridge-on_advanced_code_received"}}, "type": ["object", "null"]}, {"$ref": "#/definitions/uart_bus"}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `RF Bridge` Component provides the ability to send and receive 433MHz remote codes without hardware hacking the circuit board to bypass the `efm8bb1` MCU. This component implements the communcation protocol that the original `efm8bb1` firmware implements. The device is connected via the [UART bus](uart.html). The uart bus must be configured at the same speed of the module which is 19200bps."}, "rtttl": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/rtttl"}}, {"$ref": "#/definitions/rtttl"}], "markdownDescription": "The `rtttl`, component allows you to easily connect a passive piezo buzzer to your microcontroller and play monophonic songs. It accepts the Ring Tone Text Transfer Language, rtttl format ([Wikipedia](https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language)) which allows to store simple melodies."}, "ruuvi_ble": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}]}, "script": {"$ref": "#/definitions/script"}, "servo": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/servo"}}, {"$ref": "#/definitions/servo"}], "markdownDescription": "The `servo` component allows you to use servo motors with ESPHome. Servos are motor controllers that contain all the electronics necessary for driving the motor and provide a simple PWM interface to control the motor."}, "sim800l": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/sim800l"}}, {"$ref": "#/definitions/sim800l"}], "markdownDescription": "The `SIM800L` Component provides the ability to send and receive SMS text messages. The device must be connected via a [UART bus](uart.html) supporting both receiving and transmitting line. The UART bus must be configured at the same speed of the module which is by default 9600bps. The required connection wires are `+VCC`, `GND`, `RX` and `TX`."}, "sm16716": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/sm16716"}}, {"$ref": "#/definitions/sm16716"}]}, "sn74hc595": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/sn74hc595"}}, {"$ref": "#/definitions/sn74hc595"}], "markdownDescription": "The SN74HC595 component allows you to use SN74HC595 shift registers as I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/sn74hc595.pdf), [SparkFun](https://www.sparkfun.com/products/13699)) in ESPHome. It uses 3 wires (optionally 4) for communication."}, "spi": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/spi"}}, {"$ref": "#/definitions/spi"}], "markdownDescription": "SPI is a very common high-speed protocol for a lot of devices. The SPI bus usually consists of 4 wires:"}, "status_led": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): The GPIO pin to operate the status LED on."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `status_led` hooks into all ESPHome components and can indicate the status of the device. Specifically, it will:"}, "substitutions": {"properties": {"<function validate_substitution_key at 0x7f89c1075048>": {"type": "string"}}, "type": ["object", "null"]}, "sun": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "time_id": {"type": ["null", "object", "string", "array", "number"]}, "latitude": {"type": "number", "markdownDescription": "float: The latitude for performing the calculation."}, "longitude": {"type": "number", "markdownDescription": "float: The longitude for performing the calculation."}, "on_sunrise": {"$ref": "#/definitions/sun-on_sunrise", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform at sunrise when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to 0\u00b0 (horizon)."}, "on_sunset": {"$ref": "#/definitions/sun-on_sunset", "markdownDescription": "[Automation](https://esphome.io/guides/automations.html#automation): An automation to perform at sunset when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to 0\u00b0 (horizon)."}}, "type": ["object", "null"], "markdownDescription": "The `sun` component allows you to track the sun\u2019s position in the sky."}, "sx1509": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/sx1509"}}, {"$ref": "#/definitions/sx1509"}], "markdownDescription": "The SX1509 component allows you to expand your I/O capabilities: ([datasheet](https://www.semtech.com/uploads/documents/sx1509_evk_users_guide.pdf), [SparkFun](https://learn.sparkfun.com/tutorials/sx1509-io-expander-breakout-hookup-guide/all)) in ESPHome. It uses [I\u00b2C Bus](i2c.html#i2c) for communication."}, "tlc59208f": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/tlc59208f"}}, {"$ref": "#/definitions/tlc59208f"}]}, "tm1651": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "clk_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): CLK pin"}, "dio_pin": {"$ref": "#/definitions/PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA", "markdownDescription": "[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema): DIO pin"}}, "type": ["object", "null"], "markdownDescription": "The `tm1651` display platform allows you to use battery display units based on TM1651 chip, like [this one](https://aliexpress.com/item/32811491559.html) with ESPHome. Currently integration supports level and brightness setting. All updates can be made via lambda expressions."}, "ttp229_bsf": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/ttp229_bsf"}}, {"$ref": "#/definitions/ttp229_bsf"}]}, "ttp229_lsf": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/ttp229_lsf"}}, {"$ref": "#/definitions/ttp229_lsf"}]}, "tuya": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "time_id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Some Tuya devices support obtaining local time from ESPHome. Specify the ID of the [Time Component](time.html#time) which will be used."}, "ignore_mcu_update_on_datapoints": {"anyOf": [{"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}, {"type": "array", "items": {"$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"}}], "markdownDescription": "list: A list of datapoints to ignore MCU updates for.  Useful for certain broken/erratic hardware and debugging."}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}, {"$ref": "#/definitions/uart_bus"}], "markdownDescription": "The `tuya` component creates a serial connection to the Tuya MCU for platforms to use."}, "uart": {"anyOf": [{"type": "array", "items": {"$ref": "#/definitions/uart"}}, {"$ref": "#/definitions/uart"}], "markdownDescription": "UART is a common serial protocol for a lot of devices. For example, when uploading a binary to your ESP you have probably used UART to access the chip. UART (or for Arduino often also called Serial) usually consists of 2 pins:"}, "web_server": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "port": {"type": "number", "markdownDescription": "int: The port the web server should open its socket on."}, "css_url": {"type": "string", "markdownDescription": "url: The URL that should be used for the CSS stylesheet. Defaults to [https://esphome.io/_static/webserver-v1.min.css](https://esphome.io/_static/webserver-v1.min.css) (updates will go to `v2`, `v3`, etc). Can be set to empty string."}, "css_include": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "local file: Path to local file to be included in web server index page. Contents of this file will be served as `/0.css` and used as CSS stylesheet by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver."}, "js_url": {"type": "string", "markdownDescription": "url: The URL that should be used for the JS script. Defaults to [https://esphome.io/_static/webserver-v1.min.js](https://esphome.io/_static/webserver-v1.min.js). Can be set to empty string."}, "js_include": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "local file: Path to local file to be included in web server index page. Contents of this file will be served as `/0.js` and used as JS script by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver."}, "auth": {"$ref": "#/definitions/web_server-auth", "markdownDescription": "Enables basic authentication with username and password.\n  * **username** (**Required**, string): The username to use for authentication.\n  \n  * **password** (**Required**, string): The password to check for authentication."}, "web_server_base_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, {"$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"}], "markdownDescription": "The `web_server` component creates a simple web server on the node that can be accessed through any browser and a simple [REST API](/web-api/index.html). Please note that enabling this component will take up *a lot* of memory and can lead to problems, especially on the ESP8266."}, "web_server_base": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "wifi": {"properties": {"id": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "[ID](https://esphome.io/guides/configuration-types.html#config-id): Manually specify the ID used for code generation."}, "networks": {"anyOf": [{"$ref": "#/definitions/wifi-networks"}, {"type": "array", "items": {"$ref": "#/definitions/wifi-networks"}}], "markdownDescription": "Configure multiple WiFi networks to connect to, the best one that is reachable will be connected to. See [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks)."}, "ssid": {"type": "string", "markdownDescription": "string: The name (or [service set identifier](https://www.lifewire.com/definition-of-service-set-identifier-816547)) of the WiFi access point your device should connect to."}, "password": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The password (or PSK) for your WiFi network. Leave empty for no password."}, "manual_ip": {"$ref": "#/definitions/ethernet-manual_ip", "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use."}, "eap": {"properties": {"identity": {"type": "string"}, "username": {"type": "string"}, "password": {"type": "string"}, "certificate_authority": {"type": ["null", "object", "string", "array", "number"]}, "certificate": {"type": ["null", "object", "string", "array", "number"]}, "key": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}, "ap": {"$ref": "#/definitions/wifi-ap", "markdownDescription": "Enable an access point mode on the node.\n  * **ssid** (**Required**, string): The name of the access point to create.\n  \n  * **password** (*Optional*, string): The password for the access point. Leave empty for no password.\n  \n  * **channel** (*Optional*, int): The channel the AP should operate on from 1 to 14. Defaults to 1.\n  \n  * **manual_ip** (*Optional*): Manually set the IP options for the AP. Same options as manual_ip for station mode.\n  \n  * **ap_timeout** (*Optional*, [time](https://esphome.io/guides/configuration-types.html#config-time)): The time after which to enable the configured fallback hotspot. Defaults to `1min`."}, "domain": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: Set the domain of the node hostname used for uploading. For example, if it\u2019s set to `.local`, all uploads will be sent to `<HOSTNAME>.local`. Defaults to `.local`."}, "reboot_timeout": {"properties": {"days": {"type": "number"}, "hours": {"type": "number"}, "minutes": {"type": "number"}, "seconds": {"type": "number"}, "milliseconds": {"type": "number"}, "microseconds": {"type": "number"}}, "type": ["object", "null"], "markdownDescription": "[time](https://esphome.io/guides/configuration-types.html#config-time): The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to `0s`, but note that the low level IP stack currently seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to `15min`."}, "power_save_mode": {"type": ["null", "object", "string", "array", "number"], "markdownDescription": "string: The power save mode for the WiFi interface. See [Power Save Mode](https://esphome.io/components/wifi.html#wifi-power-save-mode)"}, "fast_connect": {"type": "boolean", "markdownDescription": "boolean: If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to `off`. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available."}, "use_address": {"type": "string", "markdownDescription": "string: Manually override what address to use to connect to the ESP. Defaults to auto-generated value. Example, if you have changed your static IP and want to flash OTA to the previously configured IP address."}, "output_power": {"type": "number", "markdownDescription": "string: The amount of TX power for the WiFi interface from 10dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts."}}, "type": ["object", "null"], "markdownDescription": "This core ESPHome component sets up WiFi connections to access points for you. It needs to be in your configuration or otherwise ESPHome will fail in the config validation stage."}, "wled": {}, "xiaomi_ble": {"allOf": [{"properties": {"id": {"type": ["null", "object", "string", "array", "number"]}, "esp32_ble_id": {"type": ["null", "object", "string", "array", "number"]}}, "type": ["object", "null"]}], "markdownDescription": "The `xiaomi_ble` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the temperature, humidity, moisture, conductivity, illuminance, formaldehyde, mosquito tablet and battery level of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_ble` listense passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life."}}}
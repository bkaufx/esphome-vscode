{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "CONFIG.COMPONENT_SCHEMA": {
      "properties": {
        "setup_priority": { "type": "number" },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Prometheus Component](https://esphome.io/components/prometheus.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "CONFIG.ENTITY_BASE_SCHEMA": {
      "properties": {
        "name": { "type": "string" },
        "internal": { "type": "boolean" },
        "disabled_by_default": { "type": "boolean", "default": false },
        "icon": { "type": ["null", "object", "string", "array", "number"] },
        "entity_category": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "retain": {
              "type": "boolean",
              "markdownDescription": "**boolean**: If all MQTT state messages should be retained. Defaults to `true`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "discovery": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Manually enable/disable discovery for a component. Defaults to the global default.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "state_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to publish state updates to. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/state`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "availability": {
              "properties": {
                "topic": { "type": "string" },
                "payload_available": { "type": "string", "default": "online" },
                "payload_not_available": {
                  "type": "string",
                  "default": "offline"
                }
              },
              "type": ["object", "null"],
              "required_": ["topic"],
              "markdownDescription": "Manually set what should be sent to Home Assistant for showing entity availability. Default derived from [global birth/last will message](https://esphome.io/components/mqtt.html#mqtt-last-will-birth).\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "command_topic": {
              "type": "string",
              "markdownDescription": "**string**: The topic to subscribe to for commands from the remote. Defaults to `<TOPIC_PREFIX>/<COMPONENT_TYPE>/<COMPONENT_NAME>/command`.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            },
            "command_retain": { "type": "boolean" },
            "name": {
              "markdownDescription": "**string**: The name to use for the MQTT Component.\n\n\n\n*See also: [MQTT Component Base Configuration](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "All components in ESPHome that do some sort of communication through MQTT can have some overrides for specific options.\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#mqtt-component-base-configuration)*"
    },
    "CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA": {
      "properties": {
        "topic": { "type": "string" },
        "payload_available": { "type": "string", "default": "online" },
        "payload_not_available": { "type": "string", "default": "offline" }
      },
      "type": ["object", "null"],
      "required_": ["topic"]
    },
    "CONFIG.MQTT_COMPONENT_SCHEMA": {
      "properties": {
        "retain": { "type": "boolean" },
        "discovery": { "type": "boolean" },
        "state_topic": { "type": "string" },
        "availability": {
          "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_AVAILABILITY_SCHEMA"
        }
      },
      "type": ["object", "null"]
    },
    "POLLING_COMPONENT": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": {
            "update_interval": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "60s"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this pipsolar component.\n\n\n\n*See also: [PipSolar PV Inverter](https://esphome.io/components/pipsolar.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "The uart Bus ID\n\n\n\n*See also: [PipSolar PV Inverter](https://esphome.io/components/pipsolar.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA": {
      "properties": {
        "repeat": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Optionally set the code to be repeated a number of times. Defaults to sending the code only once.\n  * **times** (int): The number of times to repeat the code.\n  \n  * **wait_time** ([Time](https://esphome.io/guides/configuration-types.html#config-time)): The time to wait between repeats.\n  \n  \n\n\n\n*See also: [Remote Transmitter Actions](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "Remote transmitters support a number of [actions](https://esphome.io/guides/automations.html#config-action) that can be used to send remote codes. All supported protocols are listed below. All actions additionally have these configuration variables:\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#remote-transmitter-actions)*"
    },
    "REMOTE_BASE.COOLIX_SCHEMA": {
      "properties": { "data": { "type": "string" } },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "REMOTE_BASE.DISH_SCHEMA": {
      "properties": {
        "address": { "type": "number", "default": 1 },
        "command": { "type": "number" }
      },
      "type": ["object", "null"],
      "required_": ["command"]
    },
    "REMOTE_BASE.LG_SCHEMA": {
      "properties": {
        "data": { "type": "string" },
        "nbits": { "enum": [28, 32] }
      },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "REMOTE_BASE.MIDEA_SCHEMA-code[]": { "type": "number" },
    "REMOTE_BASE.MIDEA_SCHEMA": {
      "properties": {
        "code": {
          "type": "array",
          "items": { "$ref": "#/definitions/REMOTE_BASE.MIDEA_SCHEMA-code[]" }
        }
      },
      "type": ["object", "null"],
      "required_": ["code"]
    },
    "REMOTE_BASE.NEC_SCHEMA": {
      "properties": {
        "address": { "type": "string" },
        "command": { "type": "string" }
      },
      "type": ["object", "null"],
      "required_": ["address", "command"]
    },
    "REMOTE_BASE.NEXA_SCHEMA": {
      "properties": {
        "device": { "type": "string" },
        "group": { "type": "string" },
        "state": { "type": "string" },
        "channel": { "type": "string" },
        "level": { "type": "string" }
      },
      "type": ["object", "null"],
      "required_": ["device", "group", "state", "channel", "level"]
    },
    "REMOTE_BASE.PANASONIC_SCHEMA": {
      "properties": {
        "address": { "type": "string" },
        "command": { "type": "string" }
      },
      "type": ["object", "null"],
      "required_": ["address", "command"]
    },
    "REMOTE_BASE.PIONEER_SCHEMA": {
      "properties": {
        "rc_code_1": { "type": "string" },
        "rc_code_2": { "type": "string", "default": "0" }
      },
      "type": ["object", "null"],
      "required_": ["rc_code_1"]
    },
    "REMOTE_BASE.PRONTO_SCHEMA": {
      "properties": { "data": { "type": "string" } },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "REMOTE_BASE.RAW_SCHEMA-code[]": {
      "type": ["object", "null"],
      "properties": {
        "days": { "type": "number" },
        "hours": { "type": "number" },
        "minutes": { "type": "number" },
        "seconds": { "type": "number" },
        "milliseconds": { "type": "number" },
        "microseconds": { "type": "number" }
      }
    },
    "REMOTE_BASE.RAW_SCHEMA": {
      "properties": {
        "code": {
          "type": "array",
          "items": { "$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA-code[]" }
        }
      },
      "type": ["object", "null"],
      "required_": ["code"]
    },
    "REMOTE_BASE.RC5_SCHEMA": {
      "properties": {
        "address": { "type": "string" },
        "command": { "type": "string" }
      },
      "type": ["object", "null"],
      "required_": ["address", "command"]
    },
    "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]": { "type": "number" },
    "REMOTE_BASE.RC_SWITCH_RAW_SCHEMA": {
      "properties": {
        "code": { "type": ["null", "object", "string", "array", "number"] },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "required_": ["pulse_length"],
          "default": 1
        }
      },
      "type": ["object", "null"],
      "required_": ["code"]
    },
    "REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat": {
      "properties": {
        "times": { "type": ["null", "object", "string", "array", "number"] },
        "wait_time": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "0us"
        }
      },
      "type": ["object", "null"],
      "required_": ["times"]
    },
    "REMOTE_BASE.RC_SWITCH_TRANSMITTER": {
      "properties": {
        "repeat": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER-repeat"
        }
      },
      "type": ["object", "null"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA": {
      "properties": {
        "group": { "type": ["null", "object", "string", "array", "number"] },
        "device": { "type": ["null", "object", "string", "array", "number"] },
        "state": { "type": "boolean" },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "required_": ["pulse_length"],
          "default": 1
        }
      },
      "type": ["object", "null"],
      "required_": ["group", "device", "state"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA": {
      "properties": {
        "address": { "type": "number" },
        "channel": { "type": "number" },
        "state": { "type": "boolean" },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "required_": ["pulse_length"],
          "default": 1
        }
      },
      "type": ["object", "null"],
      "required_": ["address", "channel", "state"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA": {
      "properties": {
        "family": {
          "enum": [
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p"
          ]
        },
        "group": { "type": "number" },
        "device": { "type": "number" },
        "state": { "type": "boolean" },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "required_": ["pulse_length"],
          "default": 1
        }
      },
      "type": ["object", "null"],
      "required_": ["family", "group", "device", "state"]
    },
    "REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA": {
      "properties": {
        "group": { "enum": ["a", "b", "c", "d"] },
        "device": { "type": "number" },
        "state": { "type": "boolean" },
        "protocol": {
          "type": ["object", "null"],
          "properties": {
            "pulse_length": { "type": "number" },
            "sync": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 31]
            },
            "zero": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [1, 3]
            },
            "one": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
              },
              "default": [3, 1]
            },
            "inverted": { "type": "boolean", "default": false }
          },
          "required_": ["pulse_length"],
          "default": 1
        }
      },
      "type": ["object", "null"],
      "required_": ["group", "device", "state"]
    },
    "REMOTE_BASE.SAMSUNG_SCHEMA": {
      "properties": {
        "data": { "type": "string" },
        "nbits": { "type": "number", "default": 32 }
      },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "REMOTE_BASE.SONY_SCHEMA": {
      "properties": {
        "data": { "type": "string" },
        "nbits": { "enum": [12, 15, 20] }
      },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "REMOTE_BASE.TOSHIBAAC_SCHEMA": {
      "properties": {
        "rc_code_1": { "type": "string" },
        "rc_code_2": { "type": "string", "default": "0" }
      },
      "type": ["object", "null"],
      "required_": ["rc_code_1"]
    },
    "AUTOMATION.AUTOMATION_SCHEMA": {
      "properties": {
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["then"]
    },
    "automation.ACTION_REGISTRY-delay": {
      "type": "object",
      "properties": {
        "delay": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action delays the execution of the next action in the action list by a specified time period.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#delay-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-if": {
      "type": "object",
      "properties": {
        "if": {
          "properties": {
            "condition": {
              "$ref": "#/definitions/condition_list",
              "markdownDescription": "**[All Conditions](https://esphome.io/guides/automations.html#config-condition)**: The condition to check which branch to take. See [Conditions](https://esphome.io/guides/automations.html#config-condition).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            },
            "then": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to perform if the condition evaluates to true. Defaults to doing nothing.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            },
            "else": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to perform if the condition evaluates to false. Defaults to doing nothing.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["condition"],
          "markdownDescription": "This action first evaluated a certain condition (`if:`) and then either executes the `then:` branch or the `else:` branch depending on the output of the condition.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#if-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-while": {
      "type": "object",
      "properties": {
        "while": {
          "properties": {
            "condition": {
              "$ref": "#/definitions/condition_list",
              "markdownDescription": "The condition to check whether to execute. See [Conditions](https://esphome.io/guides/automations.html#config-condition).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
            },
            "then": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to perform until the condition evaluates to false.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["condition", "then"],
          "markdownDescription": "This action is similar to the [if](https://esphome.io/guides/automations.html#if-action) Action. The `while` action executes a block until a given condition evaluates to false.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#while-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-repeat": {
      "type": "object",
      "properties": {
        "repeat": {
          "properties": {
            "count": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The number of times the action should be repeated.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#repeat-action)*"
            },
            "then": {
              "anyOf": [
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                }
              ],
              "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action to repeat.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#repeat-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["count", "then"],
          "markdownDescription": "This action allows you to repeat a block a given number of times. For example, the automation below will flash the light five times.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#repeat-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-wait_until": {
      "type": "object",
      "properties": {
        "wait_until": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action allows your automations to wait until a condition evaluates to true. (So this is just a shorthand way of writing a `while` action with an empty `then` block.)\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#wait-until-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This action executes an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda)).\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#lambda-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-component.update": {
      "type": "object",
      "properties": {
        "component.update": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-logger.log": {
      "type": "object",
      "properties": {
        "logger.log": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "Print a formatted message to the logs.\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#logger-log-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mqtt.publish": {
      "type": "object",
      "properties": {
        "mqtt.publish": {
          "properties": {
            "topic": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "payload": { "type": "string" },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0
            },
            "retain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "required_": ["topic", "payload"],
          "markdownDescription": "Publish an MQTT message on a topic using this action in automations.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mqtt.publish_json": {
      "type": "object",
      "properties": {
        "mqtt.publish_json": {
          "properties": {
            "topic": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "payload": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "qos": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0
            },
            "retain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "required_": ["topic", "payload"],
          "markdownDescription": "Publish a JSON-formatted MQTT message on a topic using this action in automations.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-publish-json-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_coolix": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_coolix": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_dish": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_dish": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 1
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["command"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_jvc": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_jvc": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_lg": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_lg": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "nbits": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 28
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_nec": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_nec": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["address", "command"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_pioneer": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_pioneer": {
          "allOf": [
            {
              "properties": {
                "rc_code_1": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "rc_code_2": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                }
              },
              "type": ["object", "null"],
              "required_": ["rc_code_1"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_pronto": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_pronto": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_sony": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_sony": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "nbits": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 12
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_raw": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_raw": {
          "allOf": [
            {
              "properties": {
                "code": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "carrier_frequency": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": "0Hz"
                }
              },
              "type": ["object", "null"],
              "required_": ["code"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc5": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc5": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["address", "command"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_raw": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_raw": {
          "properties": {
            "code": { "type": ["null", "object", "string", "array", "number"] },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 1
            },
            "repeat": {
              "type": ["null", "object", "string", "array", "number"],
              "default": { "times": 5 }
            }
          },
          "type": ["object", "null"],
          "required_": ["code"]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_a": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_a": {
          "properties": {
            "group": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "device": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 1
            },
            "repeat": {
              "type": ["null", "object", "string", "array", "number"],
              "default": { "times": 5 }
            }
          },
          "type": ["object", "null"],
          "required_": ["group", "device", "state"]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_b": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_b": {
          "properties": {
            "address": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "channel": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 1
            },
            "repeat": {
              "type": ["null", "object", "string", "array", "number"],
              "default": { "times": 5 }
            }
          },
          "type": ["object", "null"],
          "required_": ["address", "channel", "state"]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_c": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_c": {
          "properties": {
            "family": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "group": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "device": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 1
            },
            "repeat": {
              "type": ["null", "object", "string", "array", "number"],
              "default": { "times": 5 }
            }
          },
          "type": ["object", "null"],
          "required_": ["family", "group", "device", "state"]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_d": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_rc_switch_type_d": {
          "properties": {
            "group": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "device": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 1
            },
            "repeat": {
              "type": ["null", "object", "string", "array", "number"],
              "default": { "times": 5 }
            }
          },
          "type": ["object", "null"],
          "required_": ["group", "device", "state"]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_samsung": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "nbits": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 32
                }
              },
              "type": ["object", "null"],
              "required_": ["data"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung36": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_samsung36": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["address", "command"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_toshiba_ac": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_toshiba_ac": {
          "allOf": [
            {
              "properties": {
                "rc_code_1": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "rc_code_2": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                }
              },
              "type": ["object", "null"],
              "required_": ["rc_code_1"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_panasonic": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_panasonic": {
          "allOf": [
            {
              "properties": {
                "address": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "command": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["address", "command"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_nexa": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_nexa": {
          "allOf": [
            {
              "properties": {
                "device": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "group": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "state": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "channel": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "level": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["device", "group", "state", "channel", "level"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-remote_transmitter.transmit_midea": {
      "type": "object",
      "properties": {
        "remote_transmitter.transmit_midea": {
          "allOf": [
            {
              "properties": {
                "code": {
                  "type": ["null", "object", "string", "array", "number"]
                }
              },
              "type": ["object", "null"],
              "required_": ["code"]
            },
            {
              "$ref": "#/definitions/REMOTE_BASE.BASE_REMOTE_TRANSMITTER_SCHEMA"
            }
          ]
        }
      }
    },
    "uart.write": {
      "properties": {
        "data": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "automation.ACTION_REGISTRY-uart.write": {
      "type": "object",
      "properties": {
        "uart.write": {
          "anyOf": [
            { "$ref": "#/definitions/uart.write" },
            { "type": "array", "items": { "$ref": "#/definitions/uart.write" } }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) sends a defined UART signal to the given UART bus.\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#uart-write-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-light.toggle": {
      "type": "object",
      "properties": {
        "light.toggle": {
          "properties": {
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-light.control": {
      "type": "object",
      "properties": {
        "light.control": {
          "properties": {
            "color_mode": {
              "enum": [
                "ON_OFF",
                "BRIGHTNESS",
                "WHITE",
                "COLOR_TEMPERATURE",
                "COLD_WARM_WHITE",
                "RGB",
                "RGB_WHITE",
                "RGB_COLOR_TEMPERATURE",
                "RGB_COLD_WARM_WHITE"
              ]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "flash_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "effect": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "red": { "type": ["null", "object", "string", "array", "number"] },
            "green": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "blue": { "type": ["null", "object", "string", "array", "number"] },
            "white": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_temperature": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "cold_white": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "warm_white": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-light.turn_on": {
      "type": "object",
      "properties": {
        "light.turn_on": {
          "properties": {
            "color_mode": {
              "enum": [
                "ON_OFF",
                "BRIGHTNESS",
                "WHITE",
                "COLOR_TEMPERATURE",
                "COLD_WARM_WHITE",
                "RGB",
                "RGB_WHITE",
                "RGB_COLOR_TEMPERATURE",
                "RGB_COLD_WARM_WHITE"
              ]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "flash_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "effect": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "red": { "type": ["null", "object", "string", "array", "number"] },
            "green": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "blue": { "type": ["null", "object", "string", "array", "number"] },
            "white": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_temperature": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "cold_white": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "warm_white": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-light.turn_off": {
      "type": "object",
      "properties": {
        "light.turn_off": {
          "properties": {
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "state": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-light.dim_relative": {
      "type": "object",
      "properties": {
        "light.dim_relative": {
          "properties": {
            "relative_brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "transition_length": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["relative_brightness"]
        }
      }
    },
    "automation.ACTION_REGISTRY-light.addressable_set": {
      "type": "object",
      "properties": {
        "light.addressable_set": {
          "properties": {
            "range_from": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "range_to": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color_brightness": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "red": { "type": ["null", "object", "string", "array", "number"] },
            "green": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "blue": { "type": ["null", "object", "string", "array", "number"] },
            "white": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show": {
      "type": "object",
      "properties": {
        "display.page.show": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show_next": {
      "type": "object",
      "properties": {
        "display.page.show_next": {
          "properties": {},
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-display.page.show_previous": {
      "type": "object",
      "properties": {
        "display.page.show_previous": {
          "properties": {},
          "type": ["object", "null"]
        }
      }
    },
    "homeassistant.service-data": {
      "properties": {},
      "type": ["object", "null"]
    },
    "homeassistant.service-variables": {
      "properties": {},
      "type": ["object", "null"]
    },
    "automation.ACTION_REGISTRY-homeassistant.service": {
      "type": "object",
      "properties": {
        "homeassistant.service": {
          "properties": {
            "service": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "data": { "$ref": "#/definitions/homeassistant.service-data" },
            "data_template": {
              "$ref": "#/definitions/homeassistant.service-data"
            },
            "variables": {
              "$ref": "#/definitions/homeassistant.service-variables"
            }
          },
          "type": ["object", "null"],
          "required_": ["service"]
        }
      }
    },
    "automation.ACTION_REGISTRY-homeassistant.event": {
      "type": "object",
      "properties": {
        "homeassistant.event": {
          "properties": {
            "event": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "data": { "$ref": "#/definitions/homeassistant.service-data" },
            "data_template": {
              "$ref": "#/definitions/homeassistant.service-data"
            },
            "variables": { "$ref": "#/definitions/homeassistant.service-data" }
          },
          "type": ["object", "null"],
          "required_": ["event"]
        }
      }
    },
    "homeassistant.tag_scanned": {
      "properties": {
        "tag": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["tag"]
    },
    "automation.ACTION_REGISTRY-homeassistant.tag_scanned": {
      "type": "object",
      "properties": {
        "homeassistant.tag_scanned": {
          "anyOf": [
            { "$ref": "#/definitions/homeassistant.tag_scanned" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/homeassistant.tag_scanned" }
            }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-button.press": {
      "type": "object",
      "properties": {
        "button.press": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "canbus.send": {
      "properties": {
        "can_id": { "type": "number" },
        "use_extended_id": { "type": "boolean", "default": false },
        "data": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**binary data**: Data to transmit, up to 8 bytes or characters are supported by can bus per frame.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["data"]
    },
    "automation.ACTION_REGISTRY-canbus.send": {
      "type": "object",
      "properties": {
        "canbus.send": {
          "anyOf": [
            { "$ref": "#/definitions/canbus.send" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/canbus.send" }
            }
          ],
          "markdownDescription": "The can bus can transmit frames by means of the `canbus.send` action. There are several forms to use it:\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#canbus-send-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.control": {
      "type": "object",
      "properties": {
        "climate.control": {
          "$ref": "#/definitions/climate.CLIMATE_CONTROL_ACTION_SCHEMA"
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.open": {
      "type": "object",
      "properties": {
        "cover.open": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-cover.close": {
      "type": "object",
      "properties": {
        "cover.close": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-cover.stop": {
      "type": "object",
      "properties": {
        "cover.stop": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-cover.toggle": {
      "type": "object",
      "properties": {
        "cover.toggle": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-cover.control": {
      "type": "object",
      "properties": {
        "cover.control": {
          "$ref": "#/definitions/cover.COVER_CONTROL_ACTION_SCHEMA"
        }
      }
    },
    "automation.ACTION_REGISTRY-deep_sleep.enter": {
      "type": "object",
      "properties": {
        "deep_sleep.enter": {
          "properties": {
            "sleep_duration": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-deep_sleep.prevent": {
      "type": "object",
      "properties": {
        "deep_sleep.prevent": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-fan.toggle": {
      "type": "object",
      "properties": {
        "fan.toggle": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-fan.turn_off": {
      "type": "object",
      "properties": {
        "fan.turn_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-fan.turn_on": {
      "type": "object",
      "properties": {
        "fan.turn_on": {
          "properties": {
            "oscillating": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "speed": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "direction": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-fan.cycle_speed": {
      "type": "object",
      "properties": {
        "fan.cycle_speed": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-number.set": {
      "type": "object",
      "properties": {
        "number.set": {
          "properties": {
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["value"],
          "markdownDescription": "You can also set the number for the template number from elsewhere in your YAML file with the [number.set Action](https://esphome.io/components/number/index.html#number-set-action).\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#number-set-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.turn_on": {
      "type": "object",
      "properties": {
        "switch.turn_on": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.turn_off": {
      "type": "object",
      "properties": {
        "switch.turn_off": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.toggle": {
      "type": "object",
      "properties": {
        "switch.toggle": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_next": {
      "type": "object",
      "properties": {
        "dfplayer.play_next": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Starts playback of next track or skips to the next track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-next-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_previous": {
      "type": "object",
      "properties": {
        "dfplayer.play_previous": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Plays the previously played track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-previous-action)*"
        }
      }
    },
    "dfplayer.play": {
      "properties": {
        "file": { "type": ["null", "object", "string", "array", "number"] },
        "loop": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["file"]
    },
    "automation.ACTION_REGISTRY-dfplayer.play": {
      "type": "object",
      "properties": {
        "dfplayer.play": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.play" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.play" }
            }
          ],
          "markdownDescription": "Plays a track.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.play_folder": {
      "type": "object",
      "properties": {
        "dfplayer.play_folder": {
          "properties": {
            "folder": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "file": { "type": ["null", "object", "string", "array", "number"] },
            "loop": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["folder"],
          "markdownDescription": "Plays files inside numbered folders, folders must be numbered from 1 and with leading zeros. Like `01`, `02`, \u2026 etc. Files inside the folders must be numbered with two leading zeros, like `001.mp3`, `002.mp3`, \u2026 etc. Folder numbers can range from 1 to 99 and file name from 1 to 255 or folder number from 1 to 10 and file number from 1 to 1000.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-play-folder-action)*"
        }
      }
    },
    "dfplayer.set_device": {
      "properties": { "device": { "enum": ["USB", "TF_CARD"] } },
      "type": ["object", "null"],
      "required_": ["device"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_device": {
      "type": "object",
      "properties": {
        "dfplayer.set_device": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_device" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_device" }
            }
          ],
          "markdownDescription": "Changes the device in use. Valid values are `TF_CARD` and `USB`.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-device-action)*"
        }
      }
    },
    "dfplayer.set_volume": {
      "properties": {
        "volume": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["volume"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_volume": {
      "type": "object",
      "properties": {
        "dfplayer.set_volume": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_volume" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_volume" }
            }
          ],
          "markdownDescription": "Changes volume.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-volume-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.volume_up": {
      "type": "object",
      "properties": {
        "dfplayer.volume_up": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Turn volume up.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-volume-up-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.volume_down": {
      "type": "object",
      "properties": {
        "dfplayer.volume_down": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Turn volume down.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-volume-down-action)*"
        }
      }
    },
    "dfplayer.set_eq": {
      "properties": {
        "eq_preset": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["eq_preset"]
    },
    "automation.ACTION_REGISTRY-dfplayer.set_eq": {
      "type": "object",
      "properties": {
        "dfplayer.set_eq": {
          "anyOf": [
            { "$ref": "#/definitions/dfplayer.set_eq" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/dfplayer.set_eq" }
            }
          ],
          "markdownDescription": "Changes audio equalization preset.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-set-eq-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.sleep": {
      "type": "object",
      "properties": {
        "dfplayer.sleep": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Enters sleep mode. Playback is stopped and the action `dfplayer.set_device: TF_CARD` should be send for playback to be enabled again.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-sleep-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.reset": {
      "type": "object",
      "properties": {
        "dfplayer.reset": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Module reset.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-reset-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.start": {
      "type": "object",
      "properties": {
        "dfplayer.start": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Starts playing a track or resumes paused playback.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-start-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.pause": {
      "type": "object",
      "properties": {
        "dfplayer.pause": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Pauses playback, playback can be resumed from the same position with `dfplayer.start`.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-pause-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.stop": {
      "type": "object",
      "properties": {
        "dfplayer.stop": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Stops playback.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-stop-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-dfplayer.random": {
      "type": "object",
      "properties": {
        "dfplayer.random": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Randomly plays all tracks.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-random-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.turn_on": {
      "type": "object",
      "properties": {
        "output.turn_on": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This action turns the output with the given ID on when executed.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.turn_off": {
      "type": "object",
      "properties": {
        "output.turn_off": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This action turns the output with the given ID off when executed.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-turn-off-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.set_level": {
      "type": "object",
      "properties": {
        "output.set_level": {
          "properties": {
            "level": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["level"],
          "markdownDescription": "This action sets the float output to the given level when executed. Note: This only works with floating point outputs like ESP8266 PWM or LEDC.\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#output-set-level-action)*"
        }
      }
    },
    "fingerprint_grow.enroll": {
      "properties": {
        "finger_id": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "num_scans": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["finger_id"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.enroll": {
      "type": "object",
      "properties": {
        "fingerprint_grow.enroll": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.enroll" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.enroll" }
            }
          ],
          "markdownDescription": "Starts the fingerprint enrollment process on the slot number defined.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-enroll-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.cancel_enroll": {
      "type": "object",
      "properties": {
        "fingerprint_grow.cancel_enroll": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Cancels the current fingerprint enrollment process. Triggers the `on_enrollment_failed` trigger.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-cancel-enroll-action)*"
        }
      }
    },
    "fingerprint_grow.delete": {
      "properties": {
        "finger_id": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["finger_id"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.delete": {
      "type": "object",
      "properties": {
        "fingerprint_grow.delete": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.delete" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.delete" }
            }
          ],
          "markdownDescription": "Removes the enrolled fingerprint from the slot number defined.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.delete_all": {
      "type": "object",
      "properties": {
        "fingerprint_grow.delete_all": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Removes all enrolled fingerprints.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-delete-all-action)*"
        }
      }
    },
    "fingerprint_grow.led_control": {
      "properties": {
        "state": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["state"]
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.led_control": {
      "type": "object",
      "properties": {
        "fingerprint_grow.led_control": {
          "anyOf": [
            { "$ref": "#/definitions/fingerprint_grow.led_control" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/fingerprint_grow.led_control" }
            }
          ],
          "markdownDescription": "Turns on or off the LED on the reader. Only available on select models. If you have the R503 use [fingerprint_grow.aura_led_control Action](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control) instead.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-led-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fingerprint_grow.aura_led_control": {
      "type": "object",
      "properties": {
        "fingerprint_grow.aura_led_control": {
          "properties": {
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "speed": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "color": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "count": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state", "speed", "color", "count"],
          "markdownDescription": "Controls the Aura LED on the reader. Only available on select models.\n\n*See also: [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-aura-led-control-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-globals.set": {
      "type": "object",
      "properties": {
        "globals.set": {
          "properties": {
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["value"]
        }
      }
    },
    "simple_automation": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        { "$ref": "#/definitions/AUTOMATION.AUTOMATION_SCHEMA" }
      ]
    },
    "automation.ACTION_REGISTRY-http_request.send": {
      "type": "object",
      "properties": {
        "http_request.send": {
          "allOf": [
            {
              "properties": {
                "url": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "headers": { "properties": {}, "type": ["object", "null"] },
                "verify_ssl": { "type": "boolean", "default": true },
                "on_response": { "$ref": "#/definitions/simple_automation" },
                "method": {
                  "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
                  "markdownDescription": "**string**: HTTP method to use (`GET`, `POST`, `PUT`, `DELETE`, `PATCH`).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-send-action)*"
                },
                "body": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "json": { "properties": {}, "type": ["object", "null"] }
              },
              "type": ["object", "null"],
              "required_": ["url"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-send-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-http_request.post": {
      "type": "object",
      "properties": {
        "http_request.post": {
          "allOf": [
            {
              "properties": {
                "url": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "headers": { "properties": {}, "type": ["object", "null"] },
                "verify_ssl": { "type": "boolean", "default": true },
                "on_response": { "$ref": "#/definitions/simple_automation" },
                "method": { "enum": ["POST"] },
                "body": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: A HTTP body string to send with request.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
                },
                "json": {
                  "properties": {},
                  "type": ["object", "null"],
                  "markdownDescription": "**mapping**: A HTTP body in JSON format. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable). See [Examples](https://esphome.io/components/http_request.html#http-request-examples).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["url"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a POST request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-post-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-http_request.get": {
      "type": "object",
      "properties": {
        "http_request.get": {
          "allOf": [
            {
              "properties": {
                "url": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: URL to send request.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "headers": {
                  "properties": {},
                  "type": ["object", "null"],
                  "markdownDescription": "**mapping**: Map of HTTP headers. Values are [templatable](https://esphome.io/guides/automations.html#config-templatable).\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "verify_ssl": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "**boolean**: Verify the SSL certificate of the endpoint. Defaults to `true`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "on_response": {
                  "$ref": "#/definitions/simple_automation",
                  "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the request is finished.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
                },
                "method": { "enum": ["GET"] }
              },
              "type": ["object", "null"],
              "required_": ["url"]
            }
          ],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) sends a GET request.\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request-get-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-lock.open": {
      "type": "object",
      "properties": {
        "lock.open": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-lock.lock": {
      "type": "object",
      "properties": {
        "lock.lock": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-lock.unlock": {
      "type": "object",
      "properties": {
        "lock.unlock": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_code": {
      "type": "object",
      "properties": {
        "rf_bridge.send_code": {
          "properties": {
            "sync": { "type": ["null", "object", "string", "array", "number"] },
            "low": { "type": ["null", "object", "string", "array", "number"] },
            "high": { "type": ["null", "object", "string", "array", "number"] },
            "code": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["sync", "low", "high", "code"],
          "markdownDescription": "Send an RF code using this action in automations.\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-code-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.learn": {
      "type": "object",
      "properties": {
        "rf_bridge.learn": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to learn new protocol timings using this action in automations. A new code with timings will be returned to [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received)\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-learn-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.start_advanced_sniffing": {
      "type": "object",
      "properties": {
        "rf_bridge.start_advanced_sniffing": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to listen for the advanced/extra protocols defined in the portisch firmware. The decoded codes with length and protocol will be returned to [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-advanced-code-received)\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-start-advanced-sniffing-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.stop_advanced_sniffing": {
      "type": "object",
      "properties": {
        "rf_bridge.stop_advanced_sniffing": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to stop listening for the advanced/extra protocols defined in the portisch firmware.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-stop-advanced-sniffing-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.start_bucket_sniffing": {
      "type": "object",
      "properties": {
        "rf_bridge.start_bucket_sniffing": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "Tell the RF Bridge to dump raw sniffing data. Useful for getting codes for unsupported protocols. The raw data will be available in the log and can later be used with [rf_bridge.send_raw Action](https://esphome.io/components/rf_bridge.html#rf-bridge-send-raw-action) action.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-start-bucket-sniffing-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_advanced_code": {
      "type": "object",
      "properties": {
        "rf_bridge.send_advanced_code": {
          "properties": {
            "length": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "protocol": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "code": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["length", "protocol", "code"],
          "markdownDescription": "Send an  RF code using this action in automations.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-advanced-code-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.send_raw": {
      "type": "object",
      "properties": {
        "rf_bridge.send_raw": {
          "properties": {
            "raw": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["raw"],
          "markdownDescription": "Send a raw command to the onboard EFM8BB1 chip. You can see a list of available commands and format in the [Portisch Wiki](https://github.com/Portisch/RF-Bridge-EFM8BB1/wiki/Commands)\n\n*See also: [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-send-raw-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-rf_bridge.beep": {
      "type": "object",
      "properties": {
        "rf_bridge.beep": {
          "properties": {
            "duration": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["duration"],
          "markdownDescription": "Activate the internal buzzer to make a beep.\n\n*See also: [on_advanced_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-beep-action)*"
        }
      }
    },
    "rtttl.play": {
      "properties": {
        "rtttl": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["rtttl"]
    },
    "automation.ACTION_REGISTRY-rtttl.play": {
      "type": "object",
      "properties": {
        "rtttl.play": {
          "anyOf": [
            { "$ref": "#/definitions/rtttl.play" },
            { "type": "array", "items": { "$ref": "#/definitions/rtttl.play" } }
          ]
        }
      }
    },
    "automation.ACTION_REGISTRY-rtttl.stop": {
      "type": "object",
      "properties": {
        "rtttl.stop": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-script.execute": {
      "type": "object",
      "properties": {
        "script.execute": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-script.stop": {
      "type": "object",
      "properties": {
        "script.stop": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-script.wait": {
      "type": "object",
      "properties": {
        "script.wait": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.ACTION_REGISTRY-select.set": {
      "type": "object",
      "properties": {
        "select.set": {
          "properties": {
            "option": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["option"],
          "markdownDescription": "You can also set an option for the template select from elsewhere in your YAML file with the [select.set Action](https://esphome.io/components/select/index.html#select-set-action).\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#select-set-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-servo.write": {
      "type": "object",
      "properties": {
        "servo.write": {
          "properties": {
            "level": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["level"]
        }
      }
    },
    "automation.ACTION_REGISTRY-servo.detach": {
      "type": "object",
      "properties": {
        "servo.detach": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-sim800l.send_sms": {
      "type": "object",
      "properties": {
        "sim800l.send_sms": {
          "properties": {
            "recipient": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "message": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["recipient", "message"],
          "markdownDescription": "Send a SMS message to a phone recipient using this action in automations.\n\n*See also: [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-send-sms-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sim800l.dial": {
      "type": "object",
      "properties": {
        "sim800l.dial": {
          "properties": {
            "recipient": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["recipient"],
          "markdownDescription": "Dial to a phone recipient using this action in automations.\n\n*See also: [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-dial-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_target": {
      "type": "object",
      "properties": {
        "stepper.set_target": {
          "properties": {
            "target": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "required_": ["target"],
          "markdownDescription": "To use your stepper motor in [automations](https://esphome.io/guides/automations.html#automation) or templates, you can use this action to set the target position (in steps). The stepper will always run towards the target position and stop once it has reached the target.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-target-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.report_position": {
      "type": "object",
      "properties": {
        "stepper.report_position": {
          "properties": {
            "position": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: The position to report in steps.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["position"],
          "markdownDescription": "All steppers start out with a target and current position of `0` on boot. However, if you for example want to home a stepper motor, it can be useful to **report** the stepper where it is currently at.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-report-position-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_speed": {
      "type": "object",
      "properties": {
        "stepper.set_speed": {
          "properties": {
            "speed": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The speed in `steps/s` (steps per seconds) to drive the stepper at.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["speed"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to set the speed of a stepper at runtime.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-speed-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_acceleration": {
      "type": "object",
      "properties": {
        "stepper.set_acceleration": {
          "properties": {
            "acceleration": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The acceleration in `steps/s^2` (steps per seconds squared) to use when starting to move.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-acceleration-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-acceleration-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["acceleration"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to set the acceleration of a stepper at runtime.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-acceleration-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-stepper.set_deceleration": {
      "type": "object",
      "properties": {
        "stepper.set_deceleration": {
          "properties": {
            "deceleration": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The same as `acceleration`, but for when the motor is decelerating shortly before reaching the set position.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-deceleration-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the stepper.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-deceleration-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["deceleration"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to set the deceleration of a stepper at runtime.\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#stepper-set-deceleration-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-tm1651.turn_on": {
      "type": "object",
      "properties": {
        "tm1651.turn_on": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns on the LEDs.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-on-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-tm1651.turn_off": {
      "type": "object",
      "properties": {
        "tm1651.turn_off": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) turns off all the LEDs.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-turn-off-action)*"
        }
      }
    },
    "tm1651.set_level_percent": {
      "properties": {
        "level_percent": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: Level from 0 to 100\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["level_percent"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_level_percent": {
      "type": "object",
      "properties": {
        "tm1651.set_level_percent": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_level_percent" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_level_percent" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime. Automatically calculates input level in percentages to actual level for the display.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-percent-action)*"
        }
      }
    },
    "tm1651.set_level": {
      "properties": {
        "level": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: Level from 0 to 7\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["level"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_level": {
      "type": "object",
      "properties": {
        "tm1651.set_level": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_level" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_level" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) changes the level of the battery display at runtime.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-level-action)*"
        }
      }
    },
    "tm1651.set_brightness": {
      "properties": {
        "brightness": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), int**: There is three levels of brightness (`1`, `2` or `3`) from lowest to highest brightness.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the TM1651.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["brightness"]
    },
    "automation.ACTION_REGISTRY-tm1651.set_brightness": {
      "type": "object",
      "properties": {
        "tm1651.set_brightness": {
          "anyOf": [
            { "$ref": "#/definitions/tm1651.set_brightness" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/tm1651.set_brightness" }
            }
          ],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the brightness of the battery display at runtime.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-set-brightness-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-delay" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-if" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-while" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-repeat" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-wait_until" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-lambda" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-component.update" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-logger.log" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-mqtt.publish" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mqtt.publish_json"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_coolix"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_dish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_jvc"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_lg"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_nec"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_pioneer"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_pronto"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_sony"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_raw"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc5"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_raw"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_a"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_b"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_c"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_rc_switch_type_d"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_samsung36"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_toshiba_ac"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_panasonic"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_nexa"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-remote_transmitter.transmit_midea"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-uart.write" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-light.turn_off" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-light.dim_relative"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-light.addressable_set"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show_next"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-display.page.show_previous"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.service"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.event"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-homeassistant.tag_scanned"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-button.press" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-canbus.send" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.open" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.close" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.control" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-deep_sleep.enter" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-deep_sleep.prevent"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.toggle" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.cycle_speed" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-number.set" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.toggle" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_next"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_previous"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.play_folder"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_device"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_volume"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.volume_up"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.volume_down"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.set_eq" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.sleep" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.reset" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.start" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.pause" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-dfplayer.random" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.turn_off" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-output.set_level" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.enroll"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.cancel_enroll"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.delete"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.delete_all"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.led_control"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fingerprint_grow.aura_led_control"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-globals.set" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.send"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.post"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-http_request.get" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-lock.open" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-lock.lock" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-lock.unlock" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_code"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.learn" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.start_advanced_sniffing"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.stop_advanced_sniffing"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.start_bucket_sniffing"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_advanced_code"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.send_raw"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rf_bridge.beep" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rtttl.play" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-rtttl.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.execute" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.stop" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-script.wait" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-select.set" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-servo.write" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-servo.detach" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-sim800l.send_sms" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-sim800l.dial" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_target"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.report_position"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_speed"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_acceleration"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-stepper.set_deceleration"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.turn_on" },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.turn_off" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_level_percent"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_level" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-tm1651.set_brightness"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-binary_sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.follow_me"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.display_toggle"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.swing_step"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.beeper_on"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.beeper_off"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.power_on"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-midea_ac.power_off"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.reset_integral_term"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.autotune"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-climate.pid.set_control_parameters"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-cover.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-fan.hbridge.brake"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-lock.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-output.esp8266_pwm.set_frequency"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-output.ledc.set_frequency"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-output.pipsolar.set_level"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-cs5460a.restart" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.integration.reset"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.abc_disable"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.abc_enable" },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-mhz19.calibrate_zero"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-pulse_meter.set_total_pulses"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-pzemac.reset_energy"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.rotary_encoder.set_value"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_get_period"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_disable"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.abc_enable"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.background_calibration_result"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-senseair.background_calibration"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-switch.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-text_sensor.template.publish"
        },
        {
          "$ref": "#/definitions/automation.ACTION_REGISTRY-ds1307.write_time"
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY-ds1307.read_time" }
      ]
    },
    "automation.CONDITION_REGISTRY-and": {
      "type": "object",
      "properties": {
        "and": {
          "anyOf": [
            { "$ref": "#/definitions/automation.CONDITION_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-or": {
      "type": "object",
      "properties": {
        "or": {
          "anyOf": [
            { "$ref": "#/definitions/automation.CONDITION_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-not": {
      "type": "object",
      "properties": { "not": { "$ref": "#/definitions/condition_list" } }
    },
    "automation.CONDITION_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "This condition performs an arbitrary piece of C++ code (see [Lambda](https://esphome.io/guides/automations.html#config-lambda)) and can be used to create conditional flow in actions.\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#lambda-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-for": {
      "type": "object",
      "properties": {
        "for": {
          "allOf": [
            {
              "properties": {
                "time": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "condition": { "$ref": "#/definitions/condition_list" }
              },
              "type": ["object", "null"],
              "required_": ["time", "condition"]
            },
            { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-mqtt.connected": {
      "type": "object",
      "properties": {
        "mqtt.connected": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the MQTT client is currently connected to the MQTT broker.\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-connected-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-binary_sensor.is_on": {
      "type": "object",
      "properties": {
        "binary_sensor.is_on": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-binary_sensor.is_off": {
      "type": "object",
      "properties": {
        "binary_sensor.is_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-light.is_off": {
      "type": "object",
      "properties": {
        "light.is_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-light.is_on": {
      "type": "object",
      "properties": {
        "light.is_on": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "display.is_displaying_page": {
      "properties": {},
      "type": ["object", "null"]
    },
    "automation.CONDITION_REGISTRY-display.is_displaying_page": {
      "type": "object",
      "properties": {
        "display.is_displaying_page": {
          "anyOf": [
            { "$ref": "#/definitions/display.is_displaying_page" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/display.is_displaying_page" }
            }
          ]
        }
      }
    },
    "automation.CONDITION_REGISTRY-api.connected": {
      "type": "object",
      "properties": { "api.connected": { "type": "null" } }
    },
    "automation.CONDITION_REGISTRY-sensor.in_range": {
      "type": "object",
      "properties": {
        "sensor.in_range": {
          "properties": {
            "above": { "type": "number" },
            "below": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-fan.is_off": {
      "type": "object",
      "properties": {
        "fan.is_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-fan.is_on": {
      "type": "object",
      "properties": {
        "fan.is_on": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-number.in_range": {
      "type": "object",
      "properties": {
        "number.in_range": {
          "properties": {
            "above": { "type": "number" },
            "below": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-switch.is_on": {
      "type": "object",
      "properties": {
        "switch.is_on": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-switch.is_off": {
      "type": "object",
      "properties": {
        "switch.is_off": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-text_sensor.state": {
      "type": "object",
      "properties": {
        "text_sensor.state": {
          "properties": {
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-dfplayer.is_playing": {
      "type": "object",
      "properties": {
        "dfplayer.is_playing": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This Condition returns true while playback is active.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#dfplayer-is-playing-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-lock.is_locked": {
      "type": "object",
      "properties": {
        "lock.is_locked": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-lock.is_unlocked": {
      "type": "object",
      "properties": {
        "lock.is_unlocked": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-pn532.is_writing": {
      "type": "object",
      "properties": {
        "pn532.is_writing": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-rtttl.is_playing": {
      "type": "object",
      "properties": {
        "rtttl.is_playing": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.CONDITION_REGISTRY-script.is_running": {
      "type": "object",
      "properties": {
        "script.is_running": {
          "properties": {
            "id": { "type": "string", "id_type": "script::Script" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-time.has_time": {
      "type": "object",
      "properties": {
        "time.has_time": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if time has been set and is valid.\n\n*See also: [Time](https://esphome.io/components/time.html#time-has-time-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY-sun.is_above_horizon": {
      "type": "object",
      "properties": {
        "sun.is_above_horizon": {
          "properties": {
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-sun.is_below_horizon": {
      "type": "object",
      "properties": {
        "sun.is_below_horizon": {
          "properties": {
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333
            }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.CONDITION_REGISTRY-wifi.connected": {
      "type": "object",
      "properties": {
        "wifi.connected": {
          "type": "null",
          "markdownDescription": "This [Condition](https://esphome.io/guides/automations.html#config-condition) checks if the WiFi client is currently connected to a station.\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#wifi-connected-condition)*"
        }
      }
    },
    "automation.CONDITION_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-and" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-or" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-not" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-lambda" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-for" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-mqtt.connected"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-binary_sensor.is_on"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-binary_sensor.is_off"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-light.is_off" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-light.is_on" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-display.is_displaying_page"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-api.connected" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sensor.in_range"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-fan.is_off" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-fan.is_on" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-number.in_range"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-switch.is_on" },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-switch.is_off" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-text_sensor.state"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-dfplayer.is_playing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-lock.is_locked"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-lock.is_unlocked"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-pn532.is_writing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-rtttl.is_playing"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-script.is_running"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-time.has_time" },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sun.is_above_horizon"
        },
        {
          "$ref": "#/definitions/automation.CONDITION_REGISTRY-sun.is_below_horizon"
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY-wifi.connected" }
      ]
    },
    "binary_sensor.FILTER_REGISTRY-invert": {
      "type": "object",
      "properties": { "invert": { "type": "null" } }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_on_off": {
      "type": "object",
      "properties": {
        "delayed_on_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_on": {
      "type": "object",
      "properties": {
        "delayed_on": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-delayed_off": {
      "type": "object",
      "properties": {
        "delayed_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "autorepeat": {
      "properties": {
        "delay": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "1s"
        },
        "time_off": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "100ms"
        },
        "time_on": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "900ms"
        }
      },
      "type": ["object", "null"]
    },
    "binary_sensor.FILTER_REGISTRY-autorepeat": {
      "type": "object",
      "properties": {
        "autorepeat": {
          "anyOf": [
            { "$ref": "#/definitions/autorepeat" },
            { "type": "array", "items": { "$ref": "#/definitions/autorepeat" } }
          ]
        }
      }
    },
    "binary_sensor.FILTER_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      }
    },
    "binary_sensor.FILTER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-invert" },
        {
          "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_on_off"
        },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_on" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-delayed_off" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-autorepeat" },
        { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY-lambda" }
      ]
    },
    "light.EFFECTS_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": {
          "allOf": [
            {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "update_interval": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": "0ms"
                },
                "name": { "type": "string", "default": "Lambda" }
              },
              "type": ["object", "null"],
              "required_": ["lambda"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-automation": {
      "type": "object",
      "properties": {
        "automation": {
          "allOf": [
            {
              "properties": {
                "sequence": { "$ref": "#/definitions/simple_automation" },
                "name": { "type": "string", "default": "Automation" }
              },
              "type": ["object", "null"],
              "required_": ["sequence"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-pulse": {
      "type": "object",
      "properties": {
        "pulse": {
          "allOf": [
            {
              "properties": {
                "transition_length": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "7.5s"
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "10s"
                },
                "name": { "type": "string", "default": "Random" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-random": {
      "type": "object",
      "properties": {
        "random": {
          "allOf": [
            {
              "properties": {
                "transition_length": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "7.5s"
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "10s"
                },
                "name": { "type": "string", "default": "Random" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "strobe-colors": {
      "properties": {
        "state": { "type": "boolean", "default": true },
        "brightness": { "type": "string", "default": "1.0" },
        "color_mode": {
          "enum": [
            "ON_OFF",
            "BRIGHTNESS",
            "WHITE",
            "COLOR_TEMPERATURE",
            "COLD_WARM_WHITE",
            "RGB",
            "RGB_WHITE",
            "RGB_COLOR_TEMPERATURE",
            "RGB_COLD_WARM_WHITE"
          ]
        },
        "color_brightness": { "type": "string", "default": "1.0" },
        "red": { "type": "string", "default": "1.0" },
        "green": { "type": "string", "default": "1.0" },
        "blue": { "type": "string", "default": "1.0" },
        "white": { "type": "string", "default": "1.0" },
        "color_temperature": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "cold_white": { "type": "string", "default": "1.0" },
        "warm_white": { "type": "string", "default": "1.0" },
        "duration": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      },
      "type": ["object", "null"],
      "required_": ["duration"]
    },
    "light.EFFECTS_REGISTRY-strobe": {
      "type": "object",
      "properties": {
        "strobe": {
          "allOf": [
            {
              "properties": {
                "colors": {
                  "anyOf": [
                    { "$ref": "#/definitions/strobe-colors" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/strobe-colors" }
                    }
                  ]
                },
                "name": { "type": "string", "default": "Strobe" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-flicker": {
      "type": "object",
      "properties": {
        "flicker": {
          "allOf": [
            {
              "properties": {
                "alpha": { "type": "string", "default": "0.95" },
                "intensity": { "type": "string", "default": "0.015" },
                "name": { "type": "string", "default": "Flicker" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_lambda": {
      "type": "object",
      "properties": {
        "addressable_lambda": {
          "allOf": [
            {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"]
                },
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0ms"
                },
                "name": { "type": "string", "default": "Addressable Lambda" }
              },
              "type": ["object", "null"],
              "required_": ["lambda"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_rainbow": {
      "type": "object",
      "properties": {
        "addressable_rainbow": {
          "allOf": [
            {
              "properties": {
                "speed": { "type": "number", "default": 10 },
                "width": { "type": "number", "default": 50 },
                "name": { "type": "string", "default": "Rainbow" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "addressable_color_wipe-colors": {
      "properties": {
        "red": { "type": "string", "default": "1.0" },
        "green": { "type": "string", "default": "1.0" },
        "blue": { "type": "string", "default": "1.0" },
        "white": { "type": "string", "default": "1.0" },
        "random": { "type": "boolean", "default": false },
        "num_leds": { "type": "number" }
      },
      "type": ["object", "null"],
      "required_": ["num_leds"]
    },
    "light.EFFECTS_REGISTRY-addressable_color_wipe": {
      "type": "object",
      "properties": {
        "addressable_color_wipe": {
          "allOf": [
            {
              "properties": {
                "colors": {
                  "anyOf": [
                    { "$ref": "#/definitions/addressable_color_wipe-colors" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/addressable_color_wipe-colors"
                      }
                    }
                  ]
                },
                "add_led_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0.1s"
                },
                "reverse": { "type": "boolean", "default": false },
                "name": { "type": "string", "default": "Color Wipe" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_scan": {
      "type": "object",
      "properties": {
        "addressable_scan": {
          "allOf": [
            {
              "properties": {
                "move_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "0.1s"
                },
                "scan_width": { "type": "number", "default": 1 },
                "name": { "type": "string", "default": "Scan" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_twinkle": {
      "type": "object",
      "properties": {
        "addressable_twinkle": {
          "allOf": [
            {
              "properties": {
                "twinkle_probability": { "type": "string", "default": "5%" },
                "progress_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms"
                },
                "name": { "type": "string", "default": "Random Twinkle" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_random_twinkle": {
      "type": "object",
      "properties": {
        "addressable_random_twinkle": {
          "allOf": [
            {
              "properties": {
                "twinkle_probability": { "type": "string", "default": "5%" },
                "progress_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms"
                },
                "name": { "type": "string", "default": "Random Twinkle" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_fireworks": {
      "type": "object",
      "properties": {
        "addressable_fireworks": {
          "allOf": [
            {
              "properties": {
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "32ms"
                },
                "spark_probability": { "type": "string", "default": "10%" },
                "use_random_color": { "type": "boolean", "default": false },
                "fade_out_rate": { "type": "number", "default": 120 },
                "name": { "type": "string", "default": "Fireworks" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-addressable_flicker": {
      "type": "object",
      "properties": {
        "addressable_flicker": {
          "allOf": [
            {
              "properties": {
                "update_interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "16ms"
                },
                "intensity": { "type": "string", "default": "5%" },
                "name": { "type": "string", "default": "Addressable Flicker" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-adalight": {
      "type": "object",
      "properties": {
        "adalight": {
          "properties": { "name": { "type": "string", "default": "Adalight" } },
          "type": ["object", "null"]
        }
      }
    },
    "light.EFFECTS_REGISTRY-e131": {
      "type": "object",
      "properties": {
        "e131": {
          "allOf": [
            {
              "properties": {
                "universe": { "type": "number" },
                "channels": { "enum": ["MONO", "RGB", "RGBW"] },
                "name": { "type": "string", "default": "E1.31" }
              },
              "type": ["object", "null"],
              "required_": ["universe"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY-wled": {
      "type": "object",
      "properties": {
        "wled": {
          "allOf": [
            {
              "properties": {
                "port": { "type": "number", "default": 21324 },
                "name": { "type": "string", "default": "WLED" }
              },
              "type": ["object", "null"]
            }
          ]
        }
      }
    },
    "light.EFFECTS_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_lambda" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_rainbow" },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_color_wipe"
        },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_scan" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_twinkle" },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_random_twinkle"
        },
        {
          "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_fireworks"
        },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_flicker" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-adalight" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-e131" },
        { "$ref": "#/definitions/light.EFFECTS_REGISTRY-wled" }
      ]
    },
    "remote_base.BINARY_SENSOR_REGISTRY-coolix": {
      "type": "object",
      "properties": {
        "coolix": { "$ref": "#/definitions/REMOTE_BASE.COOLIX_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-dish": {
      "type": "object",
      "properties": {
        "dish": { "$ref": "#/definitions/REMOTE_BASE.DISH_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-jvc": {
      "type": "object",
      "properties": {
        "jvc": { "$ref": "#/definitions/REMOTE_BASE.COOLIX_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-lg": {
      "type": "object",
      "properties": { "lg": { "$ref": "#/definitions/REMOTE_BASE.LG_SCHEMA" } }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-nec": {
      "type": "object",
      "properties": {
        "nec": { "$ref": "#/definitions/REMOTE_BASE.NEC_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-pioneer": {
      "type": "object",
      "properties": {
        "pioneer": { "$ref": "#/definitions/REMOTE_BASE.PIONEER_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-pronto": {
      "type": "object",
      "properties": {
        "pronto": { "$ref": "#/definitions/REMOTE_BASE.PRONTO_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-sony": {
      "type": "object",
      "properties": {
        "sony": { "$ref": "#/definitions/REMOTE_BASE.SONY_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-raw": {
      "type": "object",
      "properties": {
        "raw": { "$ref": "#/definitions/REMOTE_BASE.RAW_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc5": {
      "type": "object",
      "properties": {
        "rc5": { "$ref": "#/definitions/REMOTE_BASE.RC5_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_raw": {
      "type": "object",
      "properties": {
        "rc_switch_raw": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_a": {
      "type": "object",
      "properties": {
        "rc_switch_type_a": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_A_SCHEMA"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_b": {
      "type": "object",
      "properties": {
        "rc_switch_type_b": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_B_SCHEMA"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_c": {
      "type": "object",
      "properties": {
        "rc_switch_type_c": {
          "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_C_SCHEMA"
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_d": {
      "type": "object",
      "properties": {
        "rc_switch_type_d": {
          "allOf": [
            { "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TYPE_D_SCHEMA" },
            { "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_TRANSMITTER" }
          ]
        }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-samsung": {
      "type": "object",
      "properties": {
        "samsung": { "$ref": "#/definitions/REMOTE_BASE.SAMSUNG_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-samsung36": {
      "type": "object",
      "properties": {
        "samsung36": { "$ref": "#/definitions/REMOTE_BASE.PANASONIC_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-toshiba_ac": {
      "type": "object",
      "properties": {
        "toshiba_ac": { "$ref": "#/definitions/REMOTE_BASE.TOSHIBAAC_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-panasonic": {
      "type": "object",
      "properties": {
        "panasonic": { "$ref": "#/definitions/REMOTE_BASE.PANASONIC_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-nexa": {
      "type": "object",
      "properties": {
        "nexa": { "$ref": "#/definitions/REMOTE_BASE.NEXA_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY-midea": {
      "type": "object",
      "properties": {
        "midea": { "$ref": "#/definitions/REMOTE_BASE.MIDEA_SCHEMA" }
      }
    },
    "remote_base.BINARY_SENSOR_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-coolix" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-dish" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-jvc" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-lg" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-nec" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-pioneer" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-pronto" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-sony" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-raw" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc5" },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_raw"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_a"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_b"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_c"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-rc_switch_type_d"
        },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-samsung" },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-samsung36"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-toshiba_ac"
        },
        {
          "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-panasonic"
        },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-nexa" },
        { "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY-midea" }
      ]
    },
    "remote_base.DUMPER_REGISTRY-coolix": {
      "type": "object",
      "properties": { "coolix": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-dish": {
      "type": "object",
      "properties": { "dish": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-jvc": {
      "type": "object",
      "properties": { "jvc": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-lg": {
      "type": "object",
      "properties": { "lg": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-nec": {
      "type": "object",
      "properties": { "nec": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-pioneer": {
      "type": "object",
      "properties": { "pioneer": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-pronto": {
      "type": "object",
      "properties": { "pronto": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-sony": {
      "type": "object",
      "properties": { "sony": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-raw": {
      "type": "object",
      "properties": { "raw": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-rc5": {
      "type": "object",
      "properties": { "rc5": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-rc_switch": {
      "type": "object",
      "properties": { "rc_switch": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-samsung": {
      "type": "object",
      "properties": { "samsung": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-samsung36": {
      "type": "object",
      "properties": { "samsung36": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-toshiba_ac": {
      "type": "object",
      "properties": { "toshiba_ac": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-panasonic": {
      "type": "object",
      "properties": { "panasonic": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-nexa": {
      "type": "object",
      "properties": { "nexa": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY-midea": {
      "type": "object",
      "properties": { "midea": { "type": "null" } }
    },
    "remote_base.DUMPER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-coolix" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-dish" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-jvc" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-lg" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-nec" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-pioneer" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-pronto" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-sony" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-raw" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-rc5" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-rc_switch" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-samsung" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-samsung36" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-toshiba_ac" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-panasonic" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-nexa" },
        { "$ref": "#/definitions/remote_base.DUMPER_REGISTRY-midea" }
      ]
    },
    "sensor.FILTER_REGISTRY-offset": {
      "type": "object",
      "properties": { "offset": { "type": "number" } }
    },
    "sensor.FILTER_REGISTRY-multiply": {
      "type": "object",
      "properties": { "multiply": { "type": "number" } }
    },
    "sensor.FILTER_REGISTRY-filter_out": {
      "type": "object",
      "properties": { "filter_out": { "type": "number" } }
    },
    "sensor.FILTER_REGISTRY-quantile": {
      "type": "object",
      "properties": {
        "quantile": {
          "properties": {
            "window_size": { "type": "number", "default": 5 },
            "send_every": { "type": "number", "default": 5 },
            "send_first_at": { "type": "number", "default": 1 },
            "quantile": { "type": "number", "default": 0.9 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-median": {
      "type": "object",
      "properties": {
        "median": {
          "properties": {
            "window_size": { "type": "number", "default": 5 },
            "send_every": { "type": "number", "default": 5 },
            "send_first_at": { "type": "number", "default": 1 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-min": {
      "type": "object",
      "properties": {
        "min": {
          "properties": {
            "window_size": { "type": "number", "default": 5 },
            "send_every": { "type": "number", "default": 5 },
            "send_first_at": { "type": "number", "default": 1 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-max": {
      "type": "object",
      "properties": {
        "max": {
          "properties": {
            "window_size": { "type": "number", "default": 5 },
            "send_every": { "type": "number", "default": 5 },
            "send_first_at": { "type": "number", "default": 1 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-sliding_window_moving_average": {
      "type": "object",
      "properties": {
        "sliding_window_moving_average": {
          "properties": {
            "window_size": { "type": "number", "default": 15 },
            "send_every": { "type": "number", "default": 15 },
            "send_first_at": { "type": "number", "default": 1 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-exponential_moving_average": {
      "type": "object",
      "properties": {
        "exponential_moving_average": {
          "properties": {
            "alpha": { "type": "number", "default": 0.1 },
            "send_every": { "type": "number", "default": 15 }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-throttle_average": {
      "type": "object",
      "properties": {
        "throttle_average": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      }
    },
    "sensor.FILTER_REGISTRY-delta": {
      "type": "object",
      "properties": { "delta": { "type": "number" } }
    },
    "sensor.FILTER_REGISTRY-or": {
      "type": "object",
      "properties": {
        "or": {
          "anyOf": [
            { "$ref": "#/definitions/sensor.FILTER_REGISTRY" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/sensor.FILTER_REGISTRY" }
            }
          ]
        }
      }
    },
    "sensor.FILTER_REGISTRY-throttle": {
      "type": "object",
      "properties": {
        "throttle": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-heartbeat": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "sensor.FILTER_REGISTRY-debounce": {
      "type": "object",
      "properties": {
        "debounce": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "calibrate_linear": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "sensor.FILTER_REGISTRY-calibrate_linear": {
      "type": "object",
      "properties": {
        "calibrate_linear": {
          "anyOf": [
            { "$ref": "#/definitions/calibrate_linear" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/calibrate_linear" }
            }
          ]
        }
      }
    },
    "sensor.FILTER_REGISTRY-calibrate_polynomial": {
      "type": "object",
      "properties": {
        "calibrate_polynomial": {
          "properties": {
            "datapoints": {
              "anyOf": [
                { "$ref": "#/definitions/calibrate_linear" },
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/calibrate_linear" }
                }
              ]
            },
            "degree": { "type": "number" }
          },
          "type": ["object", "null"],
          "required_": ["datapoints", "degree"]
        }
      }
    },
    "sensor.FILTER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-offset" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-multiply" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-filter_out" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-quantile" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-median" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-min" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-max" },
        {
          "$ref": "#/definitions/sensor.FILTER_REGISTRY-sliding_window_moving_average"
        },
        {
          "$ref": "#/definitions/sensor.FILTER_REGISTRY-exponential_moving_average"
        },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-throttle_average" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-lambda" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-delta" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-or" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-throttle" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-heartbeat" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-debounce" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-calibrate_linear" },
        { "$ref": "#/definitions/sensor.FILTER_REGISTRY-calibrate_polynomial" }
      ]
    },
    "text_sensor.FILTER_REGISTRY-lambda": {
      "type": "object",
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      }
    },
    "text_sensor.FILTER_REGISTRY-to_upper": {
      "type": "object",
      "properties": { "to_upper": { "type": "null" } }
    },
    "text_sensor.FILTER_REGISTRY-to_lower": {
      "type": "object",
      "properties": { "to_lower": { "type": "null" } }
    },
    "text_sensor.FILTER_REGISTRY-append": {
      "type": "object",
      "properties": {
        "append": { "$ref": "#/definitions/external_components-components" }
      }
    },
    "text_sensor.FILTER_REGISTRY-prepend": {
      "type": "object",
      "properties": {
        "prepend": { "$ref": "#/definitions/external_components-components" }
      }
    },
    "substitute": { "type": ["null", "object", "string", "array", "number"] },
    "text_sensor.FILTER_REGISTRY-substitute": {
      "type": "object",
      "properties": {
        "substitute": {
          "anyOf": [
            { "$ref": "#/definitions/substitute" },
            { "type": "array", "items": { "$ref": "#/definitions/substitute" } }
          ]
        }
      }
    },
    "text_sensor.FILTER_REGISTRY-map": {
      "type": "object",
      "properties": {
        "map": {
          "anyOf": [
            { "$ref": "#/definitions/substitute" },
            { "type": "array", "items": { "$ref": "#/definitions/substitute" } }
          ]
        }
      }
    },
    "text_sensor.FILTER_REGISTRY": {
      "anyOf": [
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-lambda" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-to_upper" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-to_lower" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-append" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-prepend" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-substitute" },
        { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY-map" }
      ]
    },
    "condition_list": {
      "oneOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.CONDITION_REGISTRY" }
      ]
    },
    "esphome-platformio_options": { "type": "object" },
    "esphome-on_boot": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "priority": { "type": "number", "default": 600.0 },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esphome-includes": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "esphome-libraries": { "type": "string" },
    "esphome-project": {
      "properties": {
        "name": {
          "$ref": "#/definitions/esphome-libraries",
          "markdownDescription": "**string**: Name of the project\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "version": {
          "type": "string",
          "markdownDescription": "**string**: Version of the project\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["name", "version"]
    },
    "esphome": {
      "properties": {
        "name": {
          "type": "string",
          "markdownDescription": "**string**: This is the name of the node. It should always be unique in your ESPHome network. May only contain lowercase characters, digits and hyphens, and can be at most 31 characters long. See [Changing ESPHome Node Name](https://esphome.io/components/esphome.html#esphome-changing-node-name).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "comment": {
          "type": "string",
          "markdownDescription": "**string**: Additional text information about this node. Only for display in UI.\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "build_path": {
          "type": "string",
          "markdownDescription": "**string**: Customize where ESPHome will store the build files for your node. By default, ESPHome puts the PlatformIO project it uses to build the firmware in the `.esphome/build/<NODE>` directory, but you can customize this behavior using this option.\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "platformio_options": {
          "$ref": "#/definitions/esphome-platformio_options",
          "markdownDescription": "**mapping**: Additional options to pass over to PlatformIO in the platformio.ini file. See [platformio_options](https://esphome.io/components/esphome.html#esphome-platformio-options).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "on_boot": { "$ref": "#/definitions/esphome-on_boot" },
        "on_shutdown": { "$ref": "#/definitions/simple_automation" },
        "on_loop": { "$ref": "#/definitions/simple_automation" },
        "includes": {
          "anyOf": [
            { "$ref": "#/definitions/esphome-includes" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/esphome-includes" }
            }
          ],
          "markdownDescription": "**list of files**: A list of C/C++ files to include in the main (auto-generated) sketch file for custom components. The paths in this list are relative to the directory where the YAML configuration file is in. See [includes](https://esphome.io/components/esphome.html#esphome-includes).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "libraries": {
          "anyOf": [
            { "$ref": "#/definitions/esphome-libraries" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/esphome-libraries" }
            }
          ],
          "markdownDescription": "**list of libraries**: A list of libraries to include in the project. See [libraries](https://esphome.io/components/esphome.html#esphome-libraries).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "name_add_mac_suffix": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: Appends the last 3 bytes of the mac address of the device to the name in the form `<name>-aabbcc`. Defaults to `false`. See [Adding the MAC address as a suffix to the device name](https://esphome.io/components/esphome.html#esphome-mac-suffix).\n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        },
        "project": {
          "$ref": "#/definitions/esphome-project",
          "markdownDescription": "ESPHome Creator\u2019s Project information. See [Project information](https://esphome.io/components/esphome.html#esphome-creators-project).\n  * **name** (**Required**, string): Name of the project\n  \n  * **version** (**Required**, string): Version of the project\n  \n  \n\n\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["name", "build_path"]
    },
    "uart_bus": { "properties": {}, "type": ["object", "null"] },
    "spi_bus": {
      "properties": {
        "cs_pin": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" }
      },
      "type": ["object", "null"]
    },
    "i2c_bus": {
      "properties": { "address": { "type": "string" } },
      "type": ["object", "null"],
      "required_": ["address"]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_click": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "min_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50ms"
            },
            "max_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "350ms"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "min_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50ms"
            },
            "max_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "350ms"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click": {
      "properties": {
        "timing": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click-timing[]"
          }
        },
        "invalid_cooldown": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "1s"
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["timing"]
    },
    "binary_sensor.BINARY_SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "device_class": {
              "enum": [
                "",
                "battery",
                "battery_charging",
                "cold",
                "connectivity",
                "door",
                "garage_door",
                "gas",
                "heat",
                "light",
                "lock",
                "moisture",
                "motion",
                "moving",
                "occupancy",
                "opening",
                "plug",
                "power",
                "presence",
                "problem",
                "running",
                "safety",
                "smoke",
                "sound",
                "tamper",
                "update",
                "vibration",
                "window"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://developers.home-assistant.io/docs/core/entity/binary-sensor/#available-device-classes](https://developers.home-assistant.io/docs/core/entity/binary-sensor/#available-device-classes) for a list of available options.\n\n\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#base-binary-sensor-configuration)*"
            },
            "filters": {
              "anyOf": [
                { "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/binary_sensor.FILTER_REGISTRY"
                  }
                }
              ]
            },
            "on_press": { "$ref": "#/definitions/simple_automation" },
            "on_release": { "$ref": "#/definitions/simple_automation" },
            "on_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_click"
            },
            "on_double_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_double_click"
            },
            "on_multi_click": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA-on_multi_click"
            },
            "on_state": { "$ref": "#/definitions/simple_automation" },
            "name": {
              "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "binary_sensor.MULTI_CLICK_TIMING_SCHEMA": {
      "properties": {
        "state": { "type": "boolean" },
        "min_length": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        "max_length": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        }
      },
      "type": ["object", "null"]
    },
    "button.BUTTON_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "device_class": { "enum": ["restart", "update"] },
            "on_press": { "$ref": "#/definitions/simple_automation" },
            "name": {
              "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Template Button](https://esphome.io/components/button/template.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Button](https://esphome.io/components/button/template.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "canbus.CANBUS_SCHEMA-on_frame-on_frame": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "can_id": { "type": "number" },
            "use_extended_id": { "type": "boolean", "default": false },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "canbus.CANBUS_SCHEMA-on_frame": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "can_id": { "type": "number" },
            "use_extended_id": { "type": "boolean", "default": false },
            "on_frame": {
              "$ref": "#/definitions/canbus.CANBUS_SCHEMA-on_frame-on_frame"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "canbus.CANBUS_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "can_id": {
              "type": "number",
              "markdownDescription": "**int**: default *can id* used for transmitting frames.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#configuration-variables)*"
            },
            "bit_rate": {
              "enum": [
                "5KBPS",
                "10KBPS",
                "20KBPS",
                "31K25BPS",
                "33KBPS",
                "40KBPS",
                "50KBPS",
                "80KBPS",
                "83K3BPS",
                "95KBPS",
                "100KBPS",
                "125KBPS",
                "200KBPS",
                "250KBPS",
                "500KBPS",
                "1000KBPS"
              ],
              "markdownDescription": "**enum**: One of the supported bitrates. Defaults to `125KBPS`. Bitrates marked with * are not supported by the internal ESP32 CAN controller.\n  * 5KBPS *\n  \n  * 10KBPS *\n  \n  * 20KBPS *\n  \n  * 31K25BPS *\n  \n  * 33KBPS *\n  \n  * 40KBPS *\n  \n  * 50KBPS\n  \n  * 80KBPS *\n  \n  * 83K3BPS *\n  \n  * 95KBPS *\n  \n  * 100KBPS\n  \n  * 125KBPS\n  \n  * 200KBPS *\n  \n  * 250KBPS\n  \n  * 500KBPS\n  \n  * 1000KBPS\n  \n  \n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#configuration-variables)*"
            },
            "use_extended_id": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: default *false* identifies the type of *can_id*: *false*: Standard 11 bits IDs, *true*: Extended 29 bits ID\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#configuration-variables)*"
            },
            "on_frame": {
              "$ref": "#/definitions/canbus.CANBUS_SCHEMA-on_frame"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["can_id"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "climate.CLIMATE_CONTROL_ACTION_SCHEMA": {
      "properties": {
        "mode": { "type": ["null", "object", "string", "array", "number"] },
        "target_temperature": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "away": { "type": ["null", "object", "string", "array", "number"] },
        "fan_mode": { "type": ["null", "object", "string", "array", "number"] },
        "custom_fan_mode": { "type": "string" },
        "preset": { "type": ["null", "object", "string", "array", "number"] },
        "custom_preset": { "type": "string" },
        "swing_mode": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "climate.CLIMATE_SCHEMA-visual": {
      "properties": {
        "min_temperature": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "max_temperature": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "temperature_step": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "climate.CLIMATE_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "visual": { "$ref": "#/definitions/climate.CLIMATE_SCHEMA-visual" },
            "action_state_topic": { "type": "string" },
            "away_command_topic": { "type": "string" },
            "away_state_topic": { "type": "string" },
            "current_temperature_state_topic": { "type": "string" },
            "fan_mode_command_topic": { "type": "string" },
            "fan_mode_state_topic": { "type": "string" },
            "mode_command_topic": { "type": "string" },
            "mode_state_topic": { "type": "string" },
            "swing_mode_command_topic": { "type": "string" },
            "swing_mode_state_topic": { "type": "string" },
            "target_temperature_command_topic": { "type": "string" },
            "target_temperature_state_topic": { "type": "string" },
            "target_temperature_high_command_topic": { "type": "string" },
            "target_temperature_high_state_topic": { "type": "string" },
            "target_temperature_low_command_topic": { "type": "string" },
            "target_temperature_low_state_topic": { "type": "string" },
            "on_state": { "$ref": "#/definitions/simple_automation" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "cover.COVER_CONTROL_ACTION_SCHEMA": {
      "properties": {
        "stop": { "type": ["null", "object", "string", "array", "number"] },
        "state": { "type": ["null", "object", "string", "array", "number"] },
        "position": { "type": ["null", "object", "string", "array", "number"] },
        "tilt": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "cover.COVER_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "device_class": {
              "enum": [
                "",
                "awning",
                "blind",
                "curtain",
                "damper",
                "door",
                "garage",
                "gate",
                "shade",
                "shutter",
                "window"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://www.home-assistant.io/components/cover/](https://www.home-assistant.io/components/cover/) for a list of available options.\n\n\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#base-cover-configuration)*"
            },
            "position_command_topic": { "type": "string" },
            "position_state_topic": { "type": "string" },
            "tilt_command_topic": { "type": "string" },
            "tilt_state_topic": { "type": "string" },
            "on_open": { "$ref": "#/definitions/simple_automation" },
            "on_closed": { "$ref": "#/definitions/simple_automation" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "display.BASIC_DISPLAY_SCHEMA": {
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"]
    },
    "display.FULL_DISPLAY_SCHEMA-pages": {
      "properties": {
        "lambda": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["lambda"]
    },
    "display.FULL_DISPLAY_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
        {
          "properties": {
            "rotation": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "pages": {
              "anyOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA-pages"
                  }
                }
              ]
            },
            "on_page_change": { "$ref": "#/definitions/simple_automation" },
            "auto_clear_enabled": { "type": "boolean", "default": true }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "fan.FAN_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "restore_mode": {
              "enum": [
                "NO_RESTORE",
                "ALWAYS_OFF",
                "ALWAYS_ON",
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "RESTORE_INVERTED_DEFAULT_OFF",
                "RESTORE_INVERTED_DEFAULT_ON"
              ]
            },
            "oscillation_state_topic": { "type": "string" },
            "oscillation_command_topic": { "type": "string" },
            "speed_level_state_topic": { "type": "string" },
            "speed_level_command_topic": { "type": "string" },
            "speed_state_topic": { "type": "string" },
            "speed_command_topic": { "type": "string" },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "on_speed_set": { "$ref": "#/definitions/simple_automation" },
            "name": {
              "markdownDescription": "**string**: The name of the fan.\n\n\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]": { "type": "string" },
    "light.ADDRESSABLE_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON",
                "RESTORE_INVERTED_DEFAULT_OFF",
                "RESTORE_INVERTED_DEFAULT_ON"
              ]
            },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "on_state": { "$ref": "#/definitions/simple_automation" },
            "gamma_correct": { "type": "number", "default": 2.8 },
            "default_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1s"
            },
            "flash_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s"
            },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_lambda"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_rainbow"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_color_wipe"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_scan"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_twinkle"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_random_twinkle"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_fireworks"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-addressable_flicker"
                      },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-adalight"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-e131" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-wled" }
                    ]
                  }
                }
              ]
            },
            "color_correct": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA-color_correct[]"
              }
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.BINARY_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON",
                "RESTORE_INVERTED_DEFAULT_OFF",
                "RESTORE_INVERTED_DEFAULT_ON"
              ]
            },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "on_state": { "$ref": "#/definitions/simple_automation" },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" }
                    ]
                  }
                }
              ]
            },
            "name": {
              "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.BRIGHTNESS_ONLY_LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON",
                "RESTORE_INVERTED_DEFAULT_OFF",
                "RESTORE_INVERTED_DEFAULT_ON"
              ]
            },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "on_state": { "$ref": "#/definitions/simple_automation" },
            "gamma_correct": { "type": "number", "default": 2.8 },
            "default_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1s"
            },
            "flash_transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s"
            },
            "effects": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-lambda" },
                      {
                        "$ref": "#/definitions/light.EFFECTS_REGISTRY-automation"
                      },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-pulse" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-random" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-strobe" },
                      { "$ref": "#/definitions/light.EFFECTS_REGISTRY-flicker" }
                    ]
                  }
                }
              ]
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "light.LIGHT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "restore_mode": {
              "enum": [
                "RESTORE_DEFAULT_OFF",
                "RESTORE_DEFAULT_ON",
                "ALWAYS_OFF",
                "ALWAYS_ON",
                "RESTORE_INVERTED_DEFAULT_OFF",
                "RESTORE_INVERTED_DEFAULT_ON"
              ]
            },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "on_state": { "$ref": "#/definitions/simple_automation" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "lock.LOCK_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "on_lock": { "$ref": "#/definitions/simple_automation" },
            "on_unlock": { "$ref": "#/definitions/simple_automation" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "number.NUMBER_SCHEMA-on_value_range": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "above": { "type": "number" },
            "below": { "type": "number" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "number.NUMBER_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "on_value": { "$ref": "#/definitions/simple_automation" },
            "on_value_range": {
              "$ref": "#/definitions/number.NUMBER_SCHEMA-on_value_range"
            },
            "unit_of_measurement": { "type": "string" },
            "mode": { "enum": ["AUTO", "BOX", "SLIDER"] },
            "name": {
              "markdownDescription": "**string**: The name for the number.\n\n\n\n*See also: [Number Component](https://esphome.io/components/number/index.html#base-number-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output.BINARY_OUTPUT_SCHEMA": {
      "properties": { "inverted": { "type": "boolean" } },
      "type": ["object", "null"]
    },
    "output.FLOAT_OUTPUT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "max_power": {
              "type": "string",
              "markdownDescription": "**float**: Sets the maximum output value of this output platform. Must be in range from min_power to 1. Defaults to `1`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "min_power": {
              "type": "string",
              "markdownDescription": "**float**: Sets the minimum output value of this output platform. Must be in range from 0 to max_power. Defaults to `0`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "zero_means_zero": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Sets the output to use actual 0 instead of `min_power`. Defaults to `false`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "power_supply": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The [power supply](https://esphome.io/components/power_supply.html) to connect to this output. When the output is enabled, the power supply will automatically be switched on too.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            },
            "inverted": {
              "markdownDescription": "**boolean**: If the output should be treated as inverted. Defaults to `false`.\n\n\n\n*See also: [Base Output Configuration](https://esphome.io/components/output/index.html#base-output-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "Each output platform extends this configuration schema.\n\n*See also: [Output Component](https://esphome.io/components/output/index.html#base-output-configuration)*"
    },
    "select.SELECT_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "on_value": { "$ref": "#/definitions/simple_automation" },
            "name": {
              "markdownDescription": "**string**: The name for the select.\n\n\n\n*See also: [Select Component](https://esphome.io/components/select/index.html#base-select-configuration)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor.SENSOR_SCHEMA-on_value_range": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "above": { "type": "number" },
            "below": { "type": "number" },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor.SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "unit_of_measurement": {
              "type": "string",
              "markdownDescription": "**string**: Manually set the unit of measurement the sensor should advertise its values with. This does not actually do any maths (conversion between units).\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "accuracy_decimals": { "type": "number" },
            "device_class": {
              "enum": [
                "",
                "aqi",
                "battery",
                "carbon_dioxide",
                "carbon_monoxide",
                "current",
                "energy",
                "gas",
                "humidity",
                "illuminance",
                "monetary",
                "nitrogen_dioxide",
                "nitrogen_monoxide",
                "nitrous_oxide",
                "ozone",
                "pm1",
                "pm10",
                "pm25",
                "power",
                "power_factor",
                "pressure",
                "signal_strength",
                "sulphur_dioxide",
                "temperature",
                "timestamp",
                "volatile_organic_compounds",
                "voltage"
              ],
              "markdownDescription": "**string**: The device class for the sensor. See [https://developers.home-assistant.io/docs/core/entity/sensor/#available-device-classes](https://developers.home-assistant.io/docs/core/entity/sensor/#available-device-classes) for a list of available options. Set to `\"\"` to remove the default device class of a sensor.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "state_class": {
              "enum": ["", "measurement", "total_increasing"],
              "markdownDescription": "**string**: The state class for the sensor. See [https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes](https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes) for a list of available options. Set to `\"\"` to remove the default state class of a sensor.\n\n\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "force_update": { "type": "boolean", "default": false },
            "expire_after": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"]
            },
            "filters": {
              "anyOf": [
                { "$ref": "#/definitions/sensor.FILTER_REGISTRY" },
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/sensor.FILTER_REGISTRY" }
                }
              ]
            },
            "on_value": { "$ref": "#/definitions/simple_automation" },
            "on_raw_value": { "$ref": "#/definitions/simple_automation" },
            "on_value_range": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA-on_value_range"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [WiFi Signal Sensor](https://esphome.io/components/sensor/wifi_signal.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [UART bus](https://esphome.io/components/uart.html#uart) you wish to use for this sensor. Use this if you want to use multiple UART buses at once.\n\n\n\n*See also: [HRXL MaxSonar WR Series](https://esphome.io/components/sensor/hrxl_maxsonar_wr.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "stepper.STEPPER_SCHEMA": {
      "properties": {
        "max_speed": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**float**: The maximum speed in `steps/s` (steps per seconds) to drive the stepper at. Note most steppers can\u2019t step properly with speeds higher than 250 steps/s.\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        },
        "acceleration": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "inf",
          "markdownDescription": "**float**: The acceleration in `steps/s^2` (steps per seconds squared) to use when starting to move. The default is `inf` which means infinite acceleration, so the stepper will try to drive with the full speed immediately. This value is helpful if that first motion of the motor is too jerky for what it\u2019s moving.  If you make this a small number, it will take the motor a moment to get up  to speed.\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        },
        "deceleration": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "inf",
          "markdownDescription": "**float**: The same as `acceleration`, but for when the motor is decelerating shortly before reaching the set position. Defaults to `inf` (immediate deceleration).\n\n\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#base-stepper-configuration)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["max_speed"]
    },
    "switch.SWITCH_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMMAND_COMPONENT_SCHEMA" },
        {
          "properties": {
            "inverted": { "type": "boolean" },
            "on_turn_on": { "$ref": "#/definitions/simple_automation" },
            "on_turn_off": { "$ref": "#/definitions/simple_automation" },
            "device_class": { "enum": ["", "outlet", "switch"] },
            "name": {
              "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "text_sensor.TEXT_SENSOR_SCHEMA": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.MQTT_COMPONENT_SCHEMA" },
        {
          "properties": {
            "filters": {
              "anyOf": [
                { "$ref": "#/definitions/text_sensor.FILTER_REGISTRY" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/text_sensor.FILTER_REGISTRY"
                  }
                }
              ]
            },
            "on_value": { "$ref": "#/definitions/simple_automation" },
            "on_raw_value": { "$ref": "#/definitions/simple_automation" },
            "name": {
              "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#base-text-sensor-configuration)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time.TIME_SCHEMA-on_time": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "seconds": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which seconds of the minute the automation will trigger. Defaults to `*` (all seconds). Range is from 0 to 59.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "minutes": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which minutes of the hour the automation will trigger. Defaults to `*` (all minutes). Range is from 0 to 59.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "hours": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which hours of the day the automation will trigger. Defaults to `*` (all hours). Range is from 0 to 23.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "days_of_month": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which days of the month the automation will trigger. Defaults to `*` (all days). Range is from 1 to 31.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "months": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which months of the year to trigger. Defaults to `*` (all months). The month names JAN to DEC are automatically substituted. Range is from 1 (January) to 12 (December).\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "days_of_week": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Specify for which days of the week to trigger. Defaults to `*` (all days). The names SUN to SAT are automatically substituted. Range is from 1 (Sunday) to 7 (Saturday).\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "cron": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: Alternatively, you can specify a whole cron expression like `* /5 * * * *`. Please note years and some special characters like `L`, `#` are currently not supported.\n\n\n\n*See also: [on_time Trigger](https://esphome.io/components/time.html#on-time-trigger)*"
            },
            "at": { "type": ["null", "object", "string", "array", "number"] },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "time.TIME_SCHEMA": {
      "allOf": [
        {
          "properties": {
            "timezone": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "<-03>3",
              "markdownDescription": "**string**: Manually tell ESPHome what time zone to use with [this format](https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html) (warning: the format is quite complicated) or the simpler [TZ database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) in the form <Region>/<City>. ESPHome tries to automatically infer the time zone string based on the time zone of the computer that is running ESPHome, but this might not always be accurate.\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "on_time": {
              "$ref": "#/definitions/time.TIME_SCHEMA-on_time",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Automation to run at specific intervals using a cron-like syntax. See [on_time Trigger](https://esphome.io/components/time.html#time-on-time).\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "on_time_sync": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Automation to run when the time source could be (re-)synchronized.. See [on_time_sync Trigger](https://esphome.io/components/time.html#time-on-time-sync).\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the time for use in lambdas.\n\n\n\n*See also: [Time](https://esphome.io/components/time.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "touchscreen.TOUCHSCREEN_SCHEMA": {
      "properties": {
        "on_touch": { "$ref": "#/definitions/simple_automation" }
      },
      "type": ["object", "null"]
    },
    "ads1115": {
      "allOf": [
        {
          "properties": {
            "continuous_mode": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Set if the ADS1115 should continuously measure voltages or only measure them when an update is called. Please enable this for the [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html) integration. Defaults to `off`.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "markdownDescription": "**int**: The i\u00b2c address of the sensor. See [I\u00b2C Addresses](https://esphome.io/components/sensor/ads1115.html#ads1115-i2c-addresses) for more information.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this ADS1115 Hub. Use this if you want to use multiple ADS1115 hubs at once.\n\n\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "animation": {
      "properties": {
        "file": { "type": ["null", "object", "string", "array", "number"] },
        "resize": { "type": ["null", "object", "string", "array", "number"] },
        "type": {
          "enum": ["BINARY", "GRAYSCALE", "RGB24", "TRANSPARENT_BINARY"]
        }
      },
      "type": ["object", "null"],
      "required_": ["file"]
    },
    "apds9960": {
      "allOf": [
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        {
          "properties": {
            "address": {
              "type": "string",
              "default": "57",
              "markdownDescription": "**int**: The I\u00b2C address of the sensor. Defaults to `0x39`.\n\n\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "api-services-variables": { "properties": {}, "type": ["object", "null"] },
    "api-services": {
      "properties": {
        "service": { "type": "string" },
        "variables": { "$ref": "#/definitions/api-services-variables" },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["service"]
    },
    "api-encryption": {
      "properties": {
        "key": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["key"]
    },
    "binary_sensor-modbus_controller-custom_command": { "type": "string" },
    "ble_client": {
      "allOf": [
        {
          "properties": {
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address of the BLE device to connect to.\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "name": { "type": "string" },
            "on_connect": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the client connects to a device. See [on_connect](https://esphome.io/components/ble_client.html#ble-client-on-connect).\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "on_disconnect": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the client disconnects from a device. See [on_disconnect](https://esphome.io/components/ble_client.html#ble-client-on-disconnect).\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID to use for code generation, and for reference by dependent components.\n\n\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["mac_address"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "cap1188": {
      "allOf": [
        {
          "properties": {
            "reset_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: Set the pin that is used to reset the CAP1188 board on boot.\n\n\n\n*See also: [cap1188 Component/Hub](https://esphome.io/components/binary_sensor/cap1188.html#configuration-variables)*"
            },
            "touch_threshold": { "type": "number", "default": 32 },
            "allow_multiple_touches": { "type": "boolean", "default": false },
            "address": {
              "type": "string",
              "default": "41",
              "markdownDescription": "**int**: The I\u00b2C address of the sensor. Defaults to `0x29`.\n\n\n\n*See also: [cap1188 Component/Hub](https://esphome.io/components/binary_sensor/cap1188.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor.\n\n\n\n*See also: [cap1188 Component/Hub](https://esphome.io/components/binary_sensor/cap1188.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "cd74hc4067": {
      "allOf": [
        {
          "properties": {
            "pin_s0": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
            "pin_s1": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
            "pin_s2": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
            "pin_s3": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
            "delay": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "2ms"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin_s0", "pin_s1", "pin_s2", "pin_s3"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "climate-bang_bang-away_config": {
      "properties": {
        "default_target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "default_target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"],
      "required_": [
        "default_target_temperature_low",
        "default_target_temperature_high"
      ]
    },
    "climate-midea-supported_modes": {
      "properties": {},
      "type": ["object", "null"]
    },
    "climate-midea-supported_swing_modes": {
      "properties": {},
      "type": ["object", "null"]
    },
    "climate-midea-supported_presets": {
      "properties": {},
      "type": ["object", "null"]
    },
    "climate-midea-custom_presets": {
      "properties": {},
      "type": ["object", "null"]
    },
    "climate-midea-custom_fan_modes": {
      "properties": {},
      "type": ["object", "null"]
    },
    "climate-pid-control_parameters": {
      "properties": {
        "kp": { "type": "number" },
        "ki": { "type": "number", "default": 0.0 },
        "kd": { "type": "number", "default": 0.0 },
        "min_integral": { "type": "number", "default": -1 },
        "max_integral": { "type": "number", "default": 1 }
      },
      "type": ["object", "null"],
      "required_": ["kp"]
    },
    "climate-thermostat-away_config": {
      "properties": {
        "default_target_temperature_high": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "default_target_temperature_low": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "color": {
      "allOf": [
        {
          "properties": {
            "red": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the red component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "red_int": { "type": "number" },
            "green": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the green component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "green_int": { "type": "number" },
            "blue": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the blue component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "blue_int": { "type": "number" },
            "white": {
              "type": "string",
              "markdownDescription": "**percentage**: The percentage of the white component. Defaults to `100%`.\n\n\n\n*See also: [Color](https://esphome.io/components/display/index.html#color)*"
            },
            "white_int": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "custom_component": {
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the binary sensor(s).\n\n\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
        },
        "components": {
          "anyOf": [
            { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
            }
          ],
          "markdownDescription": "**list**: A list of components to initialize. The length here must equal the number of items in the `return` statement of the `lambda`. This is useful if you need to give an `id` to the component you created.\n\n\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["lambda"]
    },
    "dallas": {
      "allOf": [
        {
          "properties": {
            "pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**number**: The pin the sensor bus is connected to. Please note that 1-wire is a bi-directional bus so it requires both input and output from the pin.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval that the sensors should be checked. Defaults to 60 seconds.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "demo-binary_sensors[]": {
      "allOf": [
        { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "demo-climates[]": {
      "allOf": [
        { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "type": { "enum": [1, 2, 3] } },
          "type": ["object", "null"],
          "required_": ["type"]
        }
      ]
    },
    "demo-covers[]": {
      "allOf": [
        { "$ref": "#/definitions/cover.COVER_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "type": { "enum": [1, 2, 3, 4] } },
          "type": ["object", "null"],
          "required_": ["type"]
        }
      ]
    },
    "demo-fans[]": {
      "allOf": [
        { "$ref": "#/definitions/fan.FAN_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "type": { "enum": [1, 2, 3, 4] } },
          "type": ["object", "null"],
          "required_": ["type"]
        }
      ]
    },
    "demo-lights[]": {
      "allOf": [
        { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "type": { "enum": [1, 2, 3, 4, 5, 6, 7] } },
          "type": ["object", "null"],
          "required_": ["type"]
        }
      ]
    },
    "demo-numbers[]": {
      "allOf": [
        { "$ref": "#/definitions/number.NUMBER_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": {
            "type": { "enum": [1, 2, 3] },
            "min_value": { "type": "number" },
            "max_value": { "type": "number" },
            "step": { "type": "number" }
          },
          "type": ["object", "null"],
          "required_": ["type", "min_value", "max_value", "step"]
        }
      ]
    },
    "demo-sensors[]": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "demo-switches[]": {
      "allOf": [
        { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "demo-text_sensors[]": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "dfplayer": {
      "properties": {
        "on_finished_playback": {
          "$ref": "#/definitions/simple_automation",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when playback is finished.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
        },
        "uart_id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "esp32-framework-esp-idf-advanced": {
      "properties": {
        "ignore_efuse_mac_crc": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"]
    },
    "esp32-framework-esp-idf": {
      "properties": {
        "version": { "type": "string", "default": "recommended" },
        "source": { "type": "string" },
        "platform_version": {
          "type": ["null", "object", "string", "array", "number"]
        },
        "sdkconfig_options": { "what": "is_this" },
        "advanced": { "$ref": "#/definitions/esp32-framework-esp-idf-advanced" }
      },
      "type": ["object", "null"]
    },
    "esp32-framework-arduino": {
      "properties": {
        "version": { "type": "string", "default": "recommended" },
        "source": { "type": "string" },
        "platform_version": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"]
    },
    "esp32_ble_tracker-on_ble_advertise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "mac_address": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-advertise)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "esp32_ble_tracker-on_ble_service_data_advertise": {
      "properties": {
        "mac_address": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-service-data-advertise)*"
        },
        "service_uuid": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Service UUID.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-service-data-advertise)*"
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["service_uuid"]
    },
    "esp32_ble_tracker-on_ble_manufacturer_data_advertise": {
      "properties": {
        "mac_address": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**MAC Address**: The MAC address to filter for this automation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-manufacturer-data-advertise)*"
        },
        "manufacturer_id": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Manufacturer ID.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#on-ble-manufacturer-data-advertise)*"
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["manufacturer_id"]
    },
    "esp32_camera-data_pins[]": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "esp32_camera-external_clock": {
      "properties": {
        "pin": { "type": ["null", "object", "string", "array", "number"] },
        "frequency": {
          "type": ["null", "object", "string", "array", "number"],
          "default": "20MHz"
        }
      },
      "type": ["object", "null"],
      "required_": ["pin"]
    },
    "esp32_camera-i2c_pins": {
      "properties": {
        "sda": { "type": ["null", "object", "string", "array", "number"] },
        "scl": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["sda", "scl"]
    },
    "esp32_camera_web_server": {
      "allOf": [
        {
          "properties": {
            "port": {
              "type": "number",
              "markdownDescription": "**string**: The serving port.\n\n\n\n*See also: [ESP32 Camera Web Server Component](https://esphome.io/components/esp32_camera_web_server.html#configuration-variables)*"
            },
            "mode": {
              "enum": ["STREAM", "SNAPSHOT"],
              "markdownDescription": "**string**: The operation mode. One of these values:\n  * `snapshot`\n  \n  * `stream`\n  \n  \n\n\n\n*See also: [ESP32 Camera Web Server Component](https://esphome.io/components/esp32_camera_web_server.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["port", "mode"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "ethernet-manual_ip": {
      "allOf": [
        {
          "properties": {
            "static_ip": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The static IP of your node.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "gateway": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The gateway of the local network.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "subnet": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**IPv4 address**: The subnet of the local network.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "dns1": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.0.0.0",
              "markdownDescription": "**IPv4 address**: The main DNS server to use.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "dns2": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.0.0.0",
              "markdownDescription": "**IPv4 address**: The backup DNS server to use.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["static_ip", "gateway", "subnet"]
        }
      ]
    },
    "external_components-source-git": {
      "properties": {
        "url": { "type": ["null", "object", "string", "array", "number"] },
        "ref": { "type": ["null", "object", "string", "array", "number"] },
        "username": { "type": "string" },
        "password": { "type": "string" }
      },
      "type": ["object", "null"],
      "required_": ["url"]
    },
    "external_components-source-local": {
      "properties": {
        "path": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["path"]
    },
    "external_components-components": { "type": "string" },
    "external_components": {
      "properties": {
        "source": {
          "allOf": [
            {
              "type": "object",
              "properties": { "type": { "type": "string" } }
            },
            {
              "if": { "properties": { "type": { "const": "git" } } },
              "then": { "$ref": "#/definitions/external_components-source-git" }
            },
            {
              "if": { "properties": { "type": { "const": "local" } } },
              "then": {
                "$ref": "#/definitions/external_components-source-local"
              }
            }
          ],
          "markdownDescription": "The location of the components you want to retrieve. See [Local](https://esphome.io/components/external_components.html#external-components-local) and [Git](https://esphome.io/components/external_components.html#external-components-git).\n  * **type** (**Required**): Repository type. One of `local`, `git`.\n  \n  git options:\n  * **url** (**Required**, url): HTTP git repository url. See [Git](https://esphome.io/components/external_components.html#external-components-git).\n  \n  * **ref** (*Optional*, string): Git ref (branch or tag). If not specified the default branch is used.\n  \n  * **username** (*Optional*, string): Username for the Git server, if one is required\n  \n  * **password** (*Optional*, string): Password for the Git server, if one is required\n  \n  local options:\n  * **path** (**Required**):  Path to use when using local components. See [Local](https://esphome.io/components/external_components.html#external-components-local).\n  \n  \n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        },
        "refresh": {
          "type": "string",
          "default": "1d",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval the source will be checked. Has no effect on `local`. See [Refresh](https://esphome.io/components/external_components.html#external-components-refresh). for more info. Defaults to `1day`.\n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        },
        "components": {
          "anyOf": [
            { "$ref": "#/definitions/external_components-components" },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/external_components-components"
              }
            }
          ],
          "markdownDescription": "**list**: The list of components to use from the external source. By default, all available components are used.\n\n\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["source"]
    },
    "fingerprint_grow": {
      "allOf": [
        {
          "properties": {
            "sensing_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to the reader\u2019s finger detection signal (WAKEUP) output.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "password": {
              "type": "number",
              "markdownDescription": "**int**: Password to use for authentication. Defaults to `0x00`.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "new_password": {
              "type": "number",
              "markdownDescription": "**int**: Sets a new password to use for authentication. See [Setting a New Password](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-set-new-password) for more information.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_finger_scan_matched": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an enrolled fingerprint is scanned. See [on_finger_scan_matched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-matched).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_finger_scan_unmatched": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an unknown fingerprint is scanned. See [on_finger_scan_unmatched Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-finger-scan-unmatched).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_scan": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint is scanned during enrollment. See [on_enrollment_scan Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-scan).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_done": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint is enrolled. See [on_enrollment_done Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-done).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "on_enrollment_failed": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a fingerprint enrollment failed. See [on_enrollment_failed Trigger](https://esphome.io/components/fingerprint_grow.html#fingerprint-grow-on-enrollment-failed).\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "font": {
      "properties": {
        "file": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The path (relative to where the .yaml file is) of the TrueType font file.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "glyphs": {
          "type": ["null", "object", "string", "array", "number"],
          "default": " !\"%()+=,-.:/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\u00b0",
          "markdownDescription": "**list**: A list of characters you plan to use. Only the characters you specify here will be compiled into the binary. Adjust this if you need some special characters or want to reduce the size of the binary if you don\u2019t plan to use some glyphs. The items in the list can also be more than one character long if you for example want to use font ligatures. Defaults to `!\"%()+=,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "size": {
          "type": "number",
          "default": 20,
          "markdownDescription": "**int**: The size of the font in pt (not pixel!). If you want to use the same font in different sizes, create two font objects. Defaults to `20`.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID with which you will be able to reference the font later in your display code.\n\n\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#drawing-static-text)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["file"]
    },
    "globals": {
      "allOf": [
        {
          "properties": {
            "type": {
              "type": "string",
              "markdownDescription": "**string**: The C++ type of the global variable, for example `bool` (for `true`/`false`), `int` (for integers), `float` (for decimal numbers), `int[50]` for an array of 50 integers, etc.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "initial_value": {
              "type": "string",
              "markdownDescription": "**string**: The value with which to initialize this variable if the state can not be restored or if state restoration is not enabled. This needs to be wrapped in quotes! Defaults to the C++ default value for this type (for example `0` for integers).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "restore_value": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether to try to restore the state on boot up. Be careful: on the ESP8266, you only have a total of 96 bytes available for this! Defaults to `no`. This will use storage in \u201cRTC memory\u201d, so it won\u2019t survive a power-cycle unless you use the `esp8266_restore_from_flash` option to save to flash. See [esp8266_restore_from_flash](https://esphome.io/components/esphome.html) for details.\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Give the global variable an ID so that you can refer to it later in [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n\n\n*See also: [Global Variables](https://esphome.io/guides/automations.html#global-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["type"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "gps": {
      "allOf": [
        {
          "properties": {
            "latitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the Latitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "longitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the Longitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "speed": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured speed as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "course": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured course as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "altitude": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the measured altitude as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            },
            "satellites": {
              "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
              "markdownDescription": "Include the number of tracking satellites being used as a sensor\n  * **name** (**Required**, string): The name to give the latitude sensor\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "graph-traces": {
      "properties": {
        "name": { "type": "string" },
        "line_thickness": { "type": "number" },
        "line_type": { "enum": ["SOLID", "DOTTED", "DASHED"] }
      },
      "type": ["object", "null"]
    },
    "graph-legend": {
      "properties": {
        "width": { "type": "number" },
        "height": { "type": "number" },
        "border": { "type": "boolean" },
        "show_lines": { "type": "boolean" },
        "show_values": { "enum": ["NONE", "AUTO", "BESIDE", "BELOW"] },
        "show_units": { "type": "boolean" },
        "direction": { "enum": ["AUTO", "HORIZONTAL", "VERTICAL"] }
      },
      "type": ["object", "null"]
    },
    "graph": {
      "properties": {
        "duration": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        "width": { "type": "number" },
        "height": { "type": "number" },
        "x_grid": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"]
        },
        "y_grid": { "type": "number" },
        "border": { "type": "boolean" },
        "line_thickness": { "type": "number" },
        "line_type": { "enum": ["SOLID", "DOTTED", "DASHED"] },
        "min_value": { "type": "number" },
        "max_value": { "type": "number" },
        "min_range": { "type": "number" },
        "max_range": { "type": "number" },
        "traces": {
          "anyOf": [
            { "$ref": "#/definitions/graph-traces" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/graph-traces" }
            }
          ]
        },
        "legend": {
          "anyOf": [
            { "$ref": "#/definitions/graph-legend" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/graph-legend" }
            }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["duration", "width", "height"]
    },
    "i2c": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this I\u00b2C bus if you need multiple I\u00b2C buses.\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "sda": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "SDA",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO21 for ESP32 and GPIO4 for ESP8266).\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "sda_pullup_enabled": { "type": "boolean" },
            "scl": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "SCL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the I\u00b2C bus. Defaults to the default of your board (usually GPIO22 for ESP32 and GPIO5 for ESP8266).\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "scl_pullup_enabled": { "type": "boolean" },
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "50kHz",
              "markdownDescription": "**float**: Set the frequency the I\u00b2C bus should operate on. Defaults to `50kHz`. Values are `10kHz`, `50kHz`, `100kHz`, `200kHz`, \u2026 `800kHz`\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            },
            "scan": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: If ESPHome should do a search of the I\u00b2C address space on startup. Defaults to `true`.\n\n\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "image": {
      "properties": {
        "file": { "type": ["null", "object", "string", "array", "number"] },
        "resize": { "type": ["null", "object", "string", "array", "number"] },
        "type": {
          "enum": ["BINARY", "GRAYSCALE", "RGB24", "TRANSPARENT_BINARY"]
        },
        "dither": { "enum": ["NONE", "FLOYDSTEINBERG"] }
      },
      "type": ["object", "null"],
      "required_": ["file"]
    },
    "interval": {
      "allOf": [
        {
          "properties": {
            "interval": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"]
            }
          },
          "type": ["object", "null"],
          "required_": ["interval"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/AUTOMATION.AUTOMATION_SCHEMA" }
      ]
    },
    "logger-logs": {
      "properties": {
        "app": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "component": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "esphal": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "helpers": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "preferences": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "scheduler": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        },
        "api.service": {
          "enum": [
            "NONE",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "VERBOSE",
            "VERY_VERBOSE"
          ]
        }
      },
      "type": ["object", "null"]
    },
    "logger-on_message": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "level": {
              "enum": [
                "NONE",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "VERBOSE",
                "VERY_VERBOSE"
              ]
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "mcp23008": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Configure the interrupt pin to open-drain mode. Useful when the MCP23008\u2019s power supply is greater than 3.3 volts. Note that this pin will require a pull-up resistor (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "32",
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23008 component.\n\n\n\n*See also: [MCP23008 Component](https://esphome.io/components/mcp230xx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "mcp23016": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "address": { "type": "string", "default": "32" } },
          "type": ["object", "null"]
        }
      ]
    },
    "mcp23017": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": { "type": "boolean", "default": false },
            "address": { "type": "string", "default": "32" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "mcp23s08": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Configure interrupt pins to open-drain mode. Useful when the MCP23S08\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "deviceaddress": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The address of the chip. Defaults to `0`.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23S08 component.\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**int**: The SPI chip select pin to use\n\n\n\n*See also: [MCP23S08 Component](https://esphome.io/components/mcp23Sxx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "mcp23s17": {
      "allOf": [
        {
          "properties": {
            "open_drain_interrupt": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Configure interrupt pins to open-drain mode. Useful when the MCP23S17\u2019s power supply is greater than 3.3 volts. Note that these pins will require pull-up resistors (to 3.3 volts) when this mode is enabled.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "deviceaddress": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The address of the chip. Defaults to `0`.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP23S17 component.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            },
            "cs_pin": {
              "markdownDescription": "**int**: The SPI chip select pin to use.\n\n\n\n*See also: [MCP23S17 Component](https://esphome.io/components/mcp23Sxx.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "mcp3204": {
      "allOf": [
        {
          "properties": {
            "reference_voltage": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "3.3V",
              "markdownDescription": "**float**: The reference voltage. Defaults to `3.3V`.\n\n\n\n*See also: [mcp3204 Component/Hub](https://esphome.io/components/sensor/mcp3204.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this MCP3204 component.\n\n\n\n*See also: [mcp3204 Component/Hub](https://esphome.io/components/sensor/mcp3204.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The SPI cable select pin to use.\n\n\n\n*See also: [mcp3204 Component/Hub](https://esphome.io/components/sensor/mcp3204.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "modbus": {
      "allOf": [
        {
          "properties": {
            "flow_control_pin": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
            "send_wait_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "250ms"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "modbus_controller": {
      "allOf": [
        {
          "properties": {
            "command_throttle": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0ms"
            },
            "address": { "type": "string", "default": "1" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "mpr121": {
      "allOf": [
        {
          "properties": {
            "release_debounce": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The minimum length that no touch is recognized before a release event is created. Range is from 0 to 7. Defaults to 0.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "touch_debounce": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The minimum length before a touch is recognized. Range is from 0 to 7. Defaults to 0.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "touch_threshold": {
              "type": "number",
              "default": 11,
              "markdownDescription": "**int**: The touch threshold for all channels. This defines the sensitivity for touch detection and should be between 5 and 30 (lower = more sensitive). Defaults to 12. Typically the touch threshold is a little bigger than the release threshold.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "release_threshold": {
              "type": "number",
              "default": 6,
              "markdownDescription": "**int**: The release defines the sensitivity for touch detection and should be between 5 and 30. Defaults to 6.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "90",
              "markdownDescription": "**int**: The I\u00b2C address of the sensor. Defaults to `0x5A`.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor.\n\n\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "mqtt-ssl_fingerprints": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "mqtt-on_message": {
      "properties": {
        "topic": {
          "type": "string",
          "markdownDescription": "**string**: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
        },
        "qos": {
          "type": ["null", "object", "string", "array", "number"],
          "default": 0,
          "markdownDescription": "**int**: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
        },
        "payload": {
          "type": "string",
          "markdownDescription": "**string**: Optionally set a payload to match. Only if exactly the payload you specify with this option is received, the automation will be executed.\n\n\n\n*See also: [on_message Trigger](https://esphome.io/components/mqtt.html#on-message-trigger)*"
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["topic"]
    },
    "mqtt-on_json_message": {
      "properties": {
        "topic": {
          "type": "string",
          "markdownDescription": "**string**: The MQTT topic to subscribe to and listen for MQTT messages on. Every time a message with **this exact topic** is received, the automation will trigger.\n\n\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#on-json-message-trigger)*"
        },
        "qos": {
          "type": ["null", "object", "string", "array", "number"],
          "default": 0,
          "markdownDescription": "**int**: The MQTT Quality of Service to subscribe to the topic with. Defaults to 0.\n\n\n\n*See also: [on_json_message Trigger](https://esphome.io/components/mqtt.html#on-json-message-trigger)*"
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["topic"]
    },
    "my9231": {
      "allOf": [
        {
          "properties": {
            "data_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which DI is connected to.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which DCKI is connected to.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "num_channels": {
              "type": "number",
              "default": 6,
              "markdownDescription": "**int**: Total number of channels of the whole chain. Must be in range from 3 to 1020. Defaults to 6.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "num_chips": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Number of chips in the chain. Must be in range from 1 to 255. Defaults to 2.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "bit_depth": {
              "enum": [8, 12, 14, 16],
              "markdownDescription": "**int**: The bit depth to use for all output channels in this chain. Must be one of 8, 12, 14 or 16. Defaults to 16.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `my9231` component. Use this if you have multiple MY9231/MY9291 chains connected at the same time.\n\n\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["data_pin", "clock_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "output-custom-binary": {
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        },
        "outputs": {
          "anyOf": [
            { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" }
            }
          ],
          "markdownDescription": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["lambda", "outputs"]
    },
    "output-custom-float": {
      "properties": {
        "lambda": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the output(s).\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        },
        "outputs": {
          "anyOf": [
            { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" }
            }
          ],
          "markdownDescription": "**list**: A list of outputs to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Output](https://esphome.io/components/output/index.html#config-output).\n  \n  \n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["lambda", "outputs"]
    },
    "output-modbus_controller-coil": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "address": { "type": "number" },
            "custom_command": {
              "anyOf": [
                {
                  "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                  }
                }
              ]
            },
            "offset": { "type": "number" },
            "byte_offset": { "type": "number" },
            "bitmask": { "type": "string", "default": "4294967295" },
            "skip_updates": { "type": "number", "default": 0 },
            "force_new_range": { "type": "boolean", "default": false },
            "lambda": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "response_size": { "type": "number", "default": 0 },
            "write_lambda": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "use_write_multiple": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-modbus_controller-holding": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "address": { "type": "number" },
            "custom_command": {
              "anyOf": [
                {
                  "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                  }
                }
              ]
            },
            "offset": { "type": "number" },
            "byte_offset": { "type": "number" },
            "bitmask": { "type": "string", "default": "4294967295" },
            "skip_updates": { "type": "number", "default": 0 },
            "force_new_range": { "type": "boolean", "default": false },
            "lambda": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "response_size": { "type": "number", "default": 0 },
            "value_type": {
              "enum": [
                "RAW",
                "U_WORD",
                "S_WORD",
                "U_DWORD",
                "U_DWORD_R",
                "S_DWORD",
                "S_DWORD_R",
                "U_QWORD",
                "U_QWORDU_R",
                "S_QWORD",
                "U_QWORD_R",
                "FP32",
                "FP32_R"
              ]
            },
            "write_lambda": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "multiply": { "type": "number", "default": 1.0 },
            "use_write_multiple": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-battery_recharge_voltage-possible_values": {
      "type": "number"
    },
    "output-pipsolar-battery_recharge_voltage": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-battery_under_voltage": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-battery_float_voltage": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-battery_type": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-current_max_ac_charging_current": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-current_max_charging_current": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-output_source_priority": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-charger_source_priority": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-pipsolar-battery_redischarge_voltage": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "possible_values": {
              "anyOf": [
                {
                  "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage-possible_values"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "output-template-binary": {
      "allOf": [
        { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
        {
          "properties": {
            "write_action": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the state of the output is updated.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["write_action"]
        }
      ]
    },
    "output-template-float": {
      "allOf": [
        { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
        {
          "properties": {
            "write_action": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the state of the output is updated.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["write_action"]
        }
      ]
    },
    "packages-<class 'str'>-files": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "pca9685": {
      "allOf": [
        {
          "properties": {
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**float**: The frequency to let the component drive all PWM outputs at. Must be in range from 24Hz to 1525.88Hz.\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "64",
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x00`.\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this pca9685 component. Use this if you have multiple PCA9685s connected at the same time\n\n\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["frequency"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "pcf8574": {
      "allOf": [
        {
          "properties": {
            "pcf8575": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether this is a 16-pin PCF8575. Defaults to `false`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "33",
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x21`.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this PCF8574 component.\n\n\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "pn532": { "type": ["null", "object", "string", "array", "number"] },
    "pn532_spi": {
      "allOf": [
        {
          "properties": {
            "on_tag": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag).\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "on_finished_write": { "$ref": "#/definitions/simple_automation" },
            "on_tag_removed": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is removed. See [on_tag_removed](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag-removed).\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that the chip select line is connected to.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the PN532. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to 1s.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "power_supply": {
      "allOf": [
        {
          "properties": {
            "pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to control the power supply on.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "enable_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "20ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time to that the power supply needs for startup. The output component will wait for this period of time after turning on the PSU and before switching the output on. Defaults to `20ms`.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "keep_on_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "10s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the power supply should be kept enabled after the last output that used it has been switch off. Defaults to `10s`.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the power supply so that it can be used by the outputs.\n\n\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "qr_code": {
      "properties": {
        "value": { "type": "string" },
        "ecc": { "enum": ["LOW", "MEDIUM", "QUARTILE", "HIGH"] }
      },
      "type": ["object", "null"],
      "required_": ["value"]
    },
    "rc522_i2c": {
      "allOf": [
        {
          "properties": {
            "reset_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to the RST line. Some tests shows the RC522 working okay without this.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "on_tag": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag).\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "address": {
              "type": "string",
              "default": "44",
              "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x28`.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "i2c_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [I\u00b2C Component](https://esphome.io/components/i2c.html#i2c) if you want to use multiple I\u00b2C buses.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the RC522. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to `1s`.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "rc522_spi": {
      "allOf": [
        {
          "properties": {
            "reset_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to the RST line. Some tests shows the RC522 working okay without this.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "on_tag": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag Action](https://esphome.io/components/binary_sensor/rc522.html#rc522-on-tag).\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that the chip select line is connected to.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "spi_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the RC522. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to `1s`.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "remote_receiver": {
      "allOf": [
        {
          "properties": {
            "pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to receive the remote signal on.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "dump": {
              "type": "array",
              "default": [],
              "markdownDescription": "**list**: Decode and dump these remote codes in the logs (at log.level=DEBUG). Set to `all` to dump all available codecs:\n  * **coolix**: Decode and dump Coolix infrared codes.\n  \n  * **dish**: Decode and dump Dish infrared codes.\n  \n  * **jvc**: Decode and dump JVC infrared codes.\n  \n  * **lg**: Decode and dump LG infrared codes.\n  \n  * **midea**: Decode and dump Midea infrared codes.\n  \n  * **nec**: Decode and dump NEC infrared codes.\n  \n  * **nexa**: Decode and dump Nexa (RF) codes.\n  \n  * **panasonic**: Decode and dump Panasonic infrared codes.\n  \n  * **pioneer**: Decode and dump Pioneer infrared codes.\n  \n  * **raw**: Print all remote codes in their raw form. Useful for using arbitrary protocols.\n  \n  * **rc5**: Decode and dump RC5 IR codes.\n  \n  * **rc_switch**: Decode and dump RCSwitch RF codes.\n  \n  * **samsung**: Decode and dump Samsung infrared codes.\n  \n  * **samsung36**: Decode and dump Samsung36 infrared codes.\n  \n  * **sony**: Decode and dump Sony infrared codes.\n  \n  * **toshiba_ac**: Decode and dump Toshiba AC infrared codes.\n  \n  \n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "tolerance": {
              "type": "string",
              "default": "25",
              "markdownDescription": "**int**: The percentage that the remote signal lengths can deviate in the decoding process. Defaults to `25%`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The size of the internal buffer for storing the remote codes. Defaults to `10kB` on the ESP32 and `1kB` on the ESP8266.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "filter": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "50us",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Filter any pulses that are shorter than this. Useful for removing glitches from noisy signals. Defaults to `50us`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "idle": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "10ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time that a signal should remain stable (i.e. not change) for it to be considered complete. Defaults to `10ms`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "memory_blocks": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 3,
              "markdownDescription": "**int**: The number of RMT memory blocks used. Only used on ESP32 platform. Defaults to `3`.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_coolix": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Coolix remote code has been decoded. A variable `x` of type [remote_base::CoolixData](https://esphome.io/api/classesphome_1_1remote__base_1_1_coolix_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_dish": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a dish network remote code has been decoded. A variable `x` of type [remote_base::DishData](https://esphome.io/api/structesphome_1_1remote__base_1_1_dish_data.html) is passed to the automation for use in lambdas. Beware that Dish remotes use a different carrier frequency (57.6kHz) that many receiver hardware don\u2019t decode.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_jvc": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a JVC remote code has been decoded. A variable `x` of type [remote_base::JVCData](https://esphome.io/api/structesphome_1_1remote__base_1_1_j_v_c_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_lg": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a LG remote code has been decoded. A variable `x` of type [remote_base::LGData](https://esphome.io/api/structesphome_1_1remote__base_1_1_l_g_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "on_nec": { "$ref": "#/definitions/simple_automation" },
            "on_pioneer": { "$ref": "#/definitions/simple_automation" },
            "on_pronto": { "$ref": "#/definitions/simple_automation" },
            "on_sony": { "$ref": "#/definitions/simple_automation" },
            "on_raw": { "$ref": "#/definitions/simple_automation" },
            "on_rc5": { "$ref": "#/definitions/simple_automation" },
            "on_rc_switch": { "$ref": "#/definitions/simple_automation" },
            "on_samsung": { "$ref": "#/definitions/simple_automation" },
            "on_samsung36": { "$ref": "#/definitions/simple_automation" },
            "on_toshiba_ac": { "$ref": "#/definitions/simple_automation" },
            "on_panasonic": { "$ref": "#/definitions/simple_automation" },
            "on_nexa": { "$ref": "#/definitions/simple_automation" },
            "on_midea": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Midea remote code has been decoded. A variable `x` of type [remote_base::MideaData](https://esphome.io/api/classesphome_1_1remote__base_1_1_midea_data.html) is passed to the automation for use in lambdas.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Use this if you have multiple remote receivers.\n\n\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "remote_transmitter": {
      "allOf": [
        {
          "properties": {
            "pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to transmit the remote signal on.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            },
            "carrier_duty_percent": {
              "type": "string",
              "markdownDescription": "**int**: How much of the time the remote is on. For example, infrared protocols modulate the signal using a carrier signal. Set this is `50%` if you\u2019re working with IR LEDs and to `100%` if working with other things like 433MHz transmitters.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Use this if you have multiple remote transmitters.\n\n\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin", "carrier_duty_percent"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "rtttl": {
      "allOf": [
        {
          "properties": {
            "on_finished_playback": {
              "$ref": "#/definitions/simple_automation"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "script": {
      "allOf": [
        { "$ref": "#/definitions/AUTOMATION.AUTOMATION_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string" },
            "mode": { "enum": ["single", "restart", "queued", "parallel"] },
            "max_runs": { "type": "number" }
          },
          "type": ["object", "null"],
          "required_": ["id"]
        }
      ]
    },
    "sensor-atm90e32-phase_a": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of this phase in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of this phase in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power value on this phase in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "reactive_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the reactive power value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "power_factor": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power factor value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "forward_active_energy": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the forward active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "reverse_active_energy": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the reverse active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "gain_voltage": {
          "type": "number",
          "default": 7305,
          "markdownDescription": "**int**: Voltage gain to scale the low voltage AC power pack to household mains feed. Defaults to `7305`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        },
        "gain_ct": {
          "type": "number",
          "default": 27961,
          "markdownDescription": "**int**: CT clamp calibration for this phase. Defaults to `27961`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-binary_sensor_map-group-channels": {
      "properties": { "value": { "type": "number" } },
      "type": ["object", "null"],
      "required_": ["value"]
    },
    "sensor-binary_sensor_map-group": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "channels": {
              "anyOf": [
                {
                  "$ref": "#/definitions/sensor-binary_sensor_map-group-channels"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sensor-binary_sensor_map-group-channels"
                  }
                }
              ]
            }
          },
          "type": ["object", "null"],
          "required_": ["channels"]
        }
      ]
    },
    "sensor-bme280-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme280-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme280-humidity": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680-humidity": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680_bsec-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "sample_rate": {
              "enum": ["LP", "ULP"],
              "markdownDescription": "**string**: Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680_bsec-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "sample_rate": {
              "enum": ["LP", "ULP"],
              "markdownDescription": "**string**: Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bme680_bsec-humidity": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "sample_rate": {
              "enum": ["LP", "ULP"],
              "markdownDescription": "**string**: Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the humidity sensor.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp280-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp280-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "1X", "2X", "4X", "8X", "16X"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp3xx-temperature": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "2X", "4X", "8X", "16X", "32x"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp3xx.html#bmp3xx-oversampling).\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-bmp3xx-pressure": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "oversampling": {
              "enum": ["NONE", "2X", "4X", "8X", "16X", "32x"],
              "markdownDescription": "The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp3xx.html#bmp3xx-oversampling).\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the pressure sensor.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sensor-growatt_solar-phase_a": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        },
        "active_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-growatt_solar-pv1": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        },
        "active_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-havells_solar-phase_a": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-havells_solar-pv1": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        },
        "active_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        },
        "voltage_sampled_by_secondary_cpu": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the photo voltiac\u2019s voltage sampled by slave CPU value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        },
        "insulation_of_p_to_ground": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the insulation of photo voltiac\u2019s +ve terminal to ground value of the sensor in kilo ohms. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-hm3301-aqi": {
      "allOf": [
        { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
        {
          "properties": {
            "calculation_type": {
              "enum": ["CAQI", "AQI"],
              "markdownDescription": "One of: `AQI` or `CAQI`.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            },
            "name": {
              "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["calculation_type"]
        }
      ]
    },
    "sensor-ina3221-channel_1": {
      "properties": {
        "bus_voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the bus voltage (voltage of the high side contact) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "shunt_voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value on this channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power value on this channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        },
        "shunt_resistance": {
          "type": ["null", "object", "string", "array", "number"],
          "default": 0.1,
          "markdownDescription": "**float**: The value of the shunt resistor on this channel for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-kalman_combinator-sources": {
      "properties": {
        "error": { "type": ["null", "object", "string", "array", "number"] }
      },
      "type": ["object", "null"],
      "required_": ["error"]
    },
    "sensor-sdm_meter-phase_a": {
      "properties": {
        "voltage": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the voltage value of the sensor in volts (V). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "current": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "active_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the (active) power value of the sensor in watts (W). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "apparent_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the apparent power value of the sensor in volt amps (VA). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "reactive_power": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the reactive power value of the sensor in volt amps reactive (VAR). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "power_factor": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the power factor value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        },
        "phase_angle": {
          "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
          "markdownDescription": "Use the phase angle value of the sensor in degrees (\u00b0). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"]
    },
    "sensor-sgp30-baseline": {
      "properties": {
        "eco2_baseline": {
          "type": "string",
          "markdownDescription": "**int**: The eCO2 baseline for calibration purposes. After OTA, this value is used to calibrate the sensor.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
        },
        "tvoc_baseline": {
          "type": "string",
          "markdownDescription": "**int**: The TVOC baseline for calibration purposes. After OTA, this value is used to calibrate the sensor.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["eco2_baseline", "tvoc_baseline"]
    },
    "sensor-sgp30-compensation": {
      "properties": {},
      "type": ["object", "null"]
    },
    "servo": {
      "allOf": [
        {
          "properties": {
            "min_level": { "type": "string", "default": "3%" },
            "idle_level": { "type": "string", "default": "7.5%" },
            "max_level": { "type": "string", "default": "12%" },
            "restore": { "type": "boolean", "default": false },
            "auto_detach_time": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s"
            },
            "transition_length": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0s"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sim800l": {
      "allOf": [
        {
          "properties": {
            "on_sms_received": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an SMS is received. See [on_sms_received Trigger](https://esphome.io/components/sim800l.html#sim800l-on-sms-received).\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "sm16716": {
      "allOf": [
        {
          "properties": {
            "data_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for MOSI.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which SCLK is connected to.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "num_channels": {
              "type": "number",
              "default": 3,
              "markdownDescription": "**int**: Total number of channels of the whole chain. Must be in range from 3 to 255. Defaults to 3.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "num_chips": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**int**: Number of chips in the chain. Must be in range from 1 to 85. Defaults to 1.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `sm16716` component. Use this if you have multiple SM16716 chains connected at the same time.\n\n\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["data_pin", "clock_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sm2135": {
      "allOf": [
        {
          "properties": {
            "data_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for MOSI.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin which SCLK is connected to.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `sm2135` component. Use this if you have multiple SM2135 chains connected at the same time.\n\n\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["data_pin", "clock_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sn74hc595": {
      "allOf": [
        {
          "properties": {
            "data_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 SER input.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 SRCLK pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "latch_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 RCLK pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "oe_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Pin connected to SN74HC595 OE pin\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "sr_count": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**int**: Number of daisy-chained shift registers, up-to 4. Defaults to `1`.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this SN74HC595 component.\n\n\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["data_pin", "clock_pin", "latch_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "spi": {
      "properties": {
        "clk_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the clock line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "miso_pin": {
          "$ref": "#/definitions/PIN.INPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the MISO line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "mosi_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin used for the MOSI line of the SPI bus.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this SPI hub if you need multiple SPI hubs.\n\n\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["clk_pin"]
    },
    "sun-on_sunrise": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333,
              "markdownDescription": "**float**: The elevation to cross. Defaults to -0.833\u00b0 (the horizon, slightly less than 0\u00b0 to compensate for atmospheric refraction).\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "sun-on_sunset": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
        },
        { "$ref": "#/definitions/automation.ACTION_REGISTRY" },
        {
          "properties": {
            "elevation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": -0.83333,
              "markdownDescription": "**float**: The elevation to cross. Defaults to -0.833\u00b0 (the horizon, slightly less than 0\u00b0 to compensate for atmospheric refraction).\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
            },
            "then": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/automation.ACTION_REGISTRY"
                  }
                },
                { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
              ]
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch-custom-switches": {
      "allOf": [
        { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
        {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "switch-gpio-interlock": { "type": "string", "id_type": "switch_::Switch" },
    "switch-pipsolar-output_source_priority_utility": {
      "allOf": [
        { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "sx1509-keypad": {
      "properties": {
        "key_rows": {
          "type": "number",
          "markdownDescription": "**int**: The number of keypad rows to use. This enables any number of the first 7 pins. So a value of 3 enables pins 0,1,2 to be used as the rows for the keypad matrix. This value must be between 1 and 8.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "key_columns": {
          "type": "number",
          "markdownDescription": "**int**: The number of keypad columns to use. This enables any number of the last 7 pins. So a value of 4 enables pins 8,9,10,11 to be used as the columns for the keypad matrix. This value must be between 1 and 8.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "sleep_time": {
          "type": "number",
          "markdownDescription": "**int**: No key press within this time will set keypad engine to sleep.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "scan_time": {
          "type": "number",
          "markdownDescription": "**int**: Scan time per row (must be set above debounce time).\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        },
        "debounce_time": {
          "type": "number",
          "markdownDescription": "**int**: The debounce time is common to all IOs.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["key_rows", "key_columns"]
    },
    "sx1509": {
      "allOf": [
        {
          "properties": {
            "keypad": {
              "$ref": "#/definitions/sx1509-keypad",
              "markdownDescription": "Add this to enable the keypad.\n  * **key_rows** (**Required**, int): The number of keypad rows to use. This enables any number of the first 7 pins. So a value of 3 enables pins 0,1,2 to be used as the rows for the keypad matrix. This value must be between 1 and 8.\n  \n  * **key_columns** (**Required**, int): The number of keypad columns to use. This enables any number of the last 7 pins. So a value of 4 enables pins 8,9,10,11 to be used as the columns for the keypad matrix. This value must be between 1 and 8.\n  \n  * **sleep_time** (*Optional*, int): No key press within this time will set keypad engine to sleep.\n  \n  * **scan_time** (*Optional*, int): Scan time per row (must be set above debounce time).\n  \n  * **debounce_time** (*Optional*, int): The debounce time is common to all IOs.\n  \n  \n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "62",
              "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x3E`.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this SX1509 component.\n\n\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "tca9548a-channels": {
      "properties": { "channel": { "type": "number" } },
      "type": ["object", "null"],
      "required_": ["channel"]
    },
    "tca9548a": {
      "allOf": [
        {
          "properties": {
            "channels": {
              "anyOf": [
                { "$ref": "#/definitions/tca9548a-channels" },
                {
                  "type": "array",
                  "items": { "$ref": "#/definitions/tca9548a-channels" }
                }
              ],
              "markdownDescription": "The I\u00b2C Bus Channels\n  * **bus_id** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id)): The id to use for this virtual I2C Bus.\n  \n  * **channel** (**Required**): The channel (0-7) to use for this virtual I2C Bus.\n  \n  \n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "address": {
              "type": "string",
              "default": "112",
              "markdownDescription": "**int**: The I\u00b2C address of the Multiplexer. Defaults to `0x70`.\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this TCA9548A component.\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            },
            "i2c_id": {
              "markdownDescription": "The I\u00b2C Bus ID Defaults to `false`\n\n\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "text_sensor-wifi_info-scan_results": {
      "allOf": [
        { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ]
    },
    "time-sntp-servers": {
      "type": ["null", "object", "string", "array", "number"]
    },
    "tlc59208f": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": { "address": { "type": "string", "default": "32" } },
          "type": ["object", "null"]
        }
      ]
    },
    "tlc5947": {
      "allOf": [
        {
          "properties": {
            "data_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to DIN.\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            },
            "clock_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to CLK.\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            },
            "lat_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to LAT.\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            },
            "oe_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to /OE (BLANK).\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            },
            "num_chips": {
              "type": "number",
              "default": 1,
              "markdownDescription": "**int**: Number of chips in the chain. Must be in range from 1 to 85. Defaults to 1.\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this `tlc5947` component. Use this if you have multiple TLC5947 chains connected at the same time.\n\n\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["data_pin", "clock_pin", "lat_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "ttp229_bsf": {
      "allOf": [
        {
          "properties": {
            "sdo_pin": {
              "$ref": "#/definitions/PIN.GPIO_FULL_INPUT_PIN_SCHEMA",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin the SDO pin is connected to.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            },
            "scl_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin the SCL pin is connected to.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually set the ID of this component.\n\n\n\n*See also: [ttp229_bsf Component](https://esphome.io/components/binary_sensor/ttp229.html#id1)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["sdo_pin", "scl_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "ttp229_lsf": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        {
          "properties": {
            "address": { "type": "string", "default": "87" },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually set the ID of this sensor.\n\n\n\n*See also: [ttp229_lsf Component](https://esphome.io/components/binary_sensor/ttp229.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "tuya-on_datapoint_update": {
      "properties": {
        "sensor_datapoint": { "type": "number" },
        "datapoint_type": {
          "enum": [
            "any",
            "raw",
            "bool",
            "int",
            "uint",
            "string",
            "enum",
            "bitmask"
          ]
        },
        "then": {
          "anyOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
            },
            { "$ref": "#/definitions/automation.ACTION_REGISTRY" }
          ]
        }
      },
      "type": ["object", "null"],
      "required_": ["sensor_datapoint"]
    },
    "uart": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this UART hub if you need multiple UART hubs.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "baud_rate": {
              "type": "number",
              "markdownDescription": "**int**: The baud rate of the UART bus.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "tx_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to send data to from the ESP\u2019s perspective. Use the full pin schema and set `inverted: true` to invert logic levels.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "rx_pin": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to receive data on from the ESP\u2019s perspective. Use the full pin schema and set `inverted: true` to invert logic levels.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "rx_buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 256,
              "markdownDescription": "**int**: The size of the buffer used for receiving UART messages. Increase if you use an integration that needs to read big payloads from UART. Defaults to `256`.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "stop_bits": {
              "enum": [1, 2],
              "markdownDescription": "**int**: The number of stop bits to send. Options: 1, 2. Defaults to 1.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "data_bits": {
              "type": "number",
              "default": 8,
              "markdownDescription": "**int**: The number of data bits used on the UART bus. Options: 5 to 8. Defaults to 8.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "parity": {
              "enum": ["NONE", "EVEN", "ODD"],
              "markdownDescription": "The parity used on the UART bus. Options: `NONE`, `EVEN`, `ODD`. Defaults to `NONE`.\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            },
            "debug": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**mapping**: Options for debugging communication on the UART hub, see [Debugging](https://esphome.io/components/uart.html#uart-debugging).\n\n\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["baud_rate"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "web_server-auth": {
      "properties": {
        "username": {
          "$ref": "#/definitions/esphome-libraries",
          "markdownDescription": "**string**: The username to use for authentication.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
        },
        "password": {
          "$ref": "#/definitions/esphome-libraries",
          "markdownDescription": "**string**: The password to check for authentication.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["username", "password"]
    },
    "wifi-networks": {
      "allOf": [
        {
          "properties": {
            "ssid": {
              "type": "string",
              "markdownDescription": "**string**: The SSID or WiFi network name.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "password": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The password to use for authentication. Leave empty for no password.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "channel": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The channel of the network (1-14). If given, only connects to networks that are on this channel.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "manual_ip": {
              "$ref": "#/definitions/ethernet-manual_ip",
              "markdownDescription": "Manually configure the static IP of the node when using this network. Note that when using different static IP addresses on each network, it is required to set `use_address`, as ESPHome cannot infer to which network the node is connected.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use.\n  \n  \n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "bssid": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The connection\u2019s BSSID (MAC address). BSSIDs must consist of six two-digit hexadecimal values separated by colon characters (\u201c`:`\u201d). All letters must be in upper case.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "hidden": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Whether this network is hidden. Defaults to false. If you add this option you also have to specify ssid.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "priority": {
              "type": "number",
              "default": 0.0,
              "markdownDescription": "**float**: The priority of this network. After each time, the network with the highest priority is chosen. If the connection fails, the priority is decreased by one. Defaults to `0`.\n\n\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
            },
            "eap": {
              "properties": {
                "identity": {
                  "type": "string",
                  "markdownDescription": "**string**: The outer identity to pass to the EAP authentication server. This is required for EAP-TLS.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "username": {
                  "type": "string",
                  "markdownDescription": "**string**: The username to present to the authenticating server.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "password": {
                  "type": "string",
                  "markdownDescription": "**string**: The password to present to the authentication server. For EAP-TLS this password may be set to decrypt to private key instead.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "certificate_authority": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded certificate to use when validating the authentication server.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "certificate": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded certificate to use for EAP-TLS authentication.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                },
                "key": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**string**: Path to a PEM encoded private key matching `certificate` for EAP-TLS authentication. Optionally encrypted with `password`.\n\n\n\n*See also: [Enterprise Authentication](https://esphome.io/components/wifi.html#enterprise-authentication)*"
                }
              },
              "type": ["object", "null"],
              "markdownDescription": "WPA2_EAP Enterprise Authentication is supported on ESP32s and ESP8266s. In order to configure this feature you must use the [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks) style configuration. The ESP32 is known to work with PEAP, EAP-TTLS, and the certificate based EAP-TLS. These are advanced settings and you will usually need to consult your enterprise network administrator.\n\n*See also: [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#enterprise-authentication)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "Starting with version 1.10.0, you can give ESPHome a number of WiFi networks to connect to. ESPHome will then attempt to connect to the one with the highest signal strength.\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#connecting-to-multiple-networks)*"
    },
    "wifi-ap": {
      "allOf": [
        {
          "properties": {
            "ssid": {
              "type": "string",
              "markdownDescription": "**string**: The name of the access point to create. Leave empty to use the device name.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "password": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**string**: The password for the access point. Leave empty for no password.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "channel": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**int**: The channel the AP should operate on from 1 to 14. Defaults to 1.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "manual_ip": {
              "$ref": "#/definitions/ethernet-manual_ip",
              "markdownDescription": "Manually set the IP options for the AP. Same options as manual_ip for station mode.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            },
            "ap_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1min",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time after which to enable the configured fallback hotspot. Defaults to `1min`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        }
      ]
    },
    "xpt2046": {
      "allOf": [
        {
          "properties": {
            "irq_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The touch detection pin. Often marked `T_IRQ` on the board. If not specified the component will use polling via SPI.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "calibration_x_min": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The raw value corresponding to the left (or top if `swap_x_y` is specified) edge of the display. See [Calibration](https://esphome.io/components/binary_sensor/xpt2046.html#xpt2046-calibration) for the process to calibrate the touch screen. Defaults to `0`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "calibration_x_max": {
              "type": "number",
              "default": 4095,
              "markdownDescription": "**int**: The raw value corresponding to the right (or bottom if `swap_x_y` is specified) edge of the display. Defaults to `4095`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "calibration_y_min": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The raw value corresponding to the top (or left if `swap_x_y` is specified) edge of the display. Defaults to `0`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "calibration_y_max": {
              "type": "number",
              "default": 4095,
              "markdownDescription": "**int**: The raw value corresponding to the bottom (or right if `swap_x_y` is specified) edge of the display. Defaults to `4095`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "dimension_x": {
              "type": "number",
              "default": 100,
              "markdownDescription": "**int**: The dimension of the display in the horizontal direction. Usually in pixels but a percentage can be useful as well. Defaults to `100`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "dimension_y": {
              "type": "number",
              "default": 100,
              "markdownDescription": "**int**: The dimension of the display in the vertical direction. Usually in pixels but a percentage can be useful as well. Defaults to `100`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "threshold": {
              "type": "number",
              "default": 400,
              "markdownDescription": "**int**: The value to detect the touch or release. Defaults to `400`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "report_interval": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "never",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to periodically report the coordinates while the touch screen is touched. Defaults to `never`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "swap_x_y": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: If true the x and y axes are swapped. Defaults to `false`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "on_state": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when the touch screen is pressed or released. See [on_state Action](https://esphome.io/components/binary_sensor/xpt2046.html#xpt2046-on-state).\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The chip select pin. Often marked `T_CS` on the board.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. If `irq_pin` is specified the touch will be detected nearly instantaneously and this setting will be used only for the release detection. Defaults to `50ms`.\n\n\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" },
        { "$ref": "#/definitions/spi_bus" }
      ]
    },
    "automation.ACTION_REGISTRY-binary_sensor.template.publish": {
      "type": "object",
      "properties": {
        "binary_sensor.template.publish": {
          "properties": {
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state"],
          "markdownDescription": "You can also publish a state to a template binary sensor from elsewhere in your YAML file with the `binary_sensor.template.publish` action.\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#binary-sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.follow_me": {
      "type": "object",
      "properties": {
        "midea_ac.follow_me": {
          "properties": {
            "temperature": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "beeper": {
              "type": ["null", "object", "string", "array", "number"],
              "default": false
            }
          },
          "type": ["object", "null"],
          "required_": ["temperature"]
        }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.display_toggle": {
      "type": "object",
      "properties": {
        "midea_ac.display_toggle": {
          "properties": {},
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.swing_step": {
      "type": "object",
      "properties": {
        "midea_ac.swing_step": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.beeper_on": {
      "type": "object",
      "properties": {
        "midea_ac.beeper_on": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.beeper_off": {
      "type": "object",
      "properties": {
        "midea_ac.beeper_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.power_on": {
      "type": "object",
      "properties": {
        "midea_ac.power_on": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-midea_ac.power_off": {
      "type": "object",
      "properties": {
        "midea_ac.power_off": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.reset_integral_term": {
      "type": "object",
      "properties": {
        "climate.pid.reset_integral_term": {
          "properties": {},
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.autotune": {
      "type": "object",
      "properties": {
        "climate.pid.autotune": {
          "properties": {
            "noiseband": { "type": "number", "default": 0.25 },
            "positive_output": { "type": "string", "default": "1.0" },
            "negative_output": { "type": "string", "default": "-1.0" }
          },
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-climate.pid.set_control_parameters": {
      "type": "object",
      "properties": {
        "climate.pid.set_control_parameters": {
          "properties": {
            "kp": { "type": ["null", "object", "string", "array", "number"] },
            "ki": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0.0
            },
            "kd": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0.0
            }
          },
          "type": ["object", "null"],
          "required_": ["kp"]
        }
      }
    },
    "automation.ACTION_REGISTRY-cover.template.publish": {
      "type": "object",
      "properties": {
        "cover.template.publish": {
          "properties": {
            "state": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "position": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "current_operation": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "tilt": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "markdownDescription": "You can also publish a state to a template cover from elsewhere in your YAML file with the `cover.template.publish` action.\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#cover-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-fan.hbridge.brake": {
      "type": "object",
      "properties": {
        "fan.hbridge.brake": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-lock.template.publish": {
      "type": "object",
      "properties": {
        "lock.template.publish": {
          "properties": {
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state"]
        }
      }
    },
    "automation.ACTION_REGISTRY-output.esp8266_pwm.set_frequency": {
      "type": "object",
      "properties": {
        "output.esp8266_pwm.set_frequency": {
          "properties": {
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The frequency to set in hertz.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the PWM output to change.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["frequency"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an ESP8266 PWM channel at runtime. Use cases include controlling a passive buzzer (for pitch control).\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#output-esp8266-pwm-set-frequency-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.ledc.set_frequency": {
      "type": "object",
      "properties": {
        "output.ledc.set_frequency": {
          "properties": {
            "frequency": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[templatable](https://esphome.io/guides/automations.html#config-templatable), float**: The frequency to set in hertz.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the LEDC output to change.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["frequency"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) allows you to manually change the frequency of an LEDC channel at runtime. Use cases include controlling a passive buzzer (for pitch control).\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#output-ledc-set-frequency-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-output.pipsolar.set_level": {
      "type": "object",
      "properties": {
        "output.pipsolar.set_level": {
          "properties": {
            "id": { "type": ["null", "object", "string", "array", "number"] },
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["id", "value"]
        }
      }
    },
    "automation.ACTION_REGISTRY-cs5460a.restart": {
      "type": "object",
      "properties": {
        "cs5460a.restart": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This action can be used in automations to interrupt the current *computation cycle* and start a new one.  This is useful if you\u2019re measuring multiple current/power values using a single CS5460A chip and a signal multiplexer.  As an example you can measure the power usage on up to wall sockets in a house by using one voltage transformer and 16 current transformers, each on the cable leading to the corresponding wall socket.  One side of all the current transformers connects directly to your CS5460A current input terminal (plus any filtering and protection circuitry as recommended in the datasheet), while the other side each connects to one channel of a CD74HC4067 analog multiplexer.  The multiplexer\u2019s single signal pin then connects to the CS5460A\u2019s second current input terminal.  Every time the CS5460A sensor publishes a new power value, an automation can switch the multiplexer to the next channel but it needs to interrupt the *computation cycle* automatically started when the previous one ended, and start a new cycle that uses current samples only from the new CD74HC4067 multiplexer channel.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#cs5460a-restart-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sensor.integration.reset": {
      "type": "object",
      "properties": {
        "sensor.integration.reset": {
          "properties": {},
          "type": ["object", "null"]
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.abc_disable": {
      "type": "object",
      "properties": {
        "mhz19.abc_disable": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) disables automatic baseline calibration on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-abc-disable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.abc_enable": {
      "type": "object",
      "properties": {
        "mhz19.abc_enable": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) enables automatic baseline calibration on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-abc-enable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-mhz19.calibrate_zero": {
      "type": "object",
      "properties": {
        "mhz19.calibrate_zero": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) executes zero point calibration command on the sensor with the given ID.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mhz19-calibrate-zero-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-pulse_meter.set_total_pulses": {
      "type": "object",
      "properties": {
        "pulse_meter.set_total_pulses": {
          "properties": {
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["value"]
        }
      }
    },
    "automation.ACTION_REGISTRY-pzemac.reset_energy": {
      "type": "object",
      "properties": {
        "pzemac.reset_energy": { "properties": {}, "type": ["object", "null"] }
      }
    },
    "automation.ACTION_REGISTRY-sensor.rotary_encoder.set_value": {
      "type": "object",
      "properties": {
        "sensor.rotary_encoder.set_value": {
          "properties": {
            "value": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["value"],
          "markdownDescription": "The internal state of the rotary encoder can be manually changed to any value with this action. After executing this action, rotating the encoder further will increase/decrease the state relative to the newly set internal value.\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-set-value-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_get_period": {
      "type": "object",
      "properties": {
        "senseair.abc_get_period": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) requests the currently configured ABC interval from the sensor with the given ID. The value will be printed in ESPHome logs.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-get-period-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_disable": {
      "type": "object",
      "properties": {
        "senseair.abc_disable": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) disables Automatic Baseline Calibration on the sensor with the given ID.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-disable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.abc_enable": {
      "type": "object",
      "properties": {
        "senseair.abc_enable": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) enables Automatic Baseline Calibration on the sensor with the given ID. ABC will be activated with the default interval of 180 hours.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-abc-enable-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.background_calibration_result": {
      "type": "object",
      "properties": {
        "senseair.background_calibration_result": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) requests the result of the background calibration procedure from the sensor with the given ID. The value will be printed in ESPHome logs.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-background-calibration-result-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-senseair.background_calibration": {
      "type": "object",
      "properties": {
        "senseair.background_calibration": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [action](https://esphome.io/guides/automations.html#config-action) initiates a background calibration on the sensor with the given ID: the current CO2 level will be used as a reference for the 400ppm threshold. Ensure that the sensor is in a stable environment with fresh ambient air, preferably near a window that has already been opened for a sufficient time.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-background-calibration-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-sensor.template.publish": {
      "type": "object",
      "properties": {
        "sensor.template.publish": {
          "properties": {
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state"],
          "markdownDescription": "You can also publish a state to a template sensor from elsewhere in your YAML file with the `sensor.template.publish` action.\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-switch.template.publish": {
      "type": "object",
      "properties": {
        "switch.template.publish": {
          "properties": {
            "id": { "type": "string", "id_type": "switch_::Switch" },
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["id", "state"],
          "markdownDescription": "You can also publish a state to a template switch from elsewhere in your YAML file with the `switch.template.publish` action.\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#switch-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-text_sensor.template.publish": {
      "type": "object",
      "properties": {
        "text_sensor.template.publish": {
          "properties": {
            "state": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"],
          "required_": ["state"],
          "markdownDescription": "You can also publish a state to a template text sensor from elsewhere in your YAML file with the `text_sensor.template.publish` action.\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#text-sensor-template-publish-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-ds1307.write_time": {
      "type": "object",
      "properties": {
        "ds1307.write_time": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time to the RTC hardware.\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-write-time-action)*"
        }
      }
    },
    "automation.ACTION_REGISTRY-ds1307.read_time": {
      "type": "object",
      "properties": {
        "ds1307.read_time": {
          "properties": {},
          "type": ["object", "null"],
          "markdownDescription": "This [Action](https://esphome.io/guides/automations.html#config-action) triggers a synchronization of the current system time from the RTC hardware.\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-read-time-action)*"
        }
      }
    },
    "PIN.GPIO_FULL_INPUT_PIN_SCHEMA": {
      "oneOf": [
        { "$ref": "#/definitions/PIN.INPUT_INTERNAL", "required": ["number"] },
        { "$ref": "#/definitions/PIN.INPUT_esp32", "required": ["esp32"] },
        { "$ref": "#/definitions/PIN.INPUT_esp8266", "required": ["esp8266"] },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23xxx",
          "required": ["mcp23xxx"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23016",
          "required": ["mcp23016"]
        },
        { "$ref": "#/definitions/PIN.INPUT_pcf8574", "required": ["pcf8574"] },
        {
          "$ref": "#/definitions/PIN.INPUT_sn74hc595",
          "required": ["sn74hc595"]
        },
        { "$ref": "#/definitions/PIN.INPUT_sx1509", "required": ["sx1509"] }
      ],
      "type": ["string", "object"]
    },
    "PIN.INPUT_INTERNAL": {
      "type": ["object", "null"],
      "properties": {
        "number": {
          "type": ["number", "string"],
          "markdownDescription": "**pin**: The pin number.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "inverted": {
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `false`.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        }
      },
      "additionalItems": false
    },
    "PIN.INPUT_esp32-mode": {
      "properties": {
        "input": { "type": "boolean", "default": false },
        "output": { "type": "boolean", "default": false },
        "open_drain": { "type": "boolean", "default": false },
        "pullup": { "type": "boolean", "default": false },
        "pulldown": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_esp32": {
      "properties": {
        "id": { "type": ["null", "object", "string", "array", "number"] },
        "number": { "type": ["null", "object", "string", "array", "number"] },
        "mode": { "$ref": "#/definitions/PIN.INPUT_esp32-mode" },
        "inverted": { "type": "boolean", "default": false },
        "drive_strength": { "properties": {}, "type": ["object", "null"] }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_esp8266-mode": {
      "properties": {
        "analog": { "type": "boolean", "default": false },
        "input": { "type": "boolean", "default": false },
        "output": { "type": "boolean", "default": false },
        "open_drain": { "type": "boolean", "default": false },
        "pullup": { "type": "boolean", "default": false },
        "pulldown": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"]
    },
    "PIN.INPUT_esp8266": {
      "properties": {
        "number": { "type": ["null", "object", "string", "array", "number"] },
        "mode": { "$ref": "#/definitions/PIN.INPUT_esp8266-mode" },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_mcp23xxx": {
      "properties": {
        "number": { "type": "number" },
        "mode": {
          "properties": {
            "input": { "type": "boolean", "default": false },
            "pullup": { "type": "boolean", "default": false },
            "output": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"],
          "default": {}
        },
        "inverted": { "type": "boolean", "default": false },
        "interrupt": { "enum": ["NO_INTERRUPT", "CHANGE", "RISING", "FALLING"] }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_mcp23016": {
      "properties": {
        "number": { "type": "number" },
        "mode": {
          "properties": {
            "input": { "type": "boolean", "default": false },
            "output": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"],
          "default": {}
        },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_pcf8574": {
      "properties": {
        "number": { "type": "number" },
        "mode": {
          "properties": {
            "input": { "type": "boolean", "default": false },
            "output": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"],
          "default": {}
        },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_sn74hc595": {
      "properties": {
        "number": { "type": "number" },
        "mode": {
          "properties": { "output": { "type": "boolean", "default": true } },
          "type": ["object", "null"],
          "default": {}
        },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.INPUT_sx1509": {
      "properties": {
        "number": { "type": "number" },
        "mode": {
          "properties": {
            "input": { "type": "boolean", "default": false },
            "pullup": { "type": "boolean", "default": false },
            "output": { "type": "boolean", "default": false }
          },
          "type": ["object", "null"],
          "default": {}
        },
        "inverted": { "type": "boolean", "default": false }
      },
      "type": ["object", "null"],
      "required_": ["number"]
    },
    "PIN.GPIO_FULL_OUTPUT_PIN_SCHEMA": {
      "oneOf": [
        { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL", "required": ["number"] },
        { "$ref": "#/definitions/PIN.INPUT_esp32", "required": ["esp32"] },
        { "$ref": "#/definitions/PIN.INPUT_esp8266", "required": ["esp8266"] },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23xxx",
          "required": ["mcp23xxx"]
        },
        {
          "$ref": "#/definitions/PIN.INPUT_mcp23016",
          "required": ["mcp23016"]
        },
        { "$ref": "#/definitions/PIN.INPUT_pcf8574", "required": ["pcf8574"] },
        {
          "$ref": "#/definitions/PIN.INPUT_sn74hc595",
          "required": ["sn74hc595"]
        },
        { "$ref": "#/definitions/PIN.INPUT_sx1509", "required": ["sx1509"] }
      ],
      "type": ["string", "object"]
    },
    "PIN.OUTPUT_INTERNAL": {
      "type": ["object", "null"],
      "properties": {
        "number": {
          "type": ["number", "string"],
          "markdownDescription": "**pin**: The pin number.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        },
        "inverted": {
          "markdownDescription": "**boolean**: If all read and written values should be treated as inverted. Defaults to `false`.\n\n\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
        }
      },
      "additionalItems": false
    }
  },
  "properties": {
    "esphome": {
      "$ref": "#/definitions/esphome",
      "markdownDescription": "Here you specify some core information that ESPHome needs to create firmwares. Most importantly, this is the section of the configuration where you specify the **name** of the node.\n\n*See also: [ESPHome Core Configuration](https://esphome.io/components/esphome.html#esphome-core-configuration)*"
    },
    "binary_sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "apds9960" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "direction": {
                      "enum": ["UP", "DOWN", "LEFT", "RIGHT"],
                      "markdownDescription": "**string**: The direction to measure. One of:\n  * **UP**\n  \n  * **DOWN**\n  \n  * **LEFT**\n  \n  * **RIGHT**\n  \n  \n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "running",
                        "safety",
                        "smoke",
                        "sound",
                        "tamper",
                        "update",
                        "vibration",
                        "window"
                      ]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the binary sensor.\n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["direction"]
                }
              ]
            },
            "markdownDescription": "The `apds9960` binary sensor allows you to use your [APDS9960 Sensor to perform different measurements.\n\n*See also: [apds9960 Binary Sensor](https://esphome.io/components/sensor/apds9960.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "as3935" } } },
            "then": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
            },
            "markdownDescription": "Binary sensor that indicates if a lightning strike was detected.\n\n*See also: [as3935 Binary Sensor](https://esphome.io/components/sensor/as3935.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_presence" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address to track for this binary sensor. Note that exactly one of `mac_address`, `service_uuid` or `ibeacon_uuid` must be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: 16 bit, 32 bit, or 128 bit BLE Service UUID which can be tracked if the device randomizes the MAC address. Note that exactly one of `mac_address`, `service_uuid` or `ibeacon_uuid` must be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "ibeacon_major": {
                      "type": "number",
                      "markdownDescription": "**int**: The iBeacon major identifier of the beacon that needs to be tracked. Usually used to group beacons, for example for grouping all beacons in the same building.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "ibeacon_minor": {
                      "type": "number",
                      "markdownDescription": "**int**: The iBeacon minor identifier of the beacon that needs to be tracked. Usually used to identify beacons within an iBeacon group.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "ibeacon_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) to identify the beacon that needs to be tracked. Note that exactly one of `mac_address`, `service_uuid` or `ibeacon_uuid` must be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_presence` binary sensor platform lets you track the presence of a Bluetooth Low Energy device.\n\n*See also: [ESP32 Bluetooth Low Energy Device](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-bluetooth-low-energy-device)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cap1188" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": { "channel": { "type": "number" } },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "The `cap1188` sensor platform allows you to use your CAP1188 ([datasheet](https://cdn-shop.adafruit.com/datasheets/CAP1188.pdf), [Adafruit](https://learn.adafruit.com/adafruit-cap1188-breakout/overview)) Capacitive Touch Sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) bus is required to be set up in your configuration for this sensor to work.\n\n*See also: [CAP1188 Capacitive Touch Sensor](https://esphome.io/components/binary_sensor/cap1188.html#cap1188-capacitive-touch-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the binary sensor(s).\n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
                },
                "binary_sensors": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of binary sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Binary Sensor](https://esphome.io/components/binary_sensor/index.html#config-binary-sensor).\n  \n  \n\n\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "binary_sensors"]
            },
            "markdownDescription": "This integration can be used to create custom binary sensors in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Binary Sensor](https://esphome.io/components/binary_sensor/custom.html#custom-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "daly_bms" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "charging_mos_enabled": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "discharging_mos_enabled": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_touch" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to detect touch events on.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "threshold": {
                      "type": "number",
                      "markdownDescription": "**int**: The threshold to use to detect touch events. Smaller values mean a higher probability that the pad is being touched.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "wakeup_threshold": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: The threshold to use to detect touch events to wakeup from deep sleep. Smaller values mean a higher probability that the pad is being touched. All touch pad sensors that should trigger a wakeup from deep sleep must specify this value. The [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-component) must also be configured to enable a wakeup from a touch event. Note that no filter is active during deep sleep.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin", "threshold"]
                }
              ]
            },
            "markdownDescription": "The `esp32_touch` binary sensor platform lets you use the touch peripheral of the ESP32 to detect if a certain pin is being \u201ctouched\u201d.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fingerprint_grow" } }
            },
            "then": {
              "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [fingerprint_grow Binary Sensor](https://esphome.io/components/fingerprint_grow.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to periodically check.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The GPIO Binary Sensor platform allows you to use any input pin on your device as a binary sensor.\n\n*See also: [GPIO Binary Sensor](https://esphome.io/components/binary_sensor/gpio.html#gpio-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": {
                      "type": "string",
                      "markdownDescription": "**string**: The name of the state attribute to import from the specified entity. The entity state is used when this option is omitted. Requires Home Assistant 2021.6 or newer.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["entity_id"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `homeassistant` binary sensor platform allows you to create binary sensors that **import** states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Binary Sensor](https://esphome.io/components/binary_sensor/homeassistant.html#home-assistant-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": { "type": "number" },
                    "custom_command": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                          }
                        }
                      ]
                    },
                    "offset": { "type": "number" },
                    "byte_offset": { "type": "number" },
                    "bitmask": { "type": "string", "default": "4294967295" },
                    "skip_updates": { "type": "number", "default": 0 },
                    "force_new_range": { "type": "boolean", "default": false },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "response_size": { "type": "number", "default": 0 },
                    "register_type": {
                      "enum": [
                        "custom",
                        "coil",
                        "holding",
                        "discrete_input",
                        "read"
                      ]
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Binary Sensor](https://esphome.io/components/binary_sensor/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Binary Sensor](https://esphome.io/components/binary_sensor/modbus_controller.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` binary sensor platform creates a binary sensor from a modbus_controller component and requires [Modbus Controller](https://esphome.io/components/modbus_controller.html) to be configured.\n\n*See also: [Modbus Binary Sensor](https://esphome.io/components/binary_sensor/modbus_controller.html#modbus-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mpr121" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "channel": { "type": "number" },
                    "touch_threshold": { "type": "number" },
                    "release_threshold": { "type": "number" },
                    "name": {
                      "markdownDescription": "**string**: The name for the binary sensor.\n\n\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "The `mpr121` binary sensor allows you to use your MPR121 with ESPHome. First, setup a [Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#mpr121-component) and then use this binary sensor platform to create individual binary sensors for each touch sensor.\n\n*See also: [mpr121 Binary Sensor](https://esphome.io/components/binary_sensor/mpr121.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "page_id": { "type": "number" },
                    "component_id": { "type": "number" },
                    "background_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "foreground_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "visible": { "type": "boolean", "default": true },
                    "component_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "variable_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Nextion Binary Sensor Component](https://esphome.io/components/binary_sensor/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `nextion` binary sensor platform supports the many switched components in the Nextion as well as integer variables (>0 == true). It can be a component or variable in the Nextion display. It is best to set the components vscope to global in the Nextion Editor. This way the component will be available if the page is shown or not.\n\n*See also: [Nextion Binary Sensor Component](https://esphome.io/components/binary_sensor/nextion.html#nextion-binary-sensor-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pipsolar" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "add_sbu_priority_version": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "configuration_status": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "scc_firmware_version": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "load_status": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "battery_voltage_to_steady_while_charging": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "charging_status": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "scc_charging_status": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "ac_charging_status": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "charging_to_floating_mode": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "switch_on": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "dustproof_installed": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "silence_buzzer_open_buzzer": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "overload_bypass_function": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "lcd_escape_to_default": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "overload_restart_function": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "over_temperature_restart_function": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "backlight_on": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "alarm_on_when_primary_source_interrupt": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_code_record": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "power_saving": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warnings_present": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "faults_present": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_power_loss": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_inverter_fault": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_bus_over": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_bus_under": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_bus_soft_fail": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_line_fail": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_opvshort": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_inverter_voltage_too_low": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_inverter_voltage_too_high": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_over_temperature": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_fan_lock": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_voltage_high": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_low_alarm": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_under_shutdown": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_derating": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_over_load": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_eeprom_failed": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_inverter_over_current": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_inverter_soft_failed": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_self_test_failed": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_op_dc_voltage_over": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_battery_open": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_current_sensor_failed": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_battery_short": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_power_limit": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_pv_voltage_high": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_mppt_overload": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_mppt_overload": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_too_low_to_charge": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_dc_dc_over_current": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "fault_code": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warnung_low_pv_energy": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_high_ac_input_during_bus_soft_start": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    },
                    "warning_battery_equalization": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pn532" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The unique ID of the NFC/RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#id2)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["uid"]
                }
              ]
            },
            "markdownDescription": "The `pn532` binary sensor platform lets you track if an NFC/RFID tag with a given unique id (`uid`) is currently being detected by the PN532 or not.\n\n*See also: [pn532 Binary Sensor](https://esphome.io/components/binary_sensor/pn532.html#pn532-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rc522" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The unique ID of the RFID tag. This is a hyphen-separated list of hexadecimal values. For example `74-10-37-94`.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#id2)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["uid"]
                }
              ]
            },
            "markdownDescription": "The `rc522` binary sensor platform lets you track if an RFID tag with a given unique id (`uid`) is currently being detected by the RC522 or not.\n\n*See also: [rc522 Binary Sensor](https://esphome.io/components/binary_sensor/rc522.html#rc522-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rc522_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "uid": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["uid"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "rdm6300" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "uid": {
                      "type": "number",
                      "markdownDescription": "**int**: The unique ID of the NFC/RFID tag.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["uid"]
                }
              ]
            },
            "markdownDescription": "The `rdm6300` binary sensor platform lets you track if an NFC/RFID tag with a given unique id (`uid`) is currently being detected by the RDM6300 or not.\n\n*See also: [rdm6300 Binary Sensor](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-binary-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "remote_receiver" } }
            },
            "then": {
              "$ref": "#/definitions/remote_base.BINARY_SENSOR_REGISTRY"
            }
          },
          {
            "if": { "properties": { "platform": { "const": "status" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The Status Binary Sensor exposes the node state (if it\u2019s connected to via MQTT/native API) for Home Assistant.\n\n*See also: [Status Binary Sensor](https://esphome.io/components/binary_sensor/status.html#status-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sx1509" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "row": {
                      "type": "number",
                      "markdownDescription": "**int**: The row number for this key on the keypad.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#id1)*"
                    },
                    "col": {
                      "type": "number",
                      "markdownDescription": "**int**: The column number for this key on the keypad.\n\n\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["row", "col"]
                }
              ]
            },
            "markdownDescription": "To use the individual keys on the keypad you need to add individual binary_sensor entries in the config.\n\n*See also: [sx1509 Binary Sensor](https://esphome.io/components/sx1509.html#binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the binary sensor.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` binary sensor platform allows you to define any [lambda template](https://esphome.io/guides/automations.html#config-lambda) and construct a binary sensor out if it. The lambda will run continuously; it isn\u2019t possible to specify an interval at which the lambda runs.\n\n*See also: [Template Binary Sensor](https://esphome.io/components/binary_sensor/template.html#template-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "touchscreen" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "x_min": { "type": "number" },
                    "x_max": { "type": "number" },
                    "y_min": { "type": "number" },
                    "y_max": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "required_": ["x_min", "x_max", "y_min", "y_max"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ttp229_bsf" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: The channel number at the TTP229 the touchkey is connected to.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [ttp229_bsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-bsf-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ttp229_lsf" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: The channel number at the TTP229 the touchkey is connected to.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [ttp229_lsf Binary Sensor](https://esphome.io/components/binary_sensor/ttp229.html#ttp229-lsf-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "sensor_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the binary sensor.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the binary sensor.\n\n\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["sensor_datapoint"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` binary sensor platform creates a binary sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Binary Sensor](https://esphome.io/components/binary_sensor/tuya.html#tuya-binary-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgpr1" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "running",
                        "safety",
                        "smoke",
                        "sound",
                        "tamper",
                        "update",
                        "vibration",
                        "window"
                      ]
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "idle_time": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["bindkey", "mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mjyd02yla" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "running",
                        "safety",
                        "smoke",
                        "sound",
                        "tamper",
                        "update",
                        "vibration",
                        "window"
                      ]
                    },
                    "idle_time": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "light": {
                      "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address", "bindkey"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mue4094rt" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "device_class": {
                      "enum": [
                        "",
                        "battery",
                        "battery_charging",
                        "cold",
                        "connectivity",
                        "door",
                        "garage_door",
                        "gas",
                        "heat",
                        "light",
                        "lock",
                        "moisture",
                        "motion",
                        "moving",
                        "occupancy",
                        "opening",
                        "plug",
                        "power",
                        "presence",
                        "problem",
                        "running",
                        "safety",
                        "smoke",
                        "sound",
                        "tamper",
                        "update",
                        "vibration",
                        "window"
                      ]
                    },
                    "timeout": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "5s"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_wx08zm" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "tablet": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "xpt2046" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/binary_sensor.BINARY_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "x_min": { "type": "number" },
                    "x_max": { "type": "number" },
                    "y_min": { "type": "number" },
                    "y_max": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "required_": ["x_min", "x_max", "y_min", "y_max"]
                }
              ]
            },
            "markdownDescription": "The `xpt2046` binary sensor allows you to setup areas on the touch screen as virtual buttons. First, setup a [Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#xpt2046-component) and then use this binary sensor platform to create individual binary sensors for each virtual button.\n\n*See also: [xpt2046 Binary Sensor](https://esphome.io/components/binary_sensor/xpt2046.html#binary-sensor)*"
          }
        ]
      },
      "markdownDescription": "With ESPHome you can use different types of binary sensors. They will automatically appear in the Home Assistant front-end and have several configuration options.\n\n*See also: [Binary Sensor Component](https://esphome.io/components/binary_sensor/index.html#binary-sensor-component)*"
    },
    "button": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "output" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                {
                  "properties": {
                    "duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["duration"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "restart" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `restart` button platform allows you to restart your node remotely through Home Assistant.\n\n*See also: [Restart Button](https://esphome.io/components/button/restart.html#restart-button)*"
          },
          {
            "if": { "properties": { "platform": { "const": "safe_mode" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `safe_mode` button allows you to remotely reboot your node into [Safe Mode](https://esphome.io/components/ota.html#config-ota). This is useful in certain situations where a misbehaving component is preventing Over-The-Air updates from completing successfully.\n\n*See also: [Safe Mode Button](https://esphome.io/components/button/safe_mode.html#safe-mode-button)*"
          },
          {
            "if": { "properties": { "platform": { "const": "shutdown" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `shutdown` button platform allows you to shutdown your node remotely through Home Assistant. It does this by putting the node into deep sleep mode with no wakeup source selected. After enabling, the only way to startup the ESP again is by pressing the reset button or restarting the power supply.\n\n*See also: [Shutdown Button](https://esphome.io/components/button/shutdown.html#shutdown-button)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` button platform allows you to create simple buttons out of just actions. Once defined, it will automatically appear in Home Assistant as a button and can be controlled through the frontend.\n\n*See also: [Template Button](https://esphome.io/components/button/template.html#template-button)*"
          },
          {
            "if": { "properties": { "platform": { "const": "wake_on_lan" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/button.BUTTON_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "target_mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["target_mac_address"]
                }
              ]
            }
          }
        ]
      },
      "markdownDescription": "ESPHome has support for components to create a button entity. A button entity is basically a momentary switch with no state and can be triggered by either YAML or the user/frontend.\n\n*See also: [Button Component](https://esphome.io/components/button/index.html#button-component)*"
    },
    "canbus": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/canbus.CANBUS_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_can" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/canbus.CANBUS_SCHEMA" },
                {
                  "properties": {
                    "bit_rate": {
                      "enum": [
                        "50KBPS",
                        "100KBPS",
                        "125KBPS",
                        "250KBPS",
                        "500KBPS",
                        "1000KBPS"
                      ]
                    },
                    "rx_pin": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "tx_pin": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["rx_pin", "tx_pin"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "mcp2515" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/canbus.CANBUS_SCHEMA" },
                {
                  "properties": {
                    "clock": { "enum": ["8MHZ", "16MHZ", "20MHZ"] },
                    "mode": { "enum": ["NORMAL", "LOOPBACK", "LISTENONLY"] }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "Controller Area Network (CAN bus) is a serial bus protocol to connect individual systems and sensors as an alternative to conventional multi-wire looms. It allows automotive components to communicate on a single or dual-wire networked data bus up to 1Mbps. CAN is an International Standardization Organization (ISO) defined serial communications bus originally developed for the automotive industry to replace the complex wiring harness with a two-wire bus. The specification calls for high immunity to electrical interference and the ability to self-diagnose and repair data errors. These features have led to CAN\u2019s popularity in a variety of industries including building automation, medical, and manufacturing.\n\n*See also: [CAN bus](https://esphome.io/components/canbus.html#can-bus)*"
    },
    "climate": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "anova" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "unit_of_measurement": { "enum": ["f", "c"] },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Anova Cooker](https://esphome.io/components/climate/anova.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the climate device.\n\n\n\n*See also: [Anova Cooker](https://esphome.io/components/climate/anova.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["unit_of_measurement"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `anova` climate platform creates a climate device which can be used to control a BLE Anova sous-vide stick. Whilst not strictly a climate device, the concept of keeping something to a set temperature applies equally here.\n\n*See also: [Anova Cooker](https://esphome.io/components/climate/anova.html#anova-cooker)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ballu" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "bang_bang" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "default_target_temperature_low": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "default_target_temperature_high": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "idle_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "cool_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "heat_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "away_config": {
                      "$ref": "#/definitions/climate-bang_bang-away_config"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "default_target_temperature_low",
                    "default_target_temperature_high",
                    "idle_action"
                  ]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `bang_bang` climate platform allows you to regulate a value with a [bang-bang controller](https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control) (also called hysteresis controller).\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#bang-bang-climate-controller)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "climate_ir_lg" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "header_high": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "8000us"
                    },
                    "header_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "4000us"
                    },
                    "bit_high": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "600us"
                    },
                    "bit_one_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1600us"
                    },
                    "bit_zero_low": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "550us"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "coolix" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the climate(s).\n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
                },
                "climates": {
                  "anyOf": [
                    { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/climate.CLIMATE_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of climates to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Climate](https://esphome.io/components/climate/index.html#config-climate).\n  \n  \n\n\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "climates"]
            },
            "markdownDescription": "This integration can be used to create custom climate devices in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "daikin" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "fujitsu_general" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "heatpumpir" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "protocol": {
                      "enum": [
                        "aux",
                        "ballu",
                        "carrier_mca",
                        "carrier_nqv",
                        "daikin_arc417",
                        "daikin_arc480",
                        "daikin",
                        "fuego",
                        "fujitsu_awyz",
                        "gree",
                        "greeya",
                        "greeyan",
                        "greeyac",
                        "hisense_aud",
                        "hitachi",
                        "hyundai",
                        "ivt",
                        "midea",
                        "mitsubishi_fa",
                        "mitsubishi_fd",
                        "mitsubishi_fe",
                        "mitsubishi_heavy_fdtc",
                        "mitsubishi_heavy_zj",
                        "mitsubishi_heavy_zm",
                        "mitsubishi_heavy_zmp",
                        "mitsubishi_heavy_kj",
                        "mitsubishi_msc",
                        "mitsubishi_msy",
                        "mitsubishi_sez",
                        "panasonic_ckp",
                        "panasonic_dke",
                        "panasonic_jke",
                        "panasonic_lke",
                        "panasonic_nke",
                        "samsung_aqv",
                        "samsung_fjm",
                        "sharp",
                        "toshiba_daiseikai",
                        "toshiba"
                      ]
                    },
                    "horizontal_default": {
                      "enum": [
                        "auto",
                        "middle",
                        "left",
                        "mleft",
                        "mright",
                        "right"
                      ]
                    },
                    "vertical_default": {
                      "enum": ["auto", "up", "mup", "middle", "mdown", "down"]
                    },
                    "min_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "max_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "hitachi_ac344" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "hitachi_ac424" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "midea" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "period": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1s"
                    },
                    "timeout": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "2s"
                    },
                    "num_attempts": { "type": "number", "default": 3 },
                    "beeper": { "type": "boolean", "default": false },
                    "autoconf": { "type": "boolean", "default": true },
                    "supported_modes": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/climate-midea-supported_modes"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/climate-midea-supported_modes"
                          }
                        }
                      ]
                    },
                    "supported_swing_modes": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/climate-midea-supported_swing_modes"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/climate-midea-supported_swing_modes"
                          }
                        }
                      ]
                    },
                    "supported_presets": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/climate-midea-supported_presets"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/climate-midea-supported_presets"
                          }
                        }
                      ]
                    },
                    "custom_presets": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/climate-midea-custom_presets"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/climate-midea-custom_presets"
                          }
                        }
                      ]
                    },
                    "custom_fan_modes": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/climate-midea-custom_fan_modes"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/climate-midea-custom_fan_modes"
                          }
                        }
                      ]
                    },
                    "outdoor_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "power_usage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity_setpoint": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Bus](https://esphome.io/components/uart.html) if you want to use multiple UART buses.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the climate device.\n\n\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `midea` component creates a Midea air conditioner climate device.\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#midea-air-conditioner)*"
          },
          {
            "if": { "properties": { "platform": { "const": "midea_ir" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "use_fahrenheit": { "type": "boolean", "default": false }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "mitsubishi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pid" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "default_target_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "control_parameters": {
                      "$ref": "#/definitions/climate-pid-control_parameters"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "default_target_temperature",
                    "control_parameters"
                  ]
                }
              ]
            },
            "markdownDescription": "The `pid` climate platform allows you to regulate a value with a [PID controller](https://en.wikipedia.org/wiki/PID_controller).\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#pid-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tcl112" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "thermostat" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "idle_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "cool_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "supplemental_cooling_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "dry_action": { "$ref": "#/definitions/simple_automation" },
                    "fan_only_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "heat_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "supplemental_heating_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "auto_mode": { "$ref": "#/definitions/simple_automation" },
                    "cool_mode": { "$ref": "#/definitions/simple_automation" },
                    "dry_mode": { "$ref": "#/definitions/simple_automation" },
                    "fan_only_mode": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "heat_mode": { "$ref": "#/definitions/simple_automation" },
                    "off_mode": { "$ref": "#/definitions/simple_automation" },
                    "fan_mode_on_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_off_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_auto_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_low_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_medium_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_high_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_middle_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_focus_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "fan_mode_diffuse_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_both_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_horizontal_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_off_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "swing_vertical_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "target_temperature_change_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "default_mode": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "OFF"
                    },
                    "default_target_temperature_high": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "default_target_temperature_low": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "set_point_minimum_differential": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "cool_deadband": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "cool_overrun": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "heat_deadband": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "heat_overrun": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.5
                    },
                    "max_cooling_run_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "max_heating_run_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_cooling_off_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_cooling_run_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_fan_mode_switching_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_fanning_off_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_fanning_run_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_heating_off_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_heating_run_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "min_idle_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "supplemental_cooling_delta": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "supplemental_heating_delta": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "fan_only_action_uses_fan_mode_timer": {
                      "type": "boolean",
                      "default": false
                    },
                    "fan_only_cooling": { "type": "boolean", "default": false },
                    "fan_with_cooling": { "type": "boolean", "default": false },
                    "fan_with_heating": { "type": "boolean", "default": false },
                    "startup_delay": { "type": "boolean", "default": false },
                    "away_config": {
                      "$ref": "#/definitions/climate-thermostat-away_config"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["idle_action", "min_idle_time"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `thermostat` climate platform allows you to control a climate control system in much the same manner as a physical thermostat. Its operation is similar to the [bang-bang](https://esphome.io/components/climate/bang_bang.html) controller; a sensor measures a value (the air temperature) and the controller will try to keep this value within a range defined by the set point(s). To do this, the controller can activate devices like a heating unit and/or a cooling unit to change the value observed by the sensor. When configured for both heating and cooling, it is essentially two [bang-bang](https://esphome.io/components/climate/bang_bang.html) controllers in one; it differs, however, in that interaction with the thermostat component is nearly identical to that of a real thermostat.\n\n*See also: [Thermostat Climate Controller](https://esphome.io/components/climate/thermostat.html#thermostat-climate-controller)*"
          },
          {
            "if": { "properties": { "platform": { "const": "toshiba" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "model": {
                      "enum": [
                        "GENERIC",
                        "RAC-PT1411HWRU-C",
                        "RAC-PT1411HWRU-F"
                      ]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_heat": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Specifies if the device has a heating mode. Defaults to `true`.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "supports_cool": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Specifies if the device has a cooling mode. Defaults to `false`.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the climate switch (device on/off).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "active_state_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the active state - [see below](https://esphome.io/components/climate/tuya.html#active-state-detection).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "active_state_heating_value": {
                      "type": "number",
                      "default": 1,
                      "markdownDescription": "**int**: The active state datapoint value the device reports when heating. Defaults to `1` - [see below](https://esphome.io/components/climate/tuya.html#active-state-detection).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "active_state_cooling_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The active state datapoint value the device reports when cooling - [see below](https://esphome.io/components/climate/tuya.html#active-state-detection).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "heating_state_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The input pin indicating that the device is heating - [see below](https://esphome.io/components/climate/tuya.html#active-state-detection). Only used if **active_state_datapoint** is not configured.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "cooling_state_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The input pin indicating that the device is cooling - [see below](https://esphome.io/components/climate/tuya.html#active-state-detection). Only used if **active_state_datapoint** is not configured.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "target_temperature_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the target temperature.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "current_temperature_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the current temperature.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the incoming and outgoing temperature values - [see below](https://esphome.io/components/climate/tuya.html#temperature-multiplier).\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "current_temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the current temperature value.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "target_temperature_multiplier": {
                      "type": "number",
                      "markdownDescription": "**float**: A multiplier to modify the target temperature value.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "eco_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the eco mode state.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "eco_temperature": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The target temperature the controller uses while the eco mode is active.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the climate device.\n\n\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` climate platform creates a climate device from a tuya component.\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#tuya-climate)*"
          },
          {
            "if": { "properties": { "platform": { "const": "whirlpool" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "model": { "enum": ["DG11J1-3A", "DG11J1-91"] },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "yashima" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/climate.CLIMATE_SCHEMA" },
                {
                  "properties": {
                    "supports_cool": { "type": "boolean", "default": true },
                    "supports_heat": { "type": "boolean", "default": true },
                    "name": {
                      "markdownDescription": "**string**: The name for the climate device.\n\n\n\n*See also: [IR Remote Climate](https://esphome.io/components/climate/ir_climate.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "ESPHome has support for climate devices. Climate devices can represent different types of hardware, but the defining factor is that climate devices have a settable target temperature and can be put in different modes like HEAT, COOL, HEAT_COOL or OFF.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-component)*"
    },
    "cover": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/cover.COVER_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "am43" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "pin": { "type": "number", "default": 8888 },
                    "invert_position": { "type": "boolean", "default": false },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [AM43 Cover](https://esphome.io/components/cover/am43.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `am43` cover platform allows you to control an AM43 based BLE cover motor. These devices are sold under various brands, such as Zemismart and A-OK. The platform connects to the device over the ESP32\u2019s BLE peripheral and both controls and fetches the position and state of the motor.\n\n*See also: [AM43 Cover](https://esphome.io/components/cover/am43.html#am43-cover)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "current_based" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "open_moving_current_threshold": { "type": "number" },
                    "open_obstacle_current_threshold": { "type": "number" },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "open_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "close_moving_current_threshold": { "type": "number" },
                    "close_obstacle_current_threshold": { "type": "number" },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "close_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "obstacle_rollback": { "type": "string", "default": "10%" },
                    "max_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "malfunction_detection": {
                      "type": "boolean",
                      "default": true
                    },
                    "malfunction_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "start_sensing_delay": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "500ms"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Current Based Cover](https://esphome.io/components/cover/current_based.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "stop_action",
                    "open_moving_current_threshold",
                    "open_action",
                    "open_duration",
                    "close_moving_current_threshold",
                    "close_action",
                    "close_duration"
                  ]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `current_based` cover platform allows you to create covers with position control by using current sensors to detect the fully-open and fully-closed states. This is pretty useful when using motors with integrated mechanical endstops. During cover operation, the component monitors the current consumption to detect when the motor has stopped.\n\n*See also: [Current Based Cover](https://esphome.io/components/cover/current_based.html#current-based-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the cover(s).\n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
                },
                "covers": {
                  "anyOf": [
                    { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/cover.COVER_SCHEMA" }
                    }
                  ],
                  "markdownDescription": "**list**: A list of covers to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Cover](https://esphome.io/components/cover/index.html#config-cover).\n  \n  \n\n\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "covers"]
            },
            "markdownDescription": "This integration can be used to create custom covers in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Cover](https://esphome.io/components/cover/custom.html#custom-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "endstop" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be opened.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "open_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to open up from the fully-closed state.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "close_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "max_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "stop_action",
                    "open_action",
                    "open_duration",
                    "close_action",
                    "close_duration"
                  ]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `endstop` cover platform allows you to create covers with position control that have endstops at both ends of the cover to detect the fully-open and fully-closed states. When any of these endstops are reached, the cover is stopped (via `stop_action`) and the corresponding state is sent out.\n\n*See also: [Endstop Cover](https://esphome.io/components/cover/endstop.html#endstop-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the template cover will immediately update the reported state and no lambda needs to be used. Defaults to `false`.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding one of them. Defaults to `false`.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "has_position": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether this cover will publish its position as a floating point number. By default (`false`), the cover only publishes OPEN/CLOSED position. Parameter useless if you set the POSITION_ACTION (is set to TRUE).\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover to be opened.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be stopped.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "tilt_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific tilt position. The desired tilt is available in the lambda in the `tilt` variable.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "tilt_lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current tilt position of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "position_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the cover be set to a specific position. The desired position is available in the lambda in the `pos` variable.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": ["NO_RESTORE", "RESTORE", "RESTORE_AND_CALL"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` cover platform allows you to create simple covers out of just a few actions and a value lambda. Once defined, it will automatically appear in Home Assistant as a cover and can be controlled through the frontend.\n\n*See also: [Template Cover](https://esphome.io/components/cover/template.html#template-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "time_based" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "stop_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed to stop the cover when the remote requests the cover to be stopped or when the cover has been opening/closing for the given durations.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "open_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be opened.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "open_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to open up from the fully-closed state.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "close_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote requests the cover to be closed.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "close_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time it takes the cover to close from the fully-open state.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "has_built_in_endstop": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Indicates that the cover has built in end stop detectors. In this configuration the `stop_action` is not performed when the open or close time is completed and if the cover is commanded to open or close the corresponding actions will be performed without checking current state. Defaults to `false`.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Whether the true state of the cover is not known. This will make the Home Assistant frontend show buttons for both OPEN and CLOSE actions, instead of hiding or disabling one of them. Defaults to `true`.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "stop_action",
                    "open_action",
                    "open_duration",
                    "close_action",
                    "close_duration"
                  ]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `time_based` cover platform allows you to create covers with position control that do not have any position feedback. The state of the cover is thus always an assumed one, the current position is approximated with the time the cover has been moving in a direction.\n\n*See also: [Time-Based Cover](https://esphome.io/components/cover/time_based.html#time-based-cover)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/cover.COVER_SCHEMA" },
                {
                  "properties": {
                    "control_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number for sending control commands.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "direction_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number for setting the direction of travel.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "position_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the cover position value.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "position_report_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the cover position report value, if separate from position_datapoint.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: The lowest position value, meaning cover closed. Defaults to 0.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "default": 100,
                      "markdownDescription": "**int**: the highest position value, meaning cover opened. Defaults to 255.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "invert_position": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Sets the direction of travel to be inverted, if direction_datapoint is configured.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": ["NO_RESTORE", "RESTORE", "RESTORE_AND_CALL"]
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the cover.\n\n\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["position_datapoint"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` cover platform creates a simple position-only cover from a tuya serial component.\n\n*See also: [Tuya Cover](https://esphome.io/components/cover/tuya.html#tuya-cover)*"
          }
        ]
      },
      "markdownDescription": "The `cover` component is a generic representation of covers in ESPHome. A cover can (currently) either be *closed* or *open* and supports three types of commands: *open*, *close* and *stop*.\n\n*See also: [Cover Component](https://esphome.io/components/cover/index.html#cover-component)*"
    },
    "display": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": {
              "properties": { "platform": { "const": "addressable_light" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "width": { "type": "number" },
                    "height": { "type": "number" },
                    "update_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "16ms"
                    },
                    "pixel_mapper": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["width", "height"]
                }
              ]
            },
            "markdownDescription": "The `addressable_light` display platform allows to display text and graphics on an addressable light that has been arranged in a display matrix.\n\n*See also: [Addressable Light](https://esphome.io/components/display/addressable_light.html#addressable-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ili9341" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["M5STACK", "TFT_2.4"],
                      "markdownDescription": "The model of the display. Options are:\n  * `M5STACK`\n  \n  * `TFT 2.4`\n  \n  \n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "led_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The display\u2019s backlight pin. **Note:** Connect to a PWM-capable pin to switch/dim the display\u2019s backlight **or** save a pin by connecting it through a 3.3K resistor to the +3V supply.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything drawn in the `lambda:` will be rotated per this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, or `270\u00b0`.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model", "dc_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ili9341` display platform allows you to use ILI9341 ([datasheet](https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf), [Aliexpress](https://www.aliexpress.com/af/Ili9341.html)) displays with ESPHome. As this is a somewhat higher resolution display and may require pins beyond the typical SPI connections, it is better suited for use with the ESP32.\n\n*See also: [ILI9341 TFT LCD](https://esphome.io/components/display/ili9341.html#ili9341-tft-lcd)*"
          },
          {
            "if": { "properties": { "platform": { "const": "inkplate6" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "greyscale": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Makes the screen display 3 bit colors. Defaults to `false`\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "partial_updating": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Makes the screen update partially, which is faster, but leaves burnin. Defaults to `false`\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "full_update_every": {
                      "type": "number",
                      "default": 10,
                      "markdownDescription": "**int**: When partial updating is enabled, forces a full screen update after chosen number of updates. Defaults to `10`\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": ["inkplate_6", "inkplate_10"],
                      "markdownDescription": "**enum**: Specify the model `inkplate_6` or `inkplate_10`. Defaults to `inkplate_6`.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "ckv_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The CKV pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "gmod_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The GMOD pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "gpio0_enable_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The GPIO0 Enable pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "oe_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The OE pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "powerup_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Powerup pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "sph_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The SPH pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "spv_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The SPV pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "vcom_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The VCOM pin for the Inkplate display.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "wakeup_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL"
                    },
                    "cl_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The CL pin for the Inkplate display. Defaults to GPIO0.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "le_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The LE pin for the Inkplate display. Defaults to GPIO2.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_0_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 0 pin for the Inkplate display. Defaults to GPIO4.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_1_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 1 pin for the Inkplate display. Defaults to GPIO5.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_2_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 2 pin for the Inkplate display. Defaults to GPIO18.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_3_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 3 pin for the Inkplate display. Defaults to GPIO19.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_4_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 4 pin for the Inkplate display. Defaults to GPIO23.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_5_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 5 pin for the Inkplate display. Defaults to GPIO25.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_6_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 6 pin for the Inkplate display. Defaults to GPIO26.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "display_data_7_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The Data 7 pin for the Inkplate display. Defaults to GPIO27.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "72" },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "ckv_pin",
                    "gmod_pin",
                    "gpio0_enable_pin",
                    "oe_pin",
                    "powerup_pin",
                    "sph_pin",
                    "spv_pin",
                    "vcom_pin",
                    "wakeup_pin"
                  ]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "All-in-one e-paper display  `Inkplate 6` and `Inkplate 10`.\n\n*See also: [Inkplate 6 and Inkplate 10](https://esphome.io/components/display/inkplate6.html#inkplate-6-and-inkplate-10)*"
          },
          {
            "if": { "properties": { "platform": { "const": "lcd_gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dimensions": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "data_pins": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
                      "markdownDescription": "**list of [Pin Schemas](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: A list of the data pins you have hooked up to the LCD. The list can either be 8 items long (when you have connected all 8 data pins), or 4 items long (if you\u2019re operating in 4-bit mode with either the first 4 data pins connected or the last 4 data pins connected).\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "enable_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have `EN` hooked up to.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "rs_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have `RS` hooked up to.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "rw_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Optionally set the pin you have `RW` hooked up to. You can also just permanently connect that pin to GND.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Rendering Lambda](https://esphome.io/components/display/lcd_display.html#display-lcd-lambda) for more information.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [lcd_gpio Component](https://esphome.io/components/display/lcd_display.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["dimensions"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "lcd_pcf8574" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dimensions": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The dimensions of the display with `COLUMNSxROWS`. If you\u2019re not sure, power the display up and just count them.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "63",
                      "markdownDescription": "**int**: The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the PCF8574 chip, defaults to `0x3F`.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Rendering Lambda](https://esphome.io/components/display/lcd_display.html#display-lcd-lambda) for more information.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [lcd_pcf8574 Component](https://esphome.io/components/display/lcd_display.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["dimensions"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "max7219" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "num_chips": {
                      "type": "number",
                      "default": 1,
                      "markdownDescription": "**int**: The number of chips you wish to use for daisy chaining. Defaults to `1`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "intensity": {
                      "type": "number",
                      "default": 15,
                      "markdownDescription": "**int**: The intensity with which the MAX7219 should drive the outputs. Range is from 0 (least intense) to 15 (the default).\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "reverse_enable": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: For some displays the order of the chips is reversed so you\u2019ll see \u201c56781234\u201d instead of \u201c12345678\u201d. This option will adjust the output to compensate. Defaults to `false`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CS line hooked up to.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the MAX7219. See [Rendering Lambda](https://esphome.io/components/display/max7219.html#display-max7219-lambda) for more information.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max7219` display platform allows you to use MAX7219 7-segment display drivers ( [datasheet](https://datasheets.maximintegrated.com/en/ds/MAX7219-MAX7221.pdf), [hobbycomponents](https://hobbycomponents.com/displays/597-max7219-8-digit-seven-segment-display-module)) with ESPHome. Please note that this integration is *only* for 7-segment display, not matrix configurations.\n\n*See also: [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html#max7219-7-segment-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max7219digit" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "num_chips": {
                      "type": "number",
                      "default": 4,
                      "markdownDescription": "**int**: The number of chips you wish to use for daisy chaining. Defaults to `4`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "num_chip_lines": {
                      "type": "number",
                      "default": 1,
                      "markdownDescription": "**int**: Number of lines if you want to use the displays in Multiline Mode. Defaults to `1` Example: [https://github.com/esphome/esphome/pull/1622#issue-836179156](https://github.com/esphome/esphome/pull/1622#issue-836179156)\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "chip_lines_style": {
                      "enum": ["ZIGZAG", "SNAKE"],
                      "markdownDescription": "How are the lines in Multiline Mode connected? Possible values are `zigzag` and `snake`. Defaults to `snake`\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "intensity": {
                      "type": "number",
                      "default": 15,
                      "markdownDescription": "**int**: The intensity with which the MAX7219 should drive the outputs. Range is from `0`, least intense to `15` the brightest. Defaults to `15`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "rotate_chip": {
                      "enum": ["0", "90", "180", "270"],
                      "markdownDescription": "Rotates every 8x8 chip. Valid values are `0`, `90`, `180` and `270`. Defaults to `0`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_mode": {
                      "enum": ["CONTINUOUS", "STOP"],
                      "markdownDescription": "Set the scroll mode. One of `CONTINUOUS` or `STOP`. Defaults to `CONTINUOUS`\n  * `CONTINUOUS`: Always scrolls and the text repeats continuously, you might need to add some separation at the end.\n  \n  * `STOP`: When text is over it waits the `scroll_dwell` time and scroll is set back to the start.\n  \n  \n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_enable": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Turn scroll mode on when content does not fit. Defaults to `true`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_speed": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "250ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set scroll speed. Defaults to `250ms`\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_delay": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1000ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set delay time before scroll starts. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "scroll_dwell": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "1000ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sets the wait time at the end of the scroll before starting over. This is only used in mode `STOP`. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "reverse_enable": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: For some displays the order of the displays is reversed (\u201cDCBA\u201d). This option will reverse the display to (\u201cABCD\u201d) again. Defaults to  `false`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CS line hooked up to.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the MAX7219. See [Rendering Lambda](https://esphome.io/components/display/max7219digit.html#display-max7219digit-lambda) for more information.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max7219` display platform allows you to use MAX7219 digit with ESPHome. Please note that this integration is *only* for the digit \u201cmatrix\u201d display, for the 7 segment display see [MAX7219 7-Segment Display](https://esphome.io/components/display/max7219.html).\n\n*See also: [MAX7219 Digit Display](https://esphome.io/components/display/max7219digit.html#max7219-digit-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "tft_url": {
                      "type": "string",
                      "markdownDescription": "**string**: The URL to download the TFT file from for updates. See [Nextion Upload](https://esphome.io/components/display/nextion.html#nextion-upload-tft).\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "on_setup": { "$ref": "#/definitions/simple_automation" },
                    "on_sleep": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the Nextion goes to sleep.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "on_wake": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: An automation to perform when the Nextion wakes up.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "touch_sleep_timeout": {
                      "type": "number",
                      "markdownDescription": "**int**: Sets internal No-touch-then-sleep timer in seconds.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "wake_up_page": {
                      "type": "number",
                      "markdownDescription": "**int**: Sets the page to display after waking up\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "auto_wake_on_touch": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Sets if Nextion should auto-wake from sleep when touch press occurs.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the [UART bus](https://esphome.io/components/uart.html#uart) you wish to use for this display. Use this if you want to use multiple UART buses at once.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the nextion display. See [Rendering Lambda](https://esphome.io/components/display/nextion.html#display-nextion-lambda) for more information. This is typically empty. The individual components for the Nextion will handle almost all features needed for updating\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to call the lambda to update the display. Defaults to `5s`.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `nextion` display platform allows you to use Nextion LCD displays ([datasheet](https://nextion.itead.cc/resources/datasheets/), [iTead](https://www.itead.cc/display/nextion.html)) with ESPHome.\n\n*See also: [Nextion TFT LCD Display](https://esphome.io/components/display/nextion.html#nextion-tft-lcd-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pcd8544" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "contrast": {
                      "type": "number",
                      "default": 127,
                      "markdownDescription": "**int**: Set screen contrast (0-255). Defaults to `0x7f`.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["dc_pin", "reset_pin", "cs_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `pcd8544` display platform allows you to use PCD8544 ([Adafruit](https://www.adafruit.com/product/338)) displays with ESPHome. Connection to this display is made using the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi).\n\n*See also: [PCD 8544 Display (Nokia 5110/3310)](https://esphome.io/components/display/pcd8544.html#pcd-8544-display-nokia-5110-3310)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1306_i2c" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1306_128X32",
                        "SSD1306_128X64",
                        "SSD1306_96X16",
                        "SSD1306_64X48",
                        "SSD1306_64X32",
                        "SH1106_128X32",
                        "SH1106_128X64",
                        "SH1106_96X16",
                        "SH1106_64X48",
                        "SH1107_128X64",
                        "SSD1305_128X32",
                        "SSD1305_128X64"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`\n  \n  * `SH1107 128x64`\n  \n  * `SSD1305 128x32`\n  \n  * `SSD1305 128x64`\n  \n  \n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Only can be used with SSD1305. Defaults to `100%`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "contrast": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display contrast in %. Defaults to `100%`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "external_vcc": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "flip_x": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Flip the horizontal axis on the screen. Defaults to `true`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "flip_y": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Flip the vertical axis on the screen. Defaults to `true`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "offset_x": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: Set this option if some horizontal pixel is missing. Numbers are only allowed between `-32~32`. Defaults to `0`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "offset_y": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: Set this option if some vertical pixel is missing. Numbers are only allowed between `-32~32`. Defaults to `0`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "invert": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Invert all pixel state on the display. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "60",
                      "markdownDescription": "**int**: Manually specify the [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the display. Defaults to 0x3C.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ssd1306_i2c` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)), SSD1305 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1305.pdf)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1306/SSD1305 or SH1106 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1306.html#ssd1306-spi).\n\n*See also: [ssd1306 Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#over-i2c)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1306_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1306_128X32",
                        "SSD1306_128X64",
                        "SSD1306_96X16",
                        "SSD1306_64X48",
                        "SSD1306_64X32",
                        "SH1106_128X32",
                        "SH1106_128X64",
                        "SH1106_96X16",
                        "SH1106_64X48",
                        "SH1107_128X64",
                        "SSD1305_128X32",
                        "SSD1305_128X64"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1306 128x32` (SSD1306 with 128 columns and 32 rows)\n  \n  * `SSD1306 128x64`\n  \n  * `SSD1306 96x16`\n  \n  * `SSD1306 64x48`\n  \n  * `SH1106 128x32`\n  \n  * `SH1106 128x64`\n  \n  * `SH1106 96x16`\n  \n  * `SH1106 64x48`\n  \n  * `SH1107 128x64`\n  \n  * `SSD1305 128x32`\n  \n  * `SSD1305 128x64`\n  \n  \n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Only can be used with SSD1305. Defaults to `100%`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "contrast": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display contrast in %. Defaults to `100%`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "external_vcc": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Set this to true if you have the VCC pin connected to an external power supply. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "flip_x": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Flip the horizontal axis on the screen. Defaults to `true`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "flip_y": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Flip the vertical axis on the screen. Defaults to `true`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "offset_x": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: Set this option if some horizontal pixel is missing. Numbers are only allowed between `-32~32`. Defaults to `0`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "offset_y": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "**int**: Set this option if some vertical pixel is missing. Numbers are only allowed between `-32~32`. Defaults to `0`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "invert": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Invert all pixel state on the display. Defaults to `false`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select (CS) pin.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1306_spi` display platform allows you to use SSD1306 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf), [Adafruit](https://www.adafruit.com/product/326)) and SH1106 ([datasheet](https://www.elecrow.com/download/SH1106%20datasheet.pdf), [electrodragon](https://www.electrodragon.com/product/1-3-12864-blue-oled-display-iicspi/)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1306 or SH1106 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1306.html#ssd1306-i2c).\n\n*See also: [ssd1306 Over SPI](https://esphome.io/components/display/ssd1306.html#over-spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1322_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1322_256X64"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1322 256x64`\n  \n  \n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "external_vcc": { "type": "boolean" },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1322_spi Component](https://esphome.io/components/display/ssd1322.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1325_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "SSD1325_128X32",
                        "SSD1325_128X64",
                        "SSD1325_96X16",
                        "SSD1325_64X48",
                        "SSD1327_128X128"
                      ],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1325 128x32` (SSD1325 with 128 columns and 32 rows)\n  \n  * `SSD1325 128x64`\n  \n  * `SSD1325 96x16`\n  \n  * `SSD1325 64x48`\n  \n  \n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "external_vcc": { "type": "boolean" },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to. The CS line can be connected to GND if this is the only device on the SPI bus.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1325_spi Component](https://esphome.io/components/display/ssd1325.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1327_i2c" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1327_128X128"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`\n  \n  \n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "61",
                      "markdownDescription": "**int**: Manually specify the [I\u00b2C](https://esphome.io/components/i2c.html#i2c) address of the display. Defaults to 0x3D.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ssd1327_i2c` display platform allows you to use SSD1327 ([datasheet](https://www.generationrobots.com/media/Ecran_OLED_0_96/SSD1327_datasheet.pdf), [Waveshare](https://www.waveshare.com/1.5inch-oled-module.htm)) displays with ESPHome. Note that this component is for displays that are connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c). If your SSD1327 is connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi), see [Over SPI](https://esphome.io/components/display/ssd1327.html#ssd1327-spi).\n\n*See also: [ssd1327 Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#over-i2c)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1327_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1327_128X128"],
                      "markdownDescription": "The model of the display. At present, only one option is available:\n  * `SSD1327 128x128`\n  \n  \n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "brightness": {
                      "type": "string",
                      "default": "1.0",
                      "markdownDescription": "**percentage**: Set display brightness in %. Defaults to `100%`\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select (CS) pin.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1327_spi` display platform allows you to use SSD1327 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1327.pdf), [Adafruit](https://www.adafruit.com/product/326)) displays with ESPHome. Note that this component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi). If your SSD1327 is connected via the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c), see [Over I\u00b2C](https://esphome.io/components/display/ssd1327.html#ssd1327-i2c).\n\n*See also: [ssd1327 Over SPI](https://esphome.io/components/display/ssd1327.html#over-spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1331_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to. The CS line can be connected to GND if this is the only device on the SPI bus.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `ssd1331_spi` display platform allows you to use SSD1331 ([datasheet](https://cdn-shop.adafruit.com/datasheets/SSD1331_1.2.pdf), [Adafruit](https://www.adafruit.com/product/684)) displays with ESPHome. This component is for displays that are connected via the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi).\n\n*See also: [SSD1331 OLED Display](https://esphome.io/components/display/ssd1331.html#ssd1331-oled-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ssd1351_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": ["SSD1351_128X96", "SSD1351_128X128"],
                      "markdownDescription": "The model of the display. Options are:\n  * `SSD1351 128x128` (SSD1351 with 128 columns and 128 rows)\n  \n  * `SSD1351 128x96` (SSD1351 with 128 columns and 96 rows)\n  \n  \n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin on the ESP that that the CS line is connected to.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ssd1351_spi Component](https://esphome.io/components/display/ssd1351.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "st7735" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "model": {
                      "enum": [
                        "INITR_GREENTAB",
                        "INITR_REDTAB",
                        "INITR_BLACKTAB",
                        "INITR_MINI160X80",
                        "INITR_18BLACKTAB",
                        "INITR_18REDTAB"
                      ],
                      "markdownDescription": "**string**: The model to use, one of the following options:\n  * `INITR_BLACKTAB`\n  \n  * `INITR_GREENTAB`\n  \n  * `INITR_REDTAB`\n  \n  * `INITR_MINI160X80`\n  \n  * `INITR_18BLACKTAB`\n  \n  * `INITR_18REDTAB`\n  \n  \n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "device_width": {
                      "type": "number",
                      "markdownDescription": "**int**: The device width. 128 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "device_height": {
                      "type": "number",
                      "markdownDescription": "**int**: The device height. 160 is default\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "col_start": {
                      "type": "number",
                      "markdownDescription": "**int**: The starting column offset. Default value depends on **model**.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "row_start": {
                      "type": "number",
                      "markdownDescription": "**int**: The starting row offset. Default value depends on **model**.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "eight_bit_color": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: 8bit mode. Default is false. This saves 50% of the buffer required for the display.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "use_bgr": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Use BGR mode. Default is false.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "invert_colors": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Invert LCD colors. Default is false.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Time between display updates. Default is 1s.\n\n\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "ST7735 Display Driver.\n\n*See also: [ST7735 Display](https://esphome.io/components/display/st7735.html#st7735-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "st7789v" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "backlight_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The display\u2019s backlight pin.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "brightness": { "type": "string", "default": "1.0" },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `5s`.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["reset_pin", "dc_pin", "cs_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `st7789v` display platform allows you to use ST7789V ([datasheet](https://github.com/Xinyuan-LilyGO/TTGO-T-Display), [Tindie](https://www.tindie.com/products/ttgo/lilygor-ttgo-t-display/)) displays with ESPHome. Note that this component utilizes the 4-Wire [SPI bus](https://esphome.io/components/spi.html#spi); the physical connection is already in place on the TTGO T-Display module as shown below.\n\n*See also: [ST7789V TFT LCD](https://esphome.io/components/display/st7789v.html#st7789v-tft-lcd)*"
          },
          {
            "if": { "properties": { "platform": { "const": "st7920" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "width": {
                      "type": "number",
                      "markdownDescription": "**int**: The \u201cwidth\u201d of a screen. Defaults to 128.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "height": {
                      "type": "number",
                      "markdownDescription": "**int**: The \u201cheight\u201d of a screen. Defaults to 64;\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Sometimes also called `RS`. For ST7920 should be inverted.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `60s`.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["width", "height"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `st7920` display platform allows you to use ST7920 ([datasheet](http://www.elecrow.com/download/SPE_IM120424014_EONE_12864_Graphic_LCD.pdf), [electrodragon](https://www.elecrow.com/128x64-graphic-lcd-p-1143.html)) displays with ESPHome. Note that this component is for displays that are connected via the 3-Wire [SPI bus](https://esphome.io/components/spi.html#spi). It\u2019s a monochrome LCD graphic display.\n\n*See also: [ST7920 LCD Graphic Display](https://esphome.io/components/display/st7920.html#st7920-lcd-graphic-display)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tm1637" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.BASIC_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "intensity": {
                      "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]",
                      "markdownDescription": "**int**: The intensity with which the TM1637 should drive the outputs. Range is from 0 (least intense) to 7 (the default).\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "inverted": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**bool**: Invert character rendering to the TM1637 so you can physically flip the display around.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "length": {
                      "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
                    },
                    "clk_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the CLK line hooked up to.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    },
                    "dio_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin you have the DIO line hooked up to.\n\n\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["clk_pin", "dio_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `tm1637` display platform allows you to use the popular TM1637 7-segment display drivers with ESPHome.\n\n*See also: [TM1637 7-Segment Display](https://esphome.io/components/display/tm1637.html#tm1637-7-segment-display)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "waveshare_epaper" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/display.FULL_DISPLAY_SCHEMA" },
                {
                  "properties": {
                    "dc_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DC pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": [
                        "1.54in",
                        "1.54inv2",
                        "2.13in",
                        "2.13in-ttgo",
                        "2.13in-ttgo-b1",
                        "2.13in-ttgo-b73",
                        "2.13in-ttgo-b74",
                        "2.90in",
                        "2.90inv2",
                        "2.70in",
                        "2.90in-b",
                        "4.20in",
                        "4.20in-bv2",
                        "5.83in",
                        "7.50in",
                        "7.50in-bv2",
                        "7.50in-bc",
                        "7.50inv2",
                        "2.13in-ttgo-dke"
                      ],
                      "markdownDescription": "The model of the E-Paper display. Options are:\n  * `1.54in`\n  \n  * `1.54inv2`\n  \n  * `2.13in` (not tested)\n  \n  * `2.13in-ttgo` (T5_V2.3 tested. Also works for Wemos D1 Mini ePaper Shield 2.13 1.0.0 \u201cLOLIN\u201d)\n  \n  * `2.13in-ttgo-b73` (T5_V2.3 with B73 display tested)\n  \n  * `2.13in-ttgo-b74` (T5_V2.3.1 with B74 display tested)\n  \n  * `2.13in-ttgo-b1` (T5_V2.3 with B1 display tested)\n  \n  * `2.13in-ttgo-dke` (T5_V2.3 with DKE group display (DEPG0213BN) tested)\n  \n  * `2.70in` (currently not working with the HAT Rev 2.1 version)\n  \n  * `2.90in`\n  \n  * `2.90inv2`\n  \n  * `2.90in-b` (B/W rendering only)\n  \n  * `4.20in`\n  \n  * `4.20in-bV2` (B/W rendering only)\n  \n  * `5.83in`\n  \n  * `7.50in`\n  \n  * `7.50in-bc` (display with version sticker \u2018(C)\u2019 on the back, B/W rendering only)\n  \n  * `7.50inV2` (Can\u2019t use with an ESP8266 as it runs out of RAM)\n  \n  \n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "reset_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The RESET pin. Defaults to not connected. Make sure you pull this pin high (by connecting it to 3.3V with a resistor) if not connected to a GPIO pin. The B74 display variant requires the reset pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "busy_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The BUSY pin. Defaults to not connected.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "full_update_every": {
                      "type": "number",
                      "markdownDescription": "**int**: E-Paper displays have two modes of switching to the next image: A partial update that only changes the pixels that have changed and a full update mode that first clears the entire display and then re-draws the image. The former is much quicker and nicer, but every so often a full update needs to happen because artifacts accumulate. On the `1.54in`, `1.54inv2`, `2.13in`, `2.90in` and `2.90inv2` models you have the option to switch only do a full-redraw every x-th time using this option. Defaults to `30` on the described models and a full update for all other models.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "reset_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Duration for the display reset operation. Defaults to `200ms`. Setting this value to `2ms` may resolve issues with newer e-Paper Driver modules (e.g. Rev 2.1).\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CS pin.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "rotation": {
                      "markdownDescription": "Set the rotation of the display. Everything you draw in `lambda:` will be rotated by this option. One of `0\u00b0` (default), `90\u00b0`, `180\u00b0`, `270\u00b0`.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "lambda": {
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to use for rendering the content on the display. See [Display Rendering Engine](https://esphome.io/components/display/index.html#display-engine) for more information.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to re-draw the screen. Defaults to `1s`, use `never` to only manually update the screen via `component.update`.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "pages": {
                      "markdownDescription": "**list**: Show pages instead of a single lambda. See [Display Pages](https://esphome.io/components/display/index.html#display-pages).\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["dc_pin", "model"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `waveshare_epaper` display platform allows you to use some E-Paper displays sold by [Waveshare](https://www.waveshare.com/product/displays/e-paper.htm) with ESPHome. The 2.13\u201d [TTGO module](https://github.com/lewisxhe/TTGO-EPaper-Series) with an ESP32 on the board is supported as well. Depending on your specific revision of the board you might need to try out the `-b73` or `-b1` version (see below). Similar modules sold by other vendors might also work but not have been tested yet. Currently only single-color E-Ink displays are implemented and of those only a few modules.\n\n*See also: [Waveshare E-Paper Display](https://esphome.io/components/display/waveshare_epaper.html#waveshare-e-paper-display)*"
          }
        ]
      },
      "markdownDescription": "The `display` component houses ESPHome\u2019s powerful rendering and display engine. Fundamentally, there are these types of displays:\n\n*See also: [Display Component](https://esphome.io/components/display/index.html#display-component)*"
    },
    "fan": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/fan.FAN_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "binary" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `binary` fan platform lets you represent any binary [Output Component](https://esphome.io/components/output/index.html#output) as a fan.\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#binary-fan)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hbridge" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "decay_mode": { "enum": ["SLOW", "FAST"] },
                    "speed_count": { "type": "number", "default": 100 }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "speed" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "speed_count": { "type": "number", "default": 100 }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `speed` fan platform lets you represent any float [Output Component](https://esphome.io/components/output/index.html#output) as a fan that supports speed settings.\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#speed-fan)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/fan.FAN_SCHEMA" },
                {
                  "properties": {
                    "oscillation_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the oscillation switch. Probably not supported on any Tuya controllers currently, but it\u2019s there if need be.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "speed_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the fan speed.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the fan switch.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "direction_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the direction switch. Supported by some ceiling fans.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "speed_count": {
                      "type": "number",
                      "default": 3,
                      "markdownDescription": "**int**: Set the number of supported discrete speed levels. Defaults to `3`.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the fan.\n\n\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` fan platform creates a variable speed fan from a tuya component.\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#tuya-fan)*"
          }
        ]
      },
      "markdownDescription": "With the `fan` domain you can create components that appear as fans in the Home Assistant frontend. A fan can be switched ON or OFF, optionally has a speed level between 1 and the maximum supported speed level of the fan, and can have an oscillate and direction output.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-component)*"
    },
    "light": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/light.LIGHT_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "binary" } } },
            "then": { "$ref": "#/definitions/light.BINARY_LIGHT_SCHEMA" },
            "markdownDescription": "The `binary` light platform creates a simple ON/OFF-only light from a [binary output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#binary-light)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "color_temperature" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Color Temperature Light](https://esphome.io/components/light/color_temperature.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "cold_white_color_temperature",
                    "warm_white_color_temperature"
                  ]
                }
              ]
            },
            "markdownDescription": "The `color_temperature` light platform creates a Color Temperature light from 2 [float output components](https://esphome.io/components/output/index.html#output). One channel controls the LED temperature, and the other channel controls the brightness.\n\n*See also: [Color Temperature Light](https://esphome.io/components/light/color_temperature.html#color-temperature-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the light output(s).\n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
                },
                "lights": {
                  "anyOf": [
                    { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of lights to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Light](https://esphome.io/components/light/index.html#config-light).\n  \n  \n\n\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "lights"]
            },
            "markdownDescription": "This integration can be used to create custom lights in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Light Output](https://esphome.io/components/light/custom.html#custom-light-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cwww" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "constant_brightness": {
                      "type": "boolean",
                      "default": false
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `cwww` light platform creates a cold white + warm white light from 2 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The two channels can be controlled individually or together.\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#cold-white-warm-white-light)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fastled_clockless" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "rgb_order": {
                      "enum": ["RGB", "RBG", "GRB", "GBR", "BRG", "BGR"],
                      "markdownDescription": "**string**: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "max_refresh_rate": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "chipset": {
                      "enum": [
                        "NEOPIXEL",
                        "TM1829",
                        "TM1809",
                        "TM1804",
                        "TM1803",
                        "UCS1903",
                        "UCS1903B",
                        "UCS1904",
                        "UCS2903",
                        "WS2812",
                        "WS2852",
                        "WS2812B",
                        "SK6812",
                        "SK6822",
                        "APA106",
                        "PL9823",
                        "WS2811",
                        "WS2813",
                        "APA104",
                        "WS2811_400",
                        "GW6205",
                        "GW6205_400",
                        "LPD1886",
                        "LPD1886_8BIT",
                        "SM16703"
                      ],
                      "markdownDescription": "**string**: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets) for options.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the FastLED light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["num_leds"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `fastled_clockless` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets).\n\n*See also: [FastLED Light](https://esphome.io/components/light/fastled.html#clockless)*"
          },
          {
            "if": { "properties": { "platform": { "const": "fastled_spi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "rgb_order": {
                      "enum": ["RGB", "RBG", "GRB", "GBR", "BRG", "BGR"],
                      "markdownDescription": "**string**: The order of the RGB channels. Use this if your light doesn\u2019t seem to map the RGB light channels correctly. For example if your light shows up green when you set a red color through the frontend. Valid values are `RGB`, `RBG`, `GRB`, `GBR`, `BRG` and `BGR`. Defaults to `RGB`.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "max_refresh_rate": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: A time interval used to limit the number of commands a light can handle per second. For example 16ms will limit the light to a refresh rate of about 60Hz. Defaults to the default value for the used chipset.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "chipset": {
                      "enum": [
                        "LPD8806",
                        "WS2801",
                        "WS2803",
                        "SM16716",
                        "P9813",
                        "APA102",
                        "SK9822",
                        "DOTSTAR"
                      ],
                      "markdownDescription": "**string**: Set a chipset to use. See [Supported Chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets) for options.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "data_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the FastLED light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "clock_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the FastLED light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "data_rate": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**frequency**: The data rate to use for shifting data to the light. Can help if you have long cables or slow level-shifters.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["num_leds"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `fastled_spi` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets).\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#spi)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hbridge" } } },
            "then": {
              "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"
            },
            "markdownDescription": "The `hbridge` light platform creates a dual color brightness controlled light from two [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#h-bridge-light)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "monochromatic" } }
            },
            "then": {
              "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"
            },
            "markdownDescription": "The `monochromatic` light platform creates a simple brightness-only light from an [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#monochromatic-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "neopixelbus" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "GRB",
                      "markdownDescription": "**string**: The type of light. This is used to specify if it is an RGBW or RGB light and in which order the colors are. Defaults to `GRB`. Change this if you have lights with white channel and/or the colors are in the wrong order.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "variant": {
                      "enum": [
                        "ws2811",
                        "ws2812",
                        "ws2812x",
                        "ws2813",
                        "sk6812",
                        "tm1814",
                        "tm1829",
                        "tm1914",
                        "800kbps",
                        "400kbps",
                        "apa106",
                        "lc8812",
                        "dotstar",
                        "ws2801",
                        "lpd6803",
                        "lpd8806",
                        "p9813"
                      ],
                      "markdownDescription": "**string**: The chipset of the light.The following options are supported:\n  * `800KBPS` (generic option, recommended for chipsets without explicit support)\n  \n  * `400KBPS`\n  \n  * `WS2811`\n  \n  * `WS2812`\n  \n  * `WS2812X`\n  \n  * `WS2813`\n  \n  * `SK6812`\n  \n  * `TM1814`\n  \n  * `TM1829`\n  \n  * `TM1914`\n  \n  * `APA106`\n  \n  * `LC8812`\n  \n  Additionally the following two-wire chipsets (set `data_pin` and `clock_pin`) are supported:\n  * `WS2801`\n  \n  * `DotStar`\n  \n  * `LPD6803`\n  \n  * `LPD8806`\n  \n  * `P9813`\n  \n  \n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "method": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The method used to transmit the data. By default, ESPHome will try to use the best method available for this chipset, ESP platform, and the given pin. See [methods](https://esphome.io/components/light/neopixelbus.html#neopixelbus-methods) for more information.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "invert": {
                      "type": "boolean",
                      "default": "no",
                      "markdownDescription": "**boolean**: Invert data output, for use with n-type transistors. Defaults to `no`.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the light.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "clock_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the clock line of the light, for two-wire lights.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "data_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin for the data line of the light, for two-wire lights.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "num_leds": {
                      "type": "number",
                      "markdownDescription": "**int**: The number of LEDs attached.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["variant", "num_leds"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `neopixelbus` light platform allows you to create RGB lights in ESPHome for an individually addressable lights like NeoPixel or WS2812.\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#neopixelbus-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "partition" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.ADDRESSABLE_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "segments": {
                      "anyOf": [
                        {
                          "properties": {
                            "from": { "type": "number" },
                            "to": { "type": "number" },
                            "reversed": { "type": "boolean", "default": false }
                          },
                          "type": ["object", "null"],
                          "required_": ["from", "to"],
                          "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"
                        },
                        {
                          "type": "array",
                          "items": {
                            "properties": {
                              "from": { "type": "number" },
                              "to": { "type": "number" },
                              "reversed": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "type": ["object", "null"],
                            "required_": ["from", "to"],
                            "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA"
                          }
                        }
                      ],
                      "markdownDescription": "**list**: A list of segments included in this partition.*For addressable segments:*\n  * **id** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id)): The ID of the addressable light to be controlled by this segment.\n  \n  * **from** (**Required**, int): The index of the first LED to address in the segment. Counting starts with 0, so first LED is 0.\n  \n  * **to** (**Required**, int): The index of the last LED to address in this segment.\n  \n  * **reversed** (*Optional*, boolean): Whether to reverse the order of LEDs in this segment. Defaults to `false`.\n  \n  *For single light segments:*\n  * **single_light_id** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id)): The ID of a single addressable or non-addressable light. If an addressable light is specified, it will be treated as a single light in the partition.\n  \n  \n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["segments"]
                }
              ]
            },
            "markdownDescription": "The `partition` light platform allows you to combine multiple addressable light segments (like [FastLED Light](https://esphome.io/components/light/fastled.html) or [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html)) and/or individual lights (like [RGB Light](https://esphome.io/components/light/rgb.html)) into a single addressable light. This platform also allows splitting up an addressable light into multiple segments, so that segments can be individually controlled.\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#light-partition)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgb" } } },
            "then": {
              "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"
            },
            "markdownDescription": "The `rgb` light platform creates an RGB light from 3 [float output components](https://esphome.io/components/output/index.html#output) (one for each color channel).\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#rgb-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgbct" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "color_interlock": { "type": "boolean", "default": false },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGBCT Light](https://esphome.io/components/light/rgbct.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "cold_white_color_temperature",
                    "warm_white_color_temperature"
                  ]
                }
              ]
            },
            "markdownDescription": "The `rgbct` light platform creates an RGBWT (color temperature + white brightness) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel).\n\n*See also: [RGBCT Light](https://esphome.io/components/light/rgbct.html#rgbct-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgbw" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "color_interlock": { "type": "boolean", "default": false },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rgbw` light platform creates an RGBW light from 4 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel).\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#rgbw-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "rgbww" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "constant_brightness": {
                      "type": "boolean",
                      "default": false
                    },
                    "color_interlock": { "type": "boolean", "default": false },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `rgbww` light platform creates an RGBWW (cold white + warm white) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The cold and warm white channels can be controlled individually or together, see [Mixing](https://esphome.io/components/light/cwww.html#cwww-mixing) for more information.\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#rgbww-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "status_led" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BINARY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to operate the LED on.\n\n\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#configuration-variables)*"
                    },
                    "effects": {
                      "markdownDescription": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light, though binary lights only support very few of them.\n\n\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                }
              ]
            },
            "markdownDescription": "The `status_led` light platform allows to share a single LED for indicating the status of the device (when on error/warning state) or as binary light (when on OK state). This is useful for devices with only one LED available.\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#status-led-light)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/light.BRIGHTNESS_ONLY_LIGHT_SCHEMA" },
                {
                  "properties": {
                    "dimmer_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the dimmer value.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "min_value_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the MCU minimum value setting.  If this is set then ESPHome will sync the **min_value** to the MCU on startup.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the power switch.  My dimmer required this to be able to turn the light on and off.  Without this you would only be able to change the brightness and would have to toggle the light using the physical buttons.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "rgb_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the RGB (red/green/blue) value. If this is set then ESPHome will set the color using a 6 digit hex RGB value.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "hsv_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the HSV (hue/saturation/value) value. If this is set then ESPHome will set the color using a 12 digit hex HSV value.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "color_interlock": { "type": "boolean", "default": false },
                    "color_temperature_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the color temperature value.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "color_temperature_invert": {
                      "type": "boolean",
                      "default": false
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The lowest dimmer value allowed.  My dimmer had a minimum of 25 and wouldn\u2019t even accept anything lower, but this option is available if necessary. Defaults to 0.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The highest dimmer value allowed.  Most dimmers have a maximum of 255, but dimmers with a maximum of 1000 can also be found. Try what works best. Defaults to 255.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "color_temperature_max_value": { "type": "number" },
                    "cold_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "warm_white_color_temperature": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "gamma_correct": { "type": "number", "default": 1.0 },
                    "default_transition_length": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0s"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the light.\n\n\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` light platform creates a simple brightness-only light from a tuya serial component.\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#tuya-dimmer)*"
          }
        ]
      },
      "markdownDescription": "The `light` domain in ESPHome lets you create lights that will automatically be shown in Home Assistant\u2019s frontend and have many features such as RGB colors, transitions, flashing and effects.\n\n*See also: [Light Component](https://esphome.io/components/light/index.html#light-component)*"
    },
    "lock": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/lock.LOCK_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "output" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/lock.LOCK_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/lock.LOCK_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "optimistic": { "type": "boolean", "default": false },
                    "assumed_state": { "type": "boolean", "default": false },
                    "unlock_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "lock_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "open_action": { "$ref": "#/definitions/simple_automation" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      }
    },
    "number": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/number.NUMBER_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/number.NUMBER_SCHEMA" },
                {
                  "properties": {
                    "address": { "type": "number" },
                    "custom_command": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                          }
                        }
                      ]
                    },
                    "offset": { "type": "number" },
                    "byte_offset": { "type": "number" },
                    "bitmask": { "type": "string", "default": "4294967295" },
                    "skip_updates": { "type": "number", "default": 0 },
                    "force_new_range": { "type": "boolean", "default": false },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "response_size": { "type": "number", "default": 0 },
                    "value_type": {
                      "enum": [
                        "RAW",
                        "U_WORD",
                        "S_WORD",
                        "U_DWORD",
                        "U_DWORD_R",
                        "S_DWORD",
                        "S_DWORD_R",
                        "U_QWORD",
                        "U_QWORDU_R",
                        "S_QWORD",
                        "U_QWORD_R",
                        "FP32",
                        "FP32_R"
                      ]
                    },
                    "write_lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "max_value": { "type": "number", "default": 16777215.0 },
                    "min_value": { "type": "number", "default": -16777215.0 },
                    "step": { "type": "number", "default": 1 },
                    "multiply": { "type": "number", "default": 1.0 },
                    "use_write_multiple": {
                      "type": "boolean",
                      "default": false
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Controller Number](https://esphome.io/components/number/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Controller Number](https://esphome.io/components/number/modbus_controller.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` platform creates a Number from a modbus_controller. When the Number is updated a modbus write command is created sent to the device.\n\n*See also: [Modbus Controller Number](https://esphome.io/components/number/modbus_controller.html#modbus-controller-number)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/number.NUMBER_SCHEMA" },
                {
                  "properties": {
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**float**: The maximum value this number can be.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**float**: The minimum value this number can be.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "step": {
                      "type": "number",
                      "markdownDescription": "**float**: The granularity with which the number can be set.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the current value of the number.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the template number will immediately update the reported state. Cannot be used with `lambda`. Defaults to `false`.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "set_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests to set the number value. The new value is available to lambdas in the `x` variable.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "initial_value": {
                      "type": "number",
                      "markdownDescription": "**float**: The value to set the state to on setup if not restored with `restore_value`. Cannot be used with `lambda`. Defaults to `min_value`.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "restore_value": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Saves and loads the state to RTC/Flash. Cannot be used with `lambda`. Defaults to `false`.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the number.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval on which to update the number by executing the `lambda`. Defaults to `60s`.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["max_value", "min_value", "step"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` number platform allows you to create a number with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Number](https://esphome.io/components/number/template.html#template-number)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/number.NUMBER_SCHEMA" },
                {
                  "properties": {
                    "number_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the number.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**float**: The maximum value this number can be.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**float**: The minimum value this number can be.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    },
                    "step": {
                      "type": "number",
                      "markdownDescription": "**float**: The granularity with which the number can be set.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "number_datapoint",
                    "max_value",
                    "min_value",
                    "step"
                  ]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` number platform allows you to create a number that controls a tuya serial component. This platform requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Number](https://esphome.io/components/number/tuya.html#tuya-number)*"
          }
        ]
      },
      "markdownDescription": "ESPHome has support for components to create a number entity. A number entity is like a sensor that can read a value from a device, but is useful when that value can be set by the user/frontend.\n\n*See also: [Number Component](https://esphome.io/components/number/index.html#number-component)*"
    },
    "output": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ac_dimmer" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "gate_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin used to control the Triac or Mosfet.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "zero_cross_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin used to sense the AC Zero cross event, you can have several dimmers controlled with the same zero cross detector, in such case duplicate the `zero_cross_pin` config on each output.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "init_with_half_cycle": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Will send the first full half AC cycle Try to use this for dimmable LED lights, it might help turning on at low brightness levels. On Halogen lamps it might show at initial flicker. Defaults to `false`.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "method": {
                      "enum": ["LEADING_PULSE", "LEADING", "TRAILING"],
                      "markdownDescription": "Set the method for dimming, can be:\n  * `leading pulse` (default): a short pulse to trigger a triac.\n  \n  * `leading`: gate pin driven high until the zero cross is detected\n  \n  * `trailing`: gate pin driven high from zero cross until dim period, this method is suitable for mosfet dimmers only.\n  \n  \n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["gate_pin", "zero_cross_pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "This component has not been fully tested yet, if you are testing this component please share your experience with the dimmer hardware and light model and configuration here [https://github.com/esphome/feature-requests/issues/278](https://github.com/esphome/feature-requests/issues/278)\n\n*See also: [AC Dimmer Component](https://esphome.io/components/output/ac_dimmer.html#ac-dimmer-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_client" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "characteristic_uuid": {
                      "type": ["null", "object", "string", "array", "number"]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["service_uuid", "characteristic_uuid"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_client` component is a output that can write a binary value to service characteristics of BLE devices.\n\n*See also: [BLE Client Binary Output](https://esphome.io/components/output/ble_client.html#ble-client-binary-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "markdownDescription": "**string**: The type of output. One of `binary` and `float`.\n\n\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
                    }
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "binary" } } },
                  "then": { "$ref": "#/definitions/output-custom-binary" }
                },
                {
                  "if": { "properties": { "type": { "const": "float" } } },
                  "then": { "$ref": "#/definitions/output-custom-float" }
                }
              ]
            },
            "markdownDescription": "This integration can be used to create custom binary and float [outputs](https://esphome.io/components/output/index.html) in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Output](https://esphome.io/components/output/custom.html#custom-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_dac" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to use DAC on. Only GPIO25 and GPIO26 are supported.\n\n\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The ESP32 DAC platform allows you to output analog voltages using the 8-bit digital-to-analog converter of the ESP32. Unlike the [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html), which can simulate an analog signal by using a fast switching frequency, the hardware DAC can output a *real* analog signal with no need for additional filtering.\n\n*See also: [ESP32 DAC](https://esphome.io/components/output/esp32_dac.html#esp32-dac)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp8266_pwm" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to use PWM on.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    },
                    "frequency": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1kHz",
                      "markdownDescription": "**frequency**: The frequency to run the PWM with. Lower frequencies have more visual artifacts, but can represent much more colors. Defaults to `1000 Hz`.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The ESP8266 Software PWM platform allows you to use a software PWM on the pins GPIO0-GPIO16 on your ESP8266. Note that this is a software PWM, so there can be some flickering during periods of high WiFi activity. Hardware PWMs like the one on the ESP32 (see [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html)) are preferred.\n\n*See also: [ESP8266 Software PWM Output](https://esphome.io/components/output/esp8266_pwm.html#esp8266-software-pwm-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.BINARY_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to turn on and off.\n\n\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The GPIO output component is quite simple: It exposes a single GPIO pin as an output component. Note that output components are **not** switches and will not show up in Home Assistant. See [GPIO Switch](https://esphome.io/components/switch/gpio.html).\n\n*See also: [GPIO Output](https://esphome.io/components/output/gpio.html#gpio-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ledc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to use LEDC on. Can only be GPIO0-GPIO33.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "frequency": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1kHz",
                      "markdownDescription": "**float**: At which frequency to run the LEDC channel\u2019s timer. Defaults to 1000Hz.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Manually set the [LEDC channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel) to use. Two adjacent channels share the same timer. Defaults to an automatic selection.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The LEDC output component exposes a [LEDC PWM channel](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html) of the ESP32 as an output component.\n\n*See also: [ESP32 LEDC Output](https://esphome.io/components/output/ledc.html#esp32-ledc-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp4725" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "96",
                      "markdownDescription": "**int**: Manually specify the I2C address of the DAC. Defaults to `0x60`.\n\n\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The MCP4725 output component allows to use [12bit external DAC](https://learn.sparkfun.com/tutorials/mcp4725-digital-to-analog-converter-hookup-guide/all) in order to have analog output(s) on any board by using I2C. Devices default address is `0x60` and configurable alternative is `0x61`.\n\n*See also: [MCP4725 Output](https://esphome.io/components/output/mcp4725.html#mcp4725-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp47a1" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "46",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the DAC. Defaults to `0x2E`.\n\n\n\n*See also: [MCP47A1 Output](https://esphome.io/components/output/mcp47a1.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [MCP47A1 Output](https://esphome.io/components/output/mcp47a1.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `mcp47a1` output component allows to use [6bit external DAC](https://www.microchip.com/en-us/product/MCP47A1) in order to have analog output(s) on any board by using I\u00b2C. Devices default address is `0x2E` and configurable alternative is `0x3E`.\n\n*See also: [MCP47A1 Output](https://esphome.io/components/output/mcp47a1.html#mcp47a1-output)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string" },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Controller Output](https://esphome.io/components/output/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Controller Output](https://esphome.io/components/output/modbus_controller.html#configuration-variables)*"
                    }
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "coil" } } },
                  "then": {
                    "$ref": "#/definitions/output-modbus_controller-coil"
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "holding" } } },
                  "then": {
                    "$ref": "#/definitions/output-modbus_controller-holding"
                  }
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` platform creates a output from a modbus_controller.\n\n*See also: [Modbus Controller Output](https://esphome.io/components/output/modbus_controller.html#modbus-controller-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "my9231" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the MY9231/MY9291 chain of this output component. Channel 0 is the most close channel.\n\n\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The MY931/MY9291 output component exposes a MY931/MY9291 channel of a global [Component/Hub](https://esphome.io/components/output/my9231.html#my9231-component) as a float output.\n\n*See also: [my9231 Output](https://esphome.io/components/output/my9231.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pca9685" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the PCA9685 of this output component. Must be in range from 0 to 15.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/pca9685.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/pca9685.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "The PCA9685 component represents a PCA9685 12-bit PWM driver ([datasheet](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel), [adafruit](https://www.adafruit.com/product/815)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [PCA9685](https://esphome.io/components/output/pca9685.html#pca9685)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pipsolar" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "battery_recharge_voltage": {
                      "$ref": "#/definitions/output-pipsolar-battery_recharge_voltage"
                    },
                    "battery_under_voltage": {
                      "$ref": "#/definitions/output-pipsolar-battery_under_voltage"
                    },
                    "battery_float_voltage": {
                      "$ref": "#/definitions/output-pipsolar-battery_float_voltage"
                    },
                    "battery_type": {
                      "$ref": "#/definitions/output-pipsolar-battery_type"
                    },
                    "current_max_ac_charging_current": {
                      "$ref": "#/definitions/output-pipsolar-current_max_ac_charging_current"
                    },
                    "current_max_charging_current": {
                      "$ref": "#/definitions/output-pipsolar-current_max_charging_current"
                    },
                    "output_source_priority": {
                      "$ref": "#/definitions/output-pipsolar-output_source_priority"
                    },
                    "charger_source_priority": {
                      "$ref": "#/definitions/output-pipsolar-charger_source_priority"
                    },
                    "battery_redischarge_voltage": {
                      "$ref": "#/definitions/output-pipsolar-battery_redischarge_voltage"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "slow_pwm" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to pulse.\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    },
                    "turn_on_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "turn_off_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "state_change_action": {
                      "$ref": "#/definitions/simple_automation"
                    },
                    "period": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each cycle. (i.e. a 10s period at 50% duty would result in the pin being turned on for 5s, then off for 5s)\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    },
                    "restart_cycle_on_state_change": {
                      "type": "boolean",
                      "default": false
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["period"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Similar to PWM, the Slow PWM Output platform allows you to control GPIO pins by pulsing them on/off over a longer time period. It could be used to control a heating element through a relay where a fast PWM update cycle would not be appropriate.\n\n*See also: [Slow PWM Output](https://esphome.io/components/output/slow_pwm.html#slow-pwm-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm16716" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the SM16716 chain of this output component.\n\n\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The SM16716 output component exposes a SM16716 channel of a global [Component/Hub](https://esphome.io/components/output/sm16716.html#sm16716-component) as a float output.\n\n*See also: [sm16716 Output](https://esphome.io/components/output/sm16716.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm2135" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the SM2135 chain of this output component.\n\n\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The SM2135 output component exposes a SM2135 channel of a global [Component/Hub](https://esphome.io/components/output/sm2135.html#sm2135-component) as a float output.\n\n*See also: [sm2135 Output](https://esphome.io/components/output/sm2135.html#output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sx1509" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": { "pin": { "type": "number" } },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "markdownDescription": "**string**: The type of output. One of `binary` and `float`.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#configuration-variables)*"
                    }
                  }
                },
                {
                  "if": { "properties": { "type": { "const": "binary" } } },
                  "then": { "$ref": "#/definitions/output-template-binary" }
                },
                {
                  "if": { "properties": { "type": { "const": "float" } } },
                  "then": { "$ref": "#/definitions/output-template-float" }
                }
              ]
            },
            "markdownDescription": "The `template` output component can be used to create templated binary and float outputs in ESPHome.\n\n*See also: [Template Output](https://esphome.io/components/output/template.html#template-output)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tlc59208f" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Choose the channel of the TLC59208F for this output component. Must be in range from 0 to 7.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/tlc59208f.html#id1)*"
                    },
                    "address": {
                      "markdownDescription": "**int**: The I\u00b2C address of the driver. Defaults to `0x20`.\n\n\n\n*See also: [Component](https://esphome.io/components/output/tlc59208f.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [PWM Output](https://esphome.io/components/output/tlc59208f.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                }
              ]
            },
            "markdownDescription": "The TLC59208F component represents a Texas Instruments TLC59208F 8-bit PWM driver ([datasheet](http://www.ti.com/lit/gpn/tlc59208f), [hw example](https://faboplatform.github.io/ArduinoDocs/03.I2C%20Brick/211_brick_i2c_7seg/)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [TLC59208F](https://esphome.io/components/output/tlc59208f.html#tlc59208f)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tlc5947" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/output.FLOAT_OUTPUT_SCHEMA" },
                {
                  "properties": {
                    "channel": {
                      "type": "number",
                      "markdownDescription": "**int**: Chose the channel of the TLC5947 chain of this output component.\n\n\n\n*See also: [tlc5947 Output](https://esphome.io/components/output/tlc5947.html#id1)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id to use for this output component.\n\n\n\n*See also: [tlc5947 Output](https://esphome.io/components/output/tlc5947.html#id1)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["channel"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The tlc5947 output component exposes a tlc5947 channel of a global [Component/Hub](https://esphome.io/components/output/tlc5947.html#tlc5947-component) as a float output.\n\n*See also: [tlc5947 Output](https://esphome.io/components/output/tlc5947.html#output)*"
          }
        ]
      },
      "markdownDescription": "Each platform of the `output` domain exposes some output to ESPHome. These are grouped into two categories: `binary` outputs (that can only be ON/OFF) and `float` outputs (like PWM, can output any rational value between 0 and 1).\n\n*See also: [Output Component](https://esphome.io/components/output/index.html#output-component)*"
    },
    "select": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/select.SELECT_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/select.SELECT_SCHEMA" },
                {
                  "properties": {
                    "options": {
                      "anyOf": [
                        { "$ref": "#/definitions/esphome-libraries" },
                        {
                          "type": "array",
                          "items": { "$ref": "#/definitions/esphome-libraries" }
                        }
                      ],
                      "markdownDescription": "**list**: The list of options this Select has.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the current option of the select.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the Template Select will immediately update the reported state. Cannot be used with `lambda`. Defaults to `false`.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "set_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests to set the Select option. The new option is available to lambdas in the `x` variable.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "initial_option": {
                      "type": "string",
                      "markdownDescription": "**string**: The option to set the option to on setup if not restored with `restore_value`. Cannot be used with `lambda`. Defaults to the first option in the `options` list.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "restore_value": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: Saves and loads the state to RTC/Flash. Cannot be used with `lambda`. Defaults to `false`.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the Select.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval on which to update the select by executing the `lambda`. Defaults to `60s`.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["options"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` Select platform allows you to create a Select with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Select](https://esphome.io/components/select/template.html#template-select)*"
          }
        ]
      },
      "markdownDescription": "ESPHome has support for components to create a select entity. A select entity is basically an option list that can be set by either yaml, hardware or the user/frontend.\n\n*See also: [Select Component](https://esphome.io/components/select/index.html#select-component)*"
    },
    "sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "adc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to measure the voltage on. Or on the ESP8266 alternatively also `VCC`, see [ESP8266 Measuring VCC](https://esphome.io/components/sensor/adc.html#adc-esp8266-vcc).\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "raw": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Allows to read the raw ADC output without any conversion or calibration. See [Different ESP32-ADC behavior since 2021.11](https://esphome.io/components/sensor/adc.html#adc-raw). Defaults to `false`.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "attenuation": {
                      "properties": {
                        "auto": {
                          "type": [
                            "null",
                            "object",
                            "string",
                            "array",
                            "number"
                          ]
                        }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "Only on ESP32. Specify the ADC attenuation to use. See [ESP32 Attenuation](https://esphome.io/components/sensor/adc.html#adc-esp32-attenuation). Defaults to `0db`.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the voltage sensor.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The Analog To Digital (`adc`) Sensor allows you to use the built-in ADC in your device to measure a voltage on certain pins. On the ESP8266 only pin A0 (GPIO17) supports this. On the ESP32 pins GPIO32 through GPIO39 can be used.\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#analog-to-digital-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ade7953" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "irq_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin connected to the ADE7935 IRQ line (if connected)\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volt. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "current_a": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the A channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "current_b": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the B channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "active_power_a": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "active_power_b": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the A channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "56",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x38`.\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [ADE7953 Power Sensor](https://esphome.io/components/sensor/ade7953.html#ade7953-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ads1115" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "multiplexer": {
                      "enum": [
                        "A0_A1",
                        "A0_A3",
                        "A1_A3",
                        "A2_A3",
                        "A0_GND",
                        "A1_GND",
                        "A2_GND",
                        "A3_GND"
                      ],
                      "markdownDescription": "The multiplexer channel of this sensor. Effectively means between which pins you want to measure voltage.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "gain": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: The gain of this sensor.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for this sensor.\n\n\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#id3)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["multiplexer", "gain"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ads1115` sensor allows you to use your ADS1115 sigma-delta ADC sensors ([datasheet](http://www.ti.com/lit/ds/symlink/ads1115.pdf), [Adafruit](https://www.adafruit.com/product/1085)) with ESPHome. First, setup an [ADS1115 Hub](https://esphome.io/components/sensor/ads1115.html#ads1115-component) for your ADS1115 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "aht10" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "56" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `aht10` Temperature+Humidity sensor allows you to use your aht10 ([datasheet](http://www.aosong.com/userfiles/files/media/aht10%E8%A7%84%E6%A0%BC%E4%B9%A6v1_1%EF%BC%8820191015%EF%BC%89.pdf)) i2c-based sensor with ESPHome.\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#aht10-temperature-humidity-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "airthings_wave_mini" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "tvoc": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "airthings_wave_plus" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "radon": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "radon_long_term": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "co2": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "tvoc": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "am2320" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "92" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `am2320` Temperature+Humidity sensor allows you to use your AM2320 ([datasheet](https://akizukidenshi.com/download/ds/aosong/AM2320.pdf)) I\u00b2C-based sensor with ESPHome.\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#am2320-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "am43" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `am43` sensor platform allows you to read the light and battery sensors on an AM43 BLE cover motor. The platform connects to the device over the ESP32\u2019s BLE peripheral.\n\n*See also: [AM43 Sensor](https://esphome.io/components/sensor/am43.html#am43-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "apds9960" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "enum": ["CLEAR", "RED", "GREEN", "BLUE", "PROXIMITY"],
                      "markdownDescription": "**string**: The type of sensor measurement. One of\n  * **CLEAR**\n  \n  * **RED**\n  \n  * **GREEN**\n  \n  * **BLUE**\n  \n  * **PROXIMITY**\n  \n  \n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["type"]
                }
              ]
            },
            "markdownDescription": "The `apds9960` sensor allows you to use your [APDS9960 Sensor to perform different measurements.\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "as3935" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "distance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Distance in km to the front of the storm and not the distance to a lightning strike.\n  * **name** (**Required**, string): The name for the distance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
                    },
                    "lightning_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Lightning energy value. According to the datasheet this is only a pure value that doesn\u2019t have any physical meaning.\n  * **name** (**Required**, string): The name for the lightning energy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "A sensor platform to read lightning data\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "atc_mithermometer" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "signal_strength": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "atm90e32" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "phase_a": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 1st phase.\n  * **voltage** (*Optional*): Use the voltage value of this phase in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **current** (*Optional*): Use the current value of this phase in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this phase in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **reactive_power** (*Optional*): Use the reactive power value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power_factor** (*Optional*): Use the power factor value on this phase. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **gain_voltage** (*Optional*, int): Voltage gain to scale the low voltage AC power pack to household mains feed. Defaults to `7305`.\n  \n  * **gain_ct** (*Optional*, int): CT clamp calibration for this phase. Defaults to `27961`.\n  \n  * **forward_active_energy** (*Optional*): Use the forward active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **reverse_active_energy** (*Optional*): Use the reverse active energy value on this phase in watt-hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "phase_b": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 2nd phase. Same options as 1st phase.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "phase_c": {
                      "$ref": "#/definitions/sensor-atm90e32-phase_a",
                      "markdownDescription": "The configuration options for the 3rd phase. Same options as 1st phase.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequenycy value calculated by the meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "chip_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the chip temperature value. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "line_frequency": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The AC line frequency of the supply voltage. One of `50Hz`, `60Hz`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "current_phases": {
                      "enum": ["2", "3"],
                      "markdownDescription": "The number of phases the meter has, `2` or, `3` The 6 Channel Expandable Energy Meter should be set to `3`, and the Split Single Phase meter should be set to `2`. Defaults to `3`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "gain_pga": {
                      "enum": ["1X", "2X", "4X"],
                      "markdownDescription": "**string**: The gain for the CT clamp, `2X` for 100A, `4X` for 100A - 200A. One of `1X`, `2X`, `4X`. Defaults to `2X` which is suitable for the popular SCT-013-000 clamp.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin CS is connected to. For the 6 channel meter main board, this will always be 5 and 4. For the add-on boards a jumper can be selected for each CS pin, but default to 0 and 16.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["line_frequency"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `atm90e32` sensor platform allows you to use your ATM90E32 voltage/current and power sensors ([datasheet](http://ww1.microchip.com/downloads/en/devicedoc/Atmel-46003-SE-M90E32AS-Datasheet.pdf)) with ESPHome. This sensor is commonly found in CircuitSetup 2 and 6 channel energy meters.\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#atm90e32-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bh1750" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "resolution": {
                      "enum": [4.0, 1.0, 0.5],
                      "markdownDescription": "**string**: The resolution of the sensor in lx. One of `4.0`, `1.0`, `0.5`. Defaults to `0.5` (the maximum resolution).\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "measurement_duration": {
                      "type": "number",
                      "default": 69,
                      "markdownDescription": "**int**: Manually specify the measurement duration between `31` and `254`. Defaults to `69`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "35",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x23` (address if address pin is pulled low). If the address pin is pulled high, the address is `0x5C`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `bh1750` sensor platform allows you to use your BH1750 ([datasheet](http://www.mouser.com/ds/2/348/bh1750fvi-e-186247.pdf)) ambient light sensor with ESPHome. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#bh1750-ambient-light-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "binary_sensor_map" } }
            },
            "then": {
              "allOf": [
                {
                  "type": "object",
                  "properties": { "type": { "type": "string" } }
                },
                {
                  "if": { "properties": { "type": { "const": "group" } } },
                  "then": {
                    "$ref": "#/definitions/sensor-binary_sensor_map-group"
                  }
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "bl0940" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The voltage value of the sensor in Volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The current value of the sensor in Amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The (active) power value of the sensor in Watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in kWh. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "internal_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The internal temperature value of the sensor in \u00b0C. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "external_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The external value of the sensor in \u00b0C. Often not connected and gives garbage data. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#belling-bl0940-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_client" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "characteristic_uuid": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "descriptor_uuid": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "notify": { "type": "boolean", "default": false },
                    "on_notify": { "$ref": "#/definitions/simple_automation" }
                  },
                  "type": ["object", "null"],
                  "required_": ["service_uuid", "characteristic_uuid"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ble_client` component is a sensor platform that can query BLE devices for specific values of service characteristics.\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#ble-client-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ble_rssi" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address to track for this sensor. Either this or \u2018\u2019service_uuid\u2019\u2019 has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "service_uuid": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**16 bit, 32 bit, or 128 bit BLE Service UUID**: The BLE Service UUID which can be tracked if the device randomizes the MAC address. Either this or \u2018\u2019mac_address\u2019\u2019 has to be present.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_rssi` sensor platform lets you track the RSSI value or signal strength of a BLE device. See [the binary sensor setup](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-ble-tracker-setting-up-devices) for instructions for setting up this platform.\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#esp32-bluetooth-low-energy-rssi-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme280" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor-bme280-temperature",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bme280-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor-bme280-humidity",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme280.html#bme280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": ["OFF", "2X", "4X", "8X", "16X"],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "119",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`. Another address can be `0x76`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `bme280` sensor platform allows you to use your BME280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BME280_DS001-10.pdf), [Adafruit](https://www.adafruit.com/product/2652)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BME280 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/bme280.html#bme280-temperature-pressure-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor-bme680-temperature",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bme680-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor-bme680-humidity",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bme680.html#bme680-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "gas_resistance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the gas sensor.\n  * **name** (**Required**, string): The name for the gas resistance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": [
                        "OFF",
                        "1X",
                        "3X",
                        "7X",
                        "15X",
                        "31X",
                        "63X",
                        "127X"
                      ],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `1x`, `3x`, `7x`, `15x`, `31x`, `63x` and `127x`. Defaults to `OFF`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "heater": {
                      "properties": {
                        "temperature": {
                          "type": "number",
                          "default": 320,
                          "markdownDescription": "**int**: The target temperature of the heater between 200 and 400 \u00b0C. Defaults to `320`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                        },
                        "duration": {
                          "properties": {
                            "days": { "type": "number" },
                            "hours": { "type": "number" },
                            "minutes": { "type": "number" },
                            "seconds": { "type": "number" },
                            "milliseconds": { "type": "number" },
                            "microseconds": { "type": "number" }
                          },
                          "type": ["object", "null"],
                          "default": "150ms",
                          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration the heater should be active. Maximum value is `4032ms`. Defaults to `150ms`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                        }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "The settings for the internal heater for the gas sensor. Set this to disable the internal heater.\n  * **temperature** (*Optional*, int): The target temperature of the heater between 200 and 400 \u00b0C. Defaults to `320`.\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration the heater should be active. Maximum value is `4032ms`. Defaults to `150ms`.\n  \n  \n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "118",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x76`. Another address can be `0x77`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `bme680` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#bme680-temperature-pressure-humidity-gas-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680_bsec" } } },
            "then": {
              "properties": {
                "temperature": {
                  "$ref": "#/definitions/sensor-bme680_bsec-temperature",
                  "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * **sample_rate** (*Optional*, string): Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "pressure": {
                  "$ref": "#/definitions/sensor-bme680_bsec-pressure",
                  "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * **sample_rate** (*Optional*, string): Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "humidity": {
                  "$ref": "#/definitions/sensor-bme680_bsec-humidity",
                  "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * **sample_rate** (*Optional*, string): Optional sample rate override for this sensor. Can be `lp` for low power consumption, sampling every 3 seconds or `ulp` for ultra low power, sampling every 5 minutes.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "gas_resistance": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the gas sensor.\n  * **name** (**Required**, string): The name for the gas resistance sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "iaq": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the IAQ sensor.\n  * **name** (**Required**, string): The name for the IAQ sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "iaq_accuracy": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the numeric IAQ accuracy sensor.\n  * **name** (**Required**, string): The name for the IAQ accuracy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "co2_equivalent": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the CO2 equivalent sensor.\n  * **name** (**Required**, string): The name for the CO2 equivalent sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                },
                "breath_voc_equivalent": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                  "markdownDescription": "The information for the Breath VOC equivalent humidity sensor.\n  * **name** (**Required**, string): The name for the Breath VOC equivalent sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bmp085" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "119",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`.\n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The BMP085 sensor platform allows you to use your BMP085 ([datasheet](https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf), [Adafruit](https://www.adafruit.com/product/391)) and BMP180 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf), [Adafruit](https://www.adafruit.com/product/1603)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#bmp085-temperature-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bmp280" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor-bmp280-temperature",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bmp280-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp280.html#bmp280-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": ["OFF", "2X", "4X", "8X", "16X"],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`. Defaults to `OFF`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "119",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`. Another address can be `0x76`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `bmp280` sensor platform allows you to use your BMP280 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001-11.pdf), [Adafruit](https://www.adafruit.com/product/2651)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP280 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp280.html#bmp280-temperature-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bmp3xx" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor-bmp3xx-temperature",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp3xx.html#bmp3xx-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor-bmp3xx-pressure",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **oversampling** (*Optional*): The oversampling parameter for the temperature sensor. See [Oversampling Options](https://esphome.io/components/sensor/bmp3xx.html#bmp3xx-oversampling).\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
                    },
                    "iir_filter": {
                      "enum": [
                        "OFF",
                        "2X",
                        "4X",
                        "8X",
                        "16X",
                        "32X",
                        "64X",
                        "128X"
                      ],
                      "markdownDescription": "Set up an Infinite Impulse Response filter to increase accuracy. One of `OFF`, `2x`, `4x`, `16x`, `32`, `64x`, `128x`. Defaults to `OFF`.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "119",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`. Another address can be `0x76`.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `bmp3xx` sensor platform allows you to use your BMP388 or BMP390 ([datasheet](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp390-ds002.pdf), [BMP390 product page](https://www.bosch-sensortec.com/products/environmental-sensors/pressure-sensors/bmp390/)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) bus is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP388 / BMP390 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp3xx.html#bmp388-bmp390-temperature-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "b_parasite" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "[b-parasite](https://github.com/rbaron/b-parasite) is an open source soil moisture and ambient temperature/humidity/light sensor.\n\n*See also: [b-parasite](https://esphome.io/components/sensor/b_parasite.html#b-parasite)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ccs811" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "eco2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The eCO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the total volatile organic compound sensor in parts per billion (ppb).\n  * **name** (**Required**, string): The name for the tvoc sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    },
                    "version": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "baseline": { "type": "string" },
                    "address": { "type": "string", "default": "90" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["eco2", "tvoc"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ccs811` sensor platform allows you to use CCS811 CO_2 and volatile organic compound sensors ([Adafruit](https://www.adafruit.com/product/3566)) with ESPHome.\n\n*See also: [CCS811 CO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#ccs811-co-2-and-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cd74hc4067" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": { "number": { "type": "number" } },
                  "type": ["object", "null"],
                  "required_": ["number"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The source sensor to measure voltage values from, e.g. [ADC sensor](https://esphome.io/components/sensor/adc.html).\n\n*See also: [cd74hc4067 Sensor](https://esphome.io/components/sensor/cd74hc4067.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cs5460a" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "samples": {
                      "type": "number",
                      "default": 4000,
                      "markdownDescription": "The number of samples that go into each reading \u2013 determines that update interval of the sensors and the accuracy of the readings.  This is the number N from the CS5460A datasheet, defined as the number of *conversion cycles* within a *computation cycle*.  The component reports data at the end of each *computation cycle*.  With the standard 4.096MHz clock rate, each *conversion* takes 0.25ms so setting this to 2000 means 0.5s update interval, 40000 means 10s update interval and so on, similarly for other clock-rates.  It is recommended that the interval be an integer number of the mains AC cycles, so for the 50 Hz AC frequency countries the interval should be a multiple of 20ms, for the 60 Hz countries a multiple of 16.66 ms. Defaults to `4000` (1 second at 4.096MHz).  Admits values from 1 to 16777215.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "phase_offset": {
                      "type": "number",
                      "default": 0,
                      "markdownDescription": "This can be used to account for a phase offset between the voltage sensing circuit and the current sensing circuit to improve power measurement accuracy.  Admits integer values between -64 to 63, which should be offset by 0.5 and multiplied by about 8.2 CS5460A clock intervals to get the resulting time offset.  With the typical 4.096 MHz clocking this scales to a range of -128 \u03bcs to 128 \u03bcs, or -2.3\u00ba to 2.3\u00ba phase offset at 50Hz and a -2.8\u00ba to 2.8\u00ba phase offset at 60Hz.  Defaults to `0` (i.e. time offset of 4.1 MCLK cycles).  An easy way to find the correct value is to plug in a resisitve load such as an incandescent light-bulb and find the `phase_offset` value that results in the highest power reported by the sensor.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "pga_gain": {
                      "enum": ["10X", "50X"],
                      "markdownDescription": "If set to `10X` (default), the differential voltage at the current inputs must be between -250mV and +250mV.  If set to `50X` it must be within -100mV to +100mV.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "current_gain": {
                      "type": "number",
                      "default": 0.001,
                      "markdownDescription": "Set this to the ratio of the differential voltage at the current inputs (in Volts) vs. the actual line current to be calculated (in Amperes).  When using a shunt resistor as the current sensing element, this is going to simply equal the resistance since the differential voltage is the line current multiplied by the resistance.  When using a current transformer, the value is going to be the burden resistor\u2019s value divided by the number of turns of the transformer winding.  For a 2000 turn current transformer clamp and a 2 Ohm burden resistor this works out to 0.001 (the default if **current_gain** is not specified).\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "voltage_gain": {
                      "type": "number",
                      "default": 0.001,
                      "markdownDescription": "Set this to the ratio of the voltage at the voltage input pins of CS5460A to the line voltage.  When using a simple voltage divider, this is the divider\u2019s ratio. When using a voltage transformer this is the secondary turns to primary turns ratio.  When using a current transformer (such as the ZMPT101B) this is equals `(secondary turns * burden resistor value) / (primary turns * limiting resistor value)`, and similarly for combinations of transfomers and voltage dividers.  Defaults to `0.001`.  Must be a positive number.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "current_hpf": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "Enables and disables the High-pass Filter on the current processing path in the CS5460A.  Defaults to `true` (enabled).\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "voltage_hpf": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "Enables and disables the High-pass Filter on the voltage processing path in the CS5460A.  Defaults to `true` (enabled).\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "pulse_energy": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 10.0,
                      "markdownDescription": "Sets the energy (in Watt-hours) per individual pulse on the CS5460A\u2019s EOUT pin that can be used to driver external counters / meters or a LED.  The allowed range depends on the gain parameters, defaults to `10 Wh`.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The sensor subcomponent that will report RMS voltage values in Volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The sensor subcomponent that will report RMS current values in Amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The sensor subcomponent that will report the power readings in Watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `cs5460a` sensor platform allows you to use a CS5460A AC voltage, current and power meter chip ([datasheet](https://statics.cirrus.com/pubs/proDatasheet/CS5460A_F5.pdf)) with ESPHome. The chip is usually sold on a breakout board with a 4.096 MHz crystal.  However it requires a few extra components, specifically a current sensing circuit and a voltage sensing circuit.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#cs5460a-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cse7761" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "current_1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the channel 1 in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "current_2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the channel 2 in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "active_power_1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the channel 1 in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "active_power_2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the channel 2 in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `cse7761` sensor platform allows you to use your CSE7761 voltage/current and power sensors with ESPHome. This sensor is commonly found in Sonoff Dual R3 v1.x.\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#cse7761-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "cse7766" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total energy value of the sensor in Wh. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `cse7766` sensor platform allows you to use your CSE7766 voltage/current and power sensors ([datasheet](http://dl.itead.cc/S31/CSE7766.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POW R2. CSE7759B is similar to CSE7766 and works with this integration.\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#cse7766-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ct_clamp" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "sample_duration": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "200ms"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The Current Transformer Clamp (`ct_clamp`) sensor allows you to hook up a CT Clamp to an analog voltage sensor (like the [ADC sensor](https://esphome.io/components/sensor/adc.html)) and convert the readings to measured single phase AC current.\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#ct-clamp-current-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the sensor(s).\n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
                },
                "sensors": {
                  "anyOf": [
                    { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
                    }
                  ],
                  "markdownDescription": "**list**: A list of sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "sensors"]
            },
            "markdownDescription": "While I do try to keep the ESPHome configuration options as stable as possible and back-port them, the ESPHome API is less stable. If something in the APIs needs to be changed in order for something else to work, I will do so.\n\n*See also: [Custom Sensor Component](https://esphome.io/components/sensor/custom.html#custom-sensor-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dallas" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: The address of the sensor. Use either this option or index.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "index": {
                      "type": "number",
                      "markdownDescription": "**int**: The index of the sensor starting with 0. So the first sensor will for example have index 0. [It\u2019s recommended to use address instead](https://esphome.io/components/sensor/dallas.html#dallas-getting-ids).\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    },
                    "resolution": {
                      "type": "number",
                      "default": 12,
                      "markdownDescription": "**int**: An optional resolution from 8 to 12. Higher means more accurate. Defaults to the maximum for most Dallas temperature sensors: 12.\n\n\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#id1)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `dallas` sensor allows you to use DS18B20 and similar sensors. First, you need to define a [dallas sensor component](https://esphome.io/components/sensor/dallas.html#dallas-component). The dallas sensor component (or \u201chub\u201d) is an internal model that defines which pins the DS18B20 sensors are connected to. This is because with these sensors you can actually connect multiple sensors to a single pin and use them all at once.\n\n*See also: [dallas Sensor](https://esphome.io/components/sensor/dallas.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "daly_bms" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "current": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "max_cell_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "max_cell_voltage_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "min_cell_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "min_cell_voltage_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "max_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "max_temperature_probe_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "min_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "min_temperature_probe_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "remaining_capacity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "cells_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "temperature_1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "temperature_2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `daly_bms` sensor platform allows you to use a Daly Smart BMS ([more info](https://dalyelec.en.made-in-china.com/)) with ESPHome.\n\n*See also: [Daly BMS](https://esphome.io/components/sensor/daly_bms.html#daly-bms)*"
          },
          {
            "if": { "properties": { "platform": { "const": "debug" } } },
            "then": {
              "properties": {
                "free": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "block": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "fragmentation": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "loop_time": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" }
              },
              "type": ["object", "null"]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "dht" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the DHT bus is connected.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": [
                        "AUTO_DETECT",
                        "DHT11",
                        "DHT22",
                        "AM2302",
                        "RHT03",
                        "SI7021",
                        "DHT22_TYPE2"
                      ],
                      "markdownDescription": "**int**: Manually specify the DHT model, can be one of `AUTO_DETECT`, `DHT11`, `DHT22`, `DHT22_TYPE2`, `AM2302`, `RHT03`, `SI7021` and helps with some connection issues. Defaults to `AUTO_DETECT`.  Auto detection doesn\u2019t work for the SI7021 chip.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The DHT Temperature+Humidity sensor allows you to use your DHT11 ([datasheet](https://akizukidenshi.com/download/ds/aosong/DHT11.pdf), [Adafruit](https://www.adafruit.com/product/386)), DHT22 ([datasheet](https://www.sparkfun.com/datasheets/Sensors/Temperature/DHT22.pdf), [Adafruit](https://www.adafruit.com/product/385)), AM2302 ([datasheet](https://cdn-shop.adafruit.com/datasheets/Digital+humidity+and+temperature+sensor+AM2302.pdf), [Adafruit](https://www.adafruit.com/product/393)), RHT03 ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf), [SparkFun](https://cdn.sparkfun.com/datasheets/Sensors/Weather/RHT03.pdf)) and SI7021 (one wire Sonoff version) ([datasheet](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf), [SparkFun](https://cdn.sparkfun.com/assets/b/1/b/8/5/Si7021-A20.pdf)) sensors with ESPHome.\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#dht-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dht12" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "92" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `dht12` Temperature+Humidity sensor allows you to use your DHT12 ([datasheet](http://www.robototehnika.ru/file/DHT12.pdf), [electrodragon](http://www.electrodragon.com/product/dht12/)) I\u00b2C-based sensor with ESPHome. This sensor is also called AM2320 by some sellers.\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#dht12-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "dsmr" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "energy_delivered_lux": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Consumed Luxembourg\n  * **name** (**Required**, string): The name for the energy_delivered_lux sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "energy_delivered_tariff1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Consumed Tariff 1.\n  * **name** (**Required**, string): The name for the energy_delivered_tariff1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "energy_delivered_tariff2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Consumed Tariff 2.\n  * **name** (**Required**, string): The name for the energy_delivered_tariff2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "energy_returned_lux": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Produced Luxembourg\n  * **name** (**Required**, string): The name for the energy_returned_lux sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "energy_returned_tariff1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Produced Tariff 1.\n  * **name** (**Required**, string): The name for the energy_returned_tariff1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "energy_returned_tariff2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Energy Produced Tariff 2.\n  * **name** (**Required**, string): The name for the energy_returned_tariff2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "total_imported_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "total_exported_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "power_delivered": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Consumed.\n  * **name** (**Required**, string): The name for the power_delivered sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_returned": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Produced.\n  * **name** (**Required**, string): The name for the power_returned sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "reactive_power_delivered": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_returned": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_threshold": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_switch_position": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_failures": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Electricity Failures.\n  * **name** (**Required**, string): The name for the electricity_failures sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "electricity_long_failures": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Long Electricity Failures.\n  * **name** (**Required**, string): The name for the electricity_long_failures sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "electricity_sags_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_sags_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_sags_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_swells_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_swells_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "electricity_swells_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "current_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Current Phase 1.\n  * **name** (**Required**, string): The name for the current_l1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "current_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Current Phase 2.\n  * **name** (**Required**, string): The name for the current_l2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "current_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Current Phase 3.\n  * **name** (**Required**, string): The name for the current_l3 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_delivered_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Consumed Phase 1.\n  * **name** (**Required**, string): The name for the power_delivered_l1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_delivered_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Consumed Phase 2.\n  * **name** (**Required**, string): The name for the power_delivered_l2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_delivered_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Consumed Phase 3.\n  * **name** (**Required**, string): The name for the power_delivered_l3 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_returned_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Produced Phase 1.\n  * **name** (**Required**, string): The name for the power_returned_l1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_returned_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Produced Phase 2.\n  * **name** (**Required**, string): The name for the power_returned_l2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "power_returned_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Power Produced Phase 3.\n  * **name** (**Required**, string): The name for the power_returned_l3 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "reactive_power_delivered_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_delivered_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_delivered_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_returned_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_returned_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "reactive_power_returned_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "voltage_l1": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Voltage Phase 1.\n  * **name** (**Required**, string): The name for the voltage_l1 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "voltage_l2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Voltage Phase 2.\n  * **name** (**Required**, string): The name for the voltage_l2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "voltage_l3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Voltage Phase 3.\n  * **name** (**Required**, string): The name for the voltage_l3 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "gas_delivered": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Gas Consumed.\n  * **name** (**Required**, string): The name for the gas_delivered sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    },
                    "gas_delivered_be": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Gas Consumed Belgium.\n  * **name** (**Required**, string): The name for the gas_delivered_be sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Not all sensors are available on all devices.\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "duty_cycle" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to observe for the duty cycle.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The duty cycle sensor allows you to measure for what percentage of time a signal on a GPIO pin is HIGH or LOW.\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#duty-cycle-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "esp32_hall" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `esp32_hall` sensor platform allows you to use the integrated [hall effect sensor](https://en.wikipedia.org/wiki/Hall_effect_sensor) of the ESP32 chip to measure the magnitude and direction of magnetic field around the chip (with quite poor accuracy).\n\n*See also: [ESP32 Hall Sensor](https://esphome.io/components/sensor/esp32_hall.html#esp32-hall-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ezo" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: Specify the I\u00b2C address of the sensor.\n\n\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["address"]
                }
              ]
            },
            "markdownDescription": "The `ezo` sensor platform allows you to use your EZO sensor circuits with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#ezo-sensor-circuits)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "fingerprint_grow" } }
            },
            "then": {
              "properties": {
                "fingerprint_count": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "status": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "capacity": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                "security_level": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "last_finger_id": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                },
                "last_confidence": {
                  "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "**fingerprint_count**: The number of enrolled fingerprints stored on the reader.\n\n*See also: [fingerprint_grow Sensor](https://esphome.io/components/fingerprint_grow.html#sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "growatt_solar" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "phase_a": {
                      "$ref": "#/definitions/sensor-growatt_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase A/1.\n  * **current** (*Optional*): Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage** (*Optional*): Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **active_power** (*Optional*): Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "phase_b": {
                      "$ref": "#/definitions/sensor-growatt_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase B/2 on applicable inverters.\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "phase_c": {
                      "$ref": "#/definitions/sensor-growatt_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase C/3 on applicable inverters.\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "pv1": {
                      "$ref": "#/definitions/sensor-growatt_solar-pv1",
                      "markdownDescription": "The group of exposed sensors for Photo Voltaic 1.\n  * **current** (*Optional*): Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage** (*Optional*): Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **active_power** (*Optional*): Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "pv2": {
                      "$ref": "#/definitions/sensor-growatt_solar-pv1",
                      "markdownDescription": "The group of exposed sensors for Photo Voltaic 2.\n  * All options from **pv1**\n  \n  \n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "inverter_status": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Status code of the inverter (0: waiting, 1: normal, 3:fault)\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value for the Grid in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "pv_active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of PVs in total in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "energy_production_day": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export active energy value for same day of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "total_energy_production": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total exported energy value of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "inverter_module_temp": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the inverter module temperature value of the sensor in degree celsius. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "1" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `Growatt Inverter` sensor platform allows you to use growatt inverter data reading on modbus with ESPHome.\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#growatt-solar)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "havells_solar" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "phase_a": {
                      "$ref": "#/definitions/sensor-havells_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase A/1.\n  * **current** (*Optional*): Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage** (*Optional*): Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "phase_b": {
                      "$ref": "#/definitions/sensor-havells_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase B/2 on applicable inverters.\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "phase_c": {
                      "$ref": "#/definitions/sensor-havells_solar-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase C/3 on applicable inverters.\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "pv1": {
                      "$ref": "#/definitions/sensor-havells_solar-pv1",
                      "markdownDescription": "The group of exposed sensors for Photo Voltaic 1.\n  * **current** (*Optional*): Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage** (*Optional*): Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **active_power** (*Optional*): Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage_sampled_by_secondary_cpu** (*Optional*): Use the photo voltiac\u2019s voltage sampled by slave CPU value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **insulation_of_p_to_ground** (*Optional*): Use the insulation of photo voltiac\u2019s +ve terminal to ground value of the sensor in kilo ohms. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "pv2": {
                      "$ref": "#/definitions/sensor-havells_solar-pv1",
                      "markdownDescription": "The group of exposed sensors for Photo Voltaic 2.\n  * All options from **pv1**\n  \n  \n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "reactive_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the reactive power value of the sensor in VAR. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "energy_production_day": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export active energy value for same day of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "total_energy_production": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total exported energy value of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "total_generation_time": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total generation time value of the sensor in hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "today_generation_time": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the day generation time value for same day of the sensor in minutes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "inverter_module_temp": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the inverter module temperature value of the sensor in degree celsius. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "inverter_inner_temp": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the inverter inner temperature value of the sensor in degree celsius. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "inverter_bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the inverter bus voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "insulation_of_pv_n_to_ground": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the insulation  of  photo  voltiacs\u2019s -ve terminal to ground value of the sensor in kilo ohms. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "gfci_value": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the GFCI value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "dci_of_r": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the DCI of R value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "dci_of_s": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the DCI of S value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "dci_of_t": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the DCI of T value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `Havells Inverter` sensor platform allows you to use Havells inverter data reading on modbus ([website](https://www.havells.com/en/consumer/solar/solar-on-grid-inverter-and-solutions/solar-on-grid-inverter.html)) with ESPHome.\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#havells-solar)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hdc1080" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "64" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The HDC1080 Temperature+Humidity sensor allows you to use your HDC1080 ([datasheet](http://www.ti.com/lit/ds/symlink/hdc1080.pdf), [Adafruit](https://www.adafruit.com/product/2635)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#hdc1080-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hlw8012" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "sel_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin SEL is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "cf_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin CF is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "cf1_pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin CF1 is connected to.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in V (RMS). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total energy value of the sensor in Wh. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "current_resistor": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.001,
                      "markdownDescription": "**float**: The value of the shunt resistor for current measurement. Defaults to the Sonoff POW\u2019s value `0.001 ohm`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "voltage_divider": {
                      "type": "number",
                      "default": 2351,
                      "markdownDescription": "**float**: The value of the voltage divider on the board as `(R_upstream + R_downstream) / R_downstream`. Defaults to the Sonoff POW\u2019s value `2351`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "model": {
                      "enum": ["HLW8012", "CSE7759", "BL0937"],
                      "markdownDescription": "**string**: The sensor model on the board, to set internal constant factors to convert pulses to measurements. Possible values are `HLW8012`, `CSE7759`, `BL0937`. Defaults to `HLW8012`. CSE7759 uses same constants and it also works with default. Must be set for BL0937 to be able to calibrate all three measurements at the same time.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "change_mode_every": {
                      "type": "number",
                      "default": 8,
                      "markdownDescription": "**int**: After how many updates to cycle between the current/voltage measurement mode. Note that the first value after switching is discarded because it is often inaccurate. Defaults to `8`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "initial_mode": {
                      "enum": ["current", "voltage"],
                      "markdownDescription": "**string**: The initial measurement mode. Defaults to `VOLTAGE`. Possible initial measurement modes are `VOLTAGE` or `CURRENT`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["sel_pin", "cf_pin", "cf1_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `hlw8012` sensor platform allows you to use your HLW8012 voltage/current and power sensors ([datasheet](https://github.com/xoseperez/hlw8012/blob/master/docs/HLW8012.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POWs. CSE7759 and BL0937 are similar to HLW8012 and work with this integration. Beware that CSE7759B is different and should be used with the [CSE7766](https://esphome.io/components/sensor/cse7766.html) integration.\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#hlw8012-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hm3301" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "aqi": {
                      "$ref": "#/definitions/sensor-hm3301-aqi",
                      "markdownDescription": "AQI sensor. Requires the `pm_2_5` and `pm_10_0` sensors defined. See below.\n  * **calculation_type** (**Required**): One of: `AQI` or `CAQI`.\n  \n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "64" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `HM3301` sensor platform allows you to use your HM3301 particulate matter sensor ([more info](http://wiki.seeedstudio.com/Grove-Laser_PM2.5_Sensor-HM3301)) sensors with ESPHome.\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#the-grove-laser-pm2-5-sensor-hm3301)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hmc5883l" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x1E`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "oversampling": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "1x",
                      "markdownDescription": "Number of readings to average over for each sample. One of `1x`, `2x`, `4x`, `8x`. Defaults to `1x`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "range": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "130\u00b5T",
                      "markdownDescription": "Select a range / gain preset. This does not affect the scale of the values published but allows one to avoid overflows at the cost of reading resolution. Supported values are 88\u00b5T, 130\u00b5T, 190\u00b5T, 250\u00b5T, 400\u00b5T, 470\u00b5T, 560\u00b5T, 810\u00b5T. Default range is \u00b1130\u00b5T.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "heading": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `hmc5883l` allows you to use your HMC5883L triple-axis magnetometers ([datasheet](https://cdn-shop.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf), [Adafruit](https://www.adafruit.com/product/1746)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l-magnetometer)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": {
                      "type": "string",
                      "markdownDescription": "**string**: The name of the state attribute to import from the specified entity. The entity state is used when this option is omitted. Requires Home Assistant 2021.6 or newer.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["entity_id"]
                }
              ]
            },
            "markdownDescription": "The `homeassistant` sensor platform allows you to create sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#home-assistant-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "hrxl_maxsonar_wr" } }
            },
            "then": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
            "markdownDescription": "This sensor allows you to use HRXL MaxSonar WR series ultrasonic sensors by MaxBotix ([datasheet](https://www.maxbotix.com/documents/HRXL-MaxSonar-WR_Datasheet.pdf)) with ESPHome to measure distances. Depending on the model, these sensors can measure in a range between 30 centimeters and 10 meters.\n\n*See also: [HRXL MaxSonar WR Series](https://esphome.io/components/sensor/hrxl_maxsonar_wr.html#hrxl-maxsonar-wr-series)*"
          },
          {
            "if": { "properties": { "platform": { "const": "htu21d" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "64" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["temperature", "humidity"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The HTU21D Temperature+Humidity sensor allows you to use your HTU21D ([Adafruit](https://www.adafruit.com/product/1899)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HTU21D Temperature+Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#htu21d-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "hx711" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "dout_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The DOUT (or DAT) pin.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "clk_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The CLK pin.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "gain": { "enum": [128, 32, 64] },
                    "name": {
                      "markdownDescription": "**string**: The name for the load cell sensor.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["dout_pin", "clk_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `hx711` sensor platform allows you to use your HX711 load cell amplifier ([datasheet](https://www.mouser.com/ds/2/813/hx711_english-1022875.pdf), [SparkFun](https://www.sparkfun.com/products/13879)) with ESPHome\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#hx711-load-cell-amplifier)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina219" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "shunt_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "shunt_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.1,
                      "markdownDescription": "**float**: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "max_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 32.0,
                      "markdownDescription": "**float**: The maximum bus voltage you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `32V` (the max).\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "max_current": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 3.2,
                      "markdownDescription": "**float**: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "64",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ina219` sensor platform allows you to use your INA219 High Side DC Current Sensor ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-ina219-current-sensor-breakout.pdf), [Adafruit](https://www.adafruit.com/product/904)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#ina219-dc-current-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina226" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "shunt_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the shunt voltage (voltage across the shunt resistor) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "shunt_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0.1,
                      "markdownDescription": "**float**: The value of the shunt resistor on the board for current calculation. Defaults to `0.1 ohm`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "max_current": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 3.2,
                      "markdownDescription": "**float**: The maximum current you are expecting. ESPHome will use this to configure the sensor optimally. Defaults to `3.2A`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "64",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ina226` sensor platform allows you to use your INA226 DC Current and Power Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina226.pdf), [eBay](https://www.ebay.com/sch/i.html?_nkw=INA226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#ina226-dc-current-and-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina260" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the bus voltage (voltage of the high side contact) value of the sensor in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "64",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ina260` sensor platform allows you to use your INA260 DC Current and Power Sensor ([datasheet](https://www.ti.com/lit/ds/symlink/ina260.pdf), [Adafruit](https://www.adafruit.com/product/4226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#ina260-dc-current-and-power-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ina3221" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "channel_1": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 1st channel.\n  * **shunt_resistance** (*Optional*, float): The value of the shunt resistor on this channel for current calculation. Defaults to `0.1 ohm`.\n  \n  * **current** (*Optional*): Use the current value on this channel in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power** (*Optional*): Use the power value on this channel in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **bus_voltage** (*Optional*): Use the bus voltage (voltage of the high side contact) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **shunt_voltage** (*Optional*): Use the shunt voltage (voltage across the shunt resistor) value on this channel in V. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "channel_2": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 2nd channel. Same options as 1st channel.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "channel_3": {
                      "$ref": "#/definitions/sensor-ina3221-channel_1",
                      "markdownDescription": "The configuration options for the 3rd channel. Same options as 1st channel.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "64",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x40`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ina3221` sensor platform allows you to use your INA3221 3-Channel DC Current Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina3221.pdf), [switchdoc](http://www.switchdoc.com/ina3221-breakout-board/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#ina3221-3-channel-dc-current-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "inkbird_ibsth1_mini" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address of the Inkbird IBS-TH1 device.\n\n\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "external_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the external temperature sensor.\n  * **name** (**Required**, string): The name for the external temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the battery level sensor\n  * **name** (**Required**, string): The name for the battery level sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `inkbird_ibsth1_mini` sensor platform lets you track the output of Inkbird IBS-TH1 and IBS-TH1 Mini Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, external temperature (non mini only), humidity and the battery level of the IBS-TH1 device every time the sensor sends out a BLE broadcast. Note that contrary to other implementations, ESPHome can track as many IBS-TH1 devices at once as you want.\n\n*See also: [Inkbird IBS-TH1 and IBS-TH1 Mini BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#inkbird-ibs-th1-and-ibs-th1-mini-ble-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "integration" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "time_unit": { "enum": ["ms", "s", "min", "h", "d"] },
                    "integration_method": {
                      "enum": ["trapezoid", "left", "right"]
                    },
                    "restore": { "type": "boolean", "default": false },
                    "min_save_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0s"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["time_unit"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `integration` sensor is a helper sensor that can integrate values from other sensors over time. This can for example be useful to integrate the values of a water flow sensor (in m^3/s) over time (result is in m^3).\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#integration-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "kalman_combinator" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "process_std_dev": {
                      "type": "number",
                      "markdownDescription": "**float**: The standard deviation of the measurement\u2019s change per second (e.g. `1/3600 = 0.000277` if the temperature usually changes at most by one Kelvin per hour). A low value here will place high importance on the current state and be slow to respond to changes in the measured samples. A high value will update faster, but also be more noisy.\n\n\n\n*See also: [Kalman filter-based sensor fusion](https://esphome.io/components/sensor/kalman_combinator.html#configuration-variables)*"
                    },
                    "sources": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/sensor-kalman_combinator-sources"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sensor-kalman_combinator-sources"
                          }
                        }
                      ],
                      "markdownDescription": "**list**: A list of sensors to use as source. Each source must have either **error** or **error_function** set. These work like the **process_std_dev** parameter, with low values marking accurate data.\n  * **sensor** (**Required**, [ID](https://esphome.io/guides/configuration-types.html#config-id) of a [Sensor Component](https://esphome.io/components/sensor/index.html)): The sensor that is used as sample source\n  \n  * **error** (**Required**, float, [templatable](https://esphome.io/guides/automations.html#config-templatable)): The standard deviation of the sensor\u2019s measurements. If implemented as a template, the measurement is in parameter `x`.\n  \n  \n\n\n\n*See also: [Kalman filter-based sensor fusion](https://esphome.io/components/sensor/kalman_combinator.html#configuration-variables)*"
                    },
                    "std_dev": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "**[Sensor](https://esphome.io/components/sensor/index.html#config-sensor)**: A sensor that publishes the current standard deviation of the state with each update.\n\n\n\n*See also: [Kalman filter-based sensor fusion](https://esphome.io/components/sensor/kalman_combinator.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["process_std_dev", "sources"]
                }
              ]
            },
            "markdownDescription": "The `kalman_combinator` sensor platform allows you to filter one or several sensors into one with a reduced error. If using a single sensor as data source, it acts like a [exponential_moving_average](https://esphome.io/components/sensor/index.html#sensor-filter-exponential-moving-average) filter. With multiple sensors, it combines their values based on their respective standard deviation.\n\n*See also: [Kalman filter-based sensor fusion](https://esphome.io/components/sensor/kalman_combinator.html#kalman-filter-based-sensor-fusion)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ltr390" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "light": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Lux of ambient light (lx). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "ambient_light": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Sensor counts for the Ambient light sensor (#). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "uv_index": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "UV index (UVI). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "uv": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Sensor counts for the UV sensor (#). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": ["X1", "X3", "X6", "X9", "X18"],
                      "markdownDescription": "**string**: Adjusts the sensitivity of the sensor. A larger value means higher sensitivity. See table below for details. Default is `\"X3\"`.\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "resolution": {
                      "enum": [20, 19, 18, 17, 16, 13],
                      "markdownDescription": "**int**: ADC resolution. Higher resolutions require longer sensor integration times. See table below for details. Default is `18`.\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "window_correction_factor": {
                      "type": "number",
                      "default": 1.0,
                      "markdownDescription": "**float**: Window correction factor. Use larger values when using under tinted windows. Default is `1.0`, must be `>= 1.0`.\n\n\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "83" }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ltr390` sensor platform  allows you to use your LTR390 UV and ambient light sensor ([datasheet](https://optoelectronics.liteon.com/upload/download/DS86-2015-0004/LTR-390UV_Final_%20DS_V1%201.pdf), [Adafruit](https://www.adafruit.com/product/4831)) with ESPHome.\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#ltr390-uv-and-ambient-light-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31855" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "reference_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Access the internal temperature sensor of the MAX31855. Requires a **name** and/or **id**.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max31855` temperature sensor allows you to use your MAX31855 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31855.pdf)) with ESPHome\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#max31855-k-type-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31856" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "mains_filter": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `MAX31856` temperature sensor allows you to use your MAX31856 Thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31856.pdf)) with ESPHome\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#max31856-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max31865" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "reference_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Reference resistor on the PCB. Adafruit\u2019s PT100 (#3328) uses 430 \u03a9, their PT1000 (#3648) uses 4300 \u03a9.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "rtd_nominal_resistance": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Nominal resistance of the RTD at 0\u00b0C. PT100 is 100 \u03a9, PT1000 is 1000 \u03a9.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "mains_filter": {
                      "enum": ["50HZ", "60HZ"],
                      "markdownDescription": "**string**: The mains power frequency to reject (`50 Hz` or `60 Hz`). Defaults to `60 Hz`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "rtd_wires": {
                      "type": "number",
                      "default": 4,
                      "markdownDescription": "**int**: The number of RTD wires. Be sure to solder board jumpers to match! Defaults to `4`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "cs_pin": {
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The Chip Select pin of the SPI interface.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "spi_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [SPI Component](https://esphome.io/components/spi.html#spi) if you want to use multiple SPI buses.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": [
                    "reference_resistance",
                    "rtd_nominal_resistance"
                  ]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max31865` temperature sensor allows you to use your max31865 RTD temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf)) with ESPHome\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#max31865-platinum-rtd-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "max6675" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                { "$ref": "#/definitions/spi_bus" }
              ]
            },
            "markdownDescription": "The `max6675` temperature sensor allows you to use your MAX6675 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf), [SainSmart](https://www.sainsmart.com/products/max6675-module-k-type-thermocouple-thermocouple-sensor-temperature-0-1024-for-arduino)) with ESPHome\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#max6675-k-type-thermocouple-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp3008" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "number": {
                      "type": "number",
                      "markdownDescription": "**int**: The pin number of the MCP3008\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "reference_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "3.3V",
                      "markdownDescription": "**float**: The reference voltage. Defaults to `3.3V`.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The id of the parent MCP3008 component.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `1s`.\n\n\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["number"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `mcp3008` sensor allows you to use your MCP3008 10-Bit A/D Converter sensors with ESPHome. First, setup a [MCP3008 Hub](https://esphome.io/components/sensor/mcp3008.html#mcp3008-component) for your MCP3008 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp3204" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": { "number": { "type": "number" } },
                  "type": ["object", "null"],
                  "required_": ["number"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `mcp3204` sensor allows you to use your MCP3204 12-Bit A/D Converter sensors with ESPHome. First, setup a [MCP3204 Hub](https://esphome.io/components/sensor/mcp3204.html#mcp3204-component) for your MCP3204 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [mcp3204 Sensor](https://esphome.io/components/sensor/mcp3204.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mcp9808" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "24",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x18`.\n\n\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The MCP9808 Temperature sensor allows you to use your MCP9808 ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf), [Adafruit](https://www.adafruit.com/product/1782)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#mcp9808-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mhz19" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor. Please note that this is not officially documented in the datasheet and seems to be quite inaccurate.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "automatic_baseline_calibration": {
                      "type": "boolean",
                      "markdownDescription": "**boolean**: MH-Z19 has automatic calibration procedure. The automatic calibration cycle is every 24 hours after powered on. Set this value to `false` to disable ABC on boot (it\u2019s better if you use sensor indoor). Set this value to `true` to enable ABC on boot. Doesn\u2019t send calibration command if not set (default sensor logic will be used).\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["co2"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `mhz19` sensor platform allows you to use MH-Z19 CO_2 and temperature sensors ([refspace](https://revspace.nl/MHZ19)) with ESPHome. The CO_2 measurement also works with the MH-Z16 sensor.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mh-z19-co-2-and-temperature-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": { "type": "number" },
                    "custom_command": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                          }
                        }
                      ]
                    },
                    "offset": { "type": "number" },
                    "byte_offset": { "type": "number" },
                    "bitmask": { "type": "string", "default": "4294967295" },
                    "skip_updates": { "type": "number", "default": 0 },
                    "force_new_range": { "type": "boolean", "default": false },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "response_size": { "type": "number", "default": 0 },
                    "register_type": {
                      "enum": [
                        "custom",
                        "coil",
                        "holding",
                        "discrete_input",
                        "read"
                      ]
                    },
                    "value_type": {
                      "enum": [
                        "RAW",
                        "U_WORD",
                        "S_WORD",
                        "U_DWORD",
                        "U_DWORD_R",
                        "S_DWORD",
                        "S_DWORD_R",
                        "U_QWORD",
                        "U_QWORDU_R",
                        "S_QWORD",
                        "U_QWORD_R",
                        "FP32",
                        "FP32_R"
                      ]
                    },
                    "register_count": { "type": "number", "default": 0 },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Sensor](https://esphome.io/components/sensor/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Sensor](https://esphome.io/components/sensor/modbus_controller.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` sensor platform creates a sensor from a modbus_controller component and requires [Modbus Controller](https://esphome.io/components/modbus_controller.html) to be configured.\n\n*See also: [Modbus Sensor](https://esphome.io/components/sensor/modbus_controller.html#modbus-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "mpu6050" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "accel_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the X-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "accel_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Y-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "accel_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Z-Axis of the Accelerometer. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the X-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Y-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "gyro_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the Z-Axis of the Gyroscope. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the internal temperature of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "104",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x68`.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `mpu6050` sensor platform allows you to use your MPU6050 Accelerometer/Gyroscope ([datasheet](https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf), [SparkFun](https://www.sparkfun.com/products/11028)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#mpu6050-accelerometer-gyroscope-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "mqtt_subscribe" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "topic": {
                      "type": "string",
                      "markdownDescription": "**string**: The MQTT topic to listen for numeric messages.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "qos": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: The MQTT QoS to subscribe with. Defaults to `0`.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["topic"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `mqtt_subscribe` sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and parse each message into a floating point number.\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#mqtt-subscribe-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ms5611" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature. sensor\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "119",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x77`.\n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["temperature", "pressure"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `ms5611` sensor platform allows you to use your MS5611 atmospheric pressure sensors ([hobbytronics](http://www.hobbytronics.co.uk/ms5611-altitude-sensor)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#ms5611-atmospheric-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "precision": { "type": "number", "default": 0 },
                    "wave_channel_id": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "component_id": { "type": "number" },
                    "wave_max_length": { "type": "number", "default": 255 },
                    "wave_max_value": { "type": "number", "default": 100 },
                    "waveform_send_last_value": {
                      "type": "boolean",
                      "default": true
                    },
                    "background_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "foreground_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "visible": { "type": "boolean", "default": true },
                    "component_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "variable_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "font_id": { "type": "number" },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Nextion Sensor Component](https://esphome.io/components/sensor/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `nextion` sensor platform supports integers or floats (Xfloat). It can be a component, a variable or a waveform in the Nextion display. It is best to set the component\u2019s vscope to global in the Nextion Editor. This way the component will be available if the page is shown or not.\n\n*See also: [Nextion Sensor Component](https://esphome.io/components/sensor/nextion.html#nextion-sensor-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ntc" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "calibration": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["calibration"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ntc` platform is a helper sensor that allows you to convert resistance readings from a NTC thermistor to temperature readings.\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#ntc-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pid" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "enum": [
                        "RESULT",
                        "ERROR",
                        "PROPORTIONAL",
                        "INTEGRAL",
                        "DERIVATIVE",
                        "HEAT",
                        "COOL",
                        "KP",
                        "KI",
                        "KD"
                      ]
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["type"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pipsolar" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "grid_rating_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "grid_rating_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_rating_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_rating_frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_rating_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_rating_apparent_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_rating_active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_rating_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_recharge_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_under_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_bulk_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_float_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_type": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "current_max_ac_charging_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "current_max_charging_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "input_voltage_range": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "output_source_priority": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "charger_source_priority": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "parallel_max_num": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "machine_type": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "topology": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "output_mode": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_redischarge_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pv_ok_condition_for_parallel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pv_power_balance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "grid_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "grid_frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_apparent_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "ac_output_active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "output_load_percent": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "bus_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_charging_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_capacity_percent": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "inverter_heat_sink_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pv_input_current_for_battery": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pv_input_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage_scc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_discharge_current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage_offset_for_fans_on": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "eeprom_version": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "pv_charging_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pm1006" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PM1006 Particulate Matter Sensor](https://esphome.io/components/sensor/pm1006.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [PM1006 Particulate Matter Sensor](https://esphome.io/components/sensor/pm1006.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If you need to actively request measurements to the sensor, set this to some sensible interval. The IKEA VINDRIKTNING does measurements every 20 seconds. Defaults to never.\n\n\n\n*See also: [PM1006 Particulate Matter Sensor](https://esphome.io/components/sensor/pm1006.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `pm1006` sensor platform allows you to use Cubic PM1006 particulate matter sensors ([datasheet](http://www.jdscompany.co.kr/download.asp?gubun=07&filename=PM1006_LED_PARTICLE_SENSOR_MODULE_SPECIFICATIONS.pdf)) with ESPHome.\n\n*See also: [PM1006 Particulate Matter Sensor](https://esphome.io/components/sensor/pm1006.html#pm1006-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pmsa003i" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "standard_units": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: `True` to use standard units or `False` to use  environmental units. Defaults to `True`.\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Mass of particles with a diameter of 1 micrometres or less (\u03bcg/m^3). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Mass of particles with a diameter of 2.5 micrometres or less (\u03bcg/m^3). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Mass of particles with a diameter of 10 micrometres or less (\u03bcg/m^3). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_0_3": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 0.3 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_0_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 0.5 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 1 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 2.5 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_5_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 5 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "pmc_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Count of particles with diameter > 10 um in 0.1 L of air (#/0.1L). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "18",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x12`.\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `pmsa003i` sensor platform  allows you to use your Plantower PMSA003I particulate matter sensor ([datasheet](https://cdn-shop.adafruit.com/product-files/4632/4505_PMSA003I_series_data_manual_English_V2.6.pdf), [Adafruit](https://www.adafruit.com/product/4632)) with ESPHome.\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#pmsa003i-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pmsx003" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "type": {
                      "enum": ["PMSX003", "PMS5003T", "PMS5003ST", "PMS5003S"]
                    },
                    "pm_1_0_std": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter at standard particle All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_2_5_std": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter at standard particle All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_10_0_std": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter at standard particle All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 1.0\u00b5m in \u00b5g per cubic meter under atmospheric environment All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter under atmospheric environment All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter under atmospheric environment All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_0_3um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 0.3um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_0_5um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 0.5um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_1_0um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 1.0um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_2_5um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 2.5um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_5_0um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 5.0um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "pm_10_0um": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the number of particles with diameter beyond 10.0um in 0.1L of air All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the temperature value in \u00b0C for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the humidity value in % for the `PMS5003T` and `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the formaldehyde (HCHO) concentration in \u00b5g per cubic meter for the `PMS5003S` and `PMS5003ST`. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["type"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `pmsx003` sensor platform allows you to use your PMS5003, PMS7003, \u2026 particulate matter ([datasheet](http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms5003-manual_v2-3.pdf)) sensors with ESPHome.\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#pmsx003-particulate-matter-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "pulse_counter" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to count pulses on.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "count_mode": {
                      "properties": {
                        "rising_edge": {
                          "enum": ["DISABLE", "INCREMENT", "DECREMENT"],
                          "markdownDescription": "What to do when a rising edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `INCREMENT`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                        },
                        "falling_edge": {
                          "enum": ["DISABLE", "INCREMENT", "DECREMENT"],
                          "markdownDescription": "What to do when a falling edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `DISABLE`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                        }
                      },
                      "type": ["object", "null"],
                      "required_": ["rising_edge", "falling_edge"],
                      "default": {
                        "rising_edge": "INCREMENT",
                        "falling_edge": "DISABLE"
                      },
                      "markdownDescription": "Configure how the counter should behave on a detected rising edge/falling edge.\n  * **rising_edge** (*Optional*): What to do when a rising edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `INCREMENT`.\n  \n  * **falling_edge** (*Optional*): What to do when a falling edge is detected. One of `DISABLE`, `INCREMENT` and `DECREMENT`. Defaults to `DISABLE`.\n  \n  \n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "internal_filter": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "13us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If a pulse shorter than this time is detected, it\u2019s discarded and no pulse is counted. Defaults to `13us`. On the ESP32, this value can not be higher than `13us`, for the ESP8266 you can use larger intervals too. If you enable this, set up the `count_mode` to increase on the falling edge, not leading edge. For S0 pulse meters that are used to meter power consumption 50-100 ms is a reasonable value.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "total": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Report the total number of pulses.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The pulse counter sensor allows you to count the number of pulses and the frequency of a signal on any pin.\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#pulse-counter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pulse_meter" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to count pulses on.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "internal_filter": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "13us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If a pulse shorter than this time is detected, it\u2019s discarded and no pulse is counted. Defaults to `13us`. For S0 pulse meters that are used to meter power consumption 50-100 ms is a reasonable value.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "5min",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: If we don\u2019t see a pulse for this length of time, we assume 0 pulses/sec. Defaults to `5 min`.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "total": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: An additional sensor that outputs the total number of pulses counted.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                }
              ]
            },
            "markdownDescription": "The pulse meter sensor allows you to count the number and frequency of pulses on any pin. It is intended to be a drop-in replacement for [integration sensor](https://esphome.io/components/sensor/pulse_counter.html), but offering better resolution. It measures the time between rising edges on a pin, for each pulse it outputs the frequency in pulses/min.\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#pulse-meter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pulse_width" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin to observe for the pulse width.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `pulse_width` sensor allows you to measure how long a given digital signal is HIGH. For example this can be used to measure PWM signals to transmit some value over a simple protocol.\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#pulse-width-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "pvvx_mithermometer" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "pzem004t" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "energy": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#peacefair-pzem-004t-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pzemac" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) energy value of the sensor in watt*hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "power_factor": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power factor value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#peacefair-pzem-004t-v3-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pzemdc" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#peacefair-pzem-00x-dc-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "qmc5883l" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "markdownDescription": "**int**: Manually specify the  I\u00b2c address of the sensor. Defaults to `0x1E`.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "range": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "200\u00b5T",
                      "markdownDescription": "The range parameter for the sensor.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "oversampling": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "512x",
                      "markdownDescription": "The oversampling parameter for the sensor.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the X-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Y-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "field_strength_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The field strength in microtesla along the Z-Axis. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "heading": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The heading of the sensor in degrees. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `qmc5883l` allows you to use your QMC5883L triple-axis magnetometers ([datasheet](http://wiki.sunfounder.cc/images/7/72/QMC5883L-Datasheet-1.0.pdf)) with ESPHome. This sensor is very simular to the [HMC5883L](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l) sensor and is oftern found as a knock off replacement. The QMC5883L sensor performs on par to the HMC5883L sensor, though the configuration differs. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#qmc5883l-magnetometer)*"
          },
          {
            "if": { "properties": { "platform": { "const": "resistance" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "configuration": { "enum": ["DOWNSTREAM", "UPSTREAM"] },
                    "resistor": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "reference_voltage": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "3.3V"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["configuration", "resistor"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `resistance` platform is a helper sensor that allows you to convert readings from a voltage sensor (such as the [ADC Sensor](https://esphome.io/components/sensor/adc.html)) into resistance readings in \u2126 (ohm).\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#resistance-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "rotary_encoder" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "pin_a": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The first pin for determining the step value. Must not be a pin from an external I/O expander.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "pin_b": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The second pin for determining the step value. Must not be a pin from an external I/O expander.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "pin_reset": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: An optional pin that resets the step value. This is useful with rotary encoders that have have a third pin. Defaults to no reset pin.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "resolution": {
                      "enum": [1, 2, 4],
                      "markdownDescription": "**string**: The resolution of the sensor, this controls how many pulses are generated by one step:\n  * 1 (default)\n  \n  * 2\n  \n  * 4\n  \n  \n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "min_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The minimum value this rotary encoder will go to, turning the knob further will not decrease the number. Defaults to no minimum.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "max_value": {
                      "type": "number",
                      "markdownDescription": "**int**: The maximum value this rotary encoder will go to, turning the knob further will not increase the number. Defaults to no maximum.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "publish_initial_value": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Controls whether the value is published upon start of ESPHome. By default the value is only published when it changes, causing an \u201cunknown\u201d value at first. If you set this option to true, the value is published once after boot and when it changes. Defaults to `false`.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": ["RESTORE_DEFAULT_ZERO", "ALWAYS_ZERO"],
                      "markdownDescription": "Control how the Rotary Encoder attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_ZERO` (Default) - Attempt to restore state and default to zero (0) if not possible to restore.\n  \n  * `ALWAYS_ZERO` - Always initialize the counter with value zero (0).\n  \n  \n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "on_clockwise": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Actions to be performed when the knob is turned clockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers).\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "on_anticlockwise": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: Actions to be performed when the knob is turned anticlockwise. See [on_clockwise and on_anticlockwise Triggers](https://esphome.io/components/sensor/rotary_encoder.html#sensor-rotary-encoder-triggers).\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the rotary encoder sensor.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin_a", "pin_b"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `rotary_encoder` sensor platform allows you to use any continuous-rotation rotary encoders with ESPHome. These devices usually have two pins with which they encode the rotation. Every time the knob of the rotary encoder is turned, the signals of the two pins go HIGH and LOW in turn. See [this Arduino article](https://playground.arduino.cc/Main/RotaryEncoders) to gain a better understanding of these sensors.\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#rotary-encoder-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ruuvitag" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address of the RuuviTag device.\n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "pressure": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the pressure sensor.\n  * **name** (**Required**, string): The name for the pressure sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration sensor.\n  * **name** (**Required**, string): The name for the acceleration sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_x": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration x sensor.\n  * **name** (**Required**, string): The name for the acceleration x sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_y": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration y sensor.\n  * **name** (**Required**, string): The name for the acceleration y sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "acceleration_z": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the acceleration z sensor.\n  * **name** (**Required**, string): The name for the acceleration z sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "battery_voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the battery voltage sensor.\n  * **name** (**Required**, string): The name for the battery voltage sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "tx_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the transmit power sensor\n  * **name** (**Required**, string): The name for the transmit power sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "movement_counter": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the movement count sensor\n  * **name** (**Required**, string): The name for the movement count sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    },
                    "measurement_sequence_number": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the measurement sequence number sensor\n  * **name** (**Required**, string): The name for the measurement sequence number sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * Only available if RAWv2 protocol is used.\n  \n  \n\n\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ruuvitag` sensor platform lets you track the output of RuuviTag Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity, acceleration and battery voltage of a RuuviTag device with RAWv1 protocol every time the sensor sends out a BLE broadcast. RAWv2 protocol is supported too. Then tx power, movement count and measurement sequence number are also tracked.\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#ruuvitag-open-source-ble-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "scd30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082 sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "automatic_self_calibration": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Whether to enable automatic self calibration (ASC). Defaults to `true`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "altitude_compensation": {
                      "type": "number",
                      "markdownDescription": "**int**: Enable compensating deviations due to current altitude (in metres). Notice: setting *altitude_compensation* is ignored if *ambient_pressure_compensation* is set.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "ambient_pressure_compensation": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: Enable compensation of measured CO\u2082 values based on given ambient pressure in mBar.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "temperature_offset": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**float**: Temperature and humidity offsets may occur when operating the sensor in end-customer devices. This variable allows the compensation of those effects by setting a temperature offset.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "60s",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "97",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x61`.\n\n\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `scd30` sensor platform allows you to use your Sensirion SCD30 CO\u2082 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#scd30-co2-temperature-and-relative-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "scd4x" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082 sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the Humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "automatic_self_calibration": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Whether to enable automatic self calibration (ASC). Defaults to `true`.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "altitude_compensation": {
                      "type": "number",
                      "default": "0m",
                      "markdownDescription": "**int**: Enable compensating deviations due to current altitude (in metres). Notice: setting *altitude_compensation* is ignored if *ambient_pressure_compensation* is set.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "ambient_pressure_compensation": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**int**: Enable compensation of measured CO\u2082 values based on given ambient pressure in mBar.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "temperature_offset": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "4\u00b0C",
                      "markdownDescription": "**float**: The temperature offset can depend on various factors such as the SCD4x measurement mode, self-heating of close components, the ambient temperature and air flow. This variable allows the compensation of those effects by setting a temperature offset. Defaults to `4\u00b0C`.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "98",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x62`.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `scd4x` sensor platform  allows you to use your Sensirion SCD4X CO\u2082 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.5_CO2/Sensirion_CO2_Sensors_SCD4x_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#scd4x-co2-temperature-and-relative-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sdm_meter" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "phase_a": {
                      "$ref": "#/definitions/sensor-sdm_meter-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase A/1.\n  * **current** (*Optional*): Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **voltage** (*Optional*): Use the voltage value of the sensor in volts (V). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **active_power** (*Optional*): Use the (active) power value of the sensor in watts (W). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **power_factor** (*Optional*): Use the power factor value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **apparent_power** (*Optional*): Use the apparent power value of the sensor in volt amps (VA). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **reactive_power** (*Optional*): Use the reactive power value of the sensor in volt amps reactive (VAR). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  * **phase_angle** (*Optional*): Use the phase angle value of the sensor in degrees (\u00b0). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "phase_b": {
                      "$ref": "#/definitions/sensor-sdm_meter-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase B/2 on applicable meters. eg: SDM630\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "phase_c": {
                      "$ref": "#/definitions/sensor-sdm_meter-phase_a",
                      "markdownDescription": "The group of exposed sensors for Phase C/3 on applicable meters. eg: SDM630\n  * All options from **phase_a**\n  \n  \n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "total_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total power value of the sensor in watts (W). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "import_active_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the import active energy value of the sensor in kilowatt hours (kWh). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "export_active_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export active energy value of the sensor in kilowatt hours (kWh). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "import_reactive_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the import reactive energy value of the sensor in kilovolt amps reactive hours (kVArh). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "export_reactive_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export reactive energy value of the sensor in kilovolt amps reactive hours (kVArh). All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sdm_meter` sensor platform allows you to use Eastron SDM modbus energy monitors ([website](http://www.eastrongroup.com/product_detail.php?id=170&menu1=&menu2=)) with ESPHome.\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#eastron-sdm-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sdp3x" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "measurement_mode": {
                      "enum": ["mass_flow", "differential_pressure"],
                      "markdownDescription": "The measurement mode of the sensor. Valid options are `differential_pressure` and `mass_flow`. Defaults to `differential_pressure`.\n\n\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "33",
                      "markdownDescription": "**int**: The I\u00b2C address of the sensor. Defaults to `0x21`.\n\n\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for this sensor.\n\n\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for lambdas/multiple sensors.\n\n\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The SDP3x Differential Pressure sensor allows you to use your SDP3x ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/8_Differential_Pressure/Datasheets/Sensirion_Differential_Pressure_Datasheet_SDP3x_Digital.pdf), [sparkfun](https://www.sparkfun.com/products/17874)) or SDP800 Series ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/8_Differential_Pressure/Datasheets/Sensirion_Differential_Pressure_Datasheet_SDP8xx_Digital.pdf)) sensors with ESPHome.\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#sdp3x-sdp800-series-differential-pressure-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sds011" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 2.5\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the concentration of particulates of size less than 10.0\u00b5m in \u00b5g per cubic meter. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "rx_only": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the sensor is connected **only by RX pin** to the UART bus. Since the SDS011 can not be configured in RX-only mode, `update_interval` has no effect and the sensor must be configured separately. Defaults to `false`.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor in minutes. This affects the working period of the SDS011 sensor. Defaults to `0min`.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `sds011` sensor platform allows you to use SDS011 particulate matter sensors ([datasheet](https://nettigo.pl/attachments/398)) with ESPHome.\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#sds011-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "selec_meter" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "total_active_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total active energy value of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "import_active_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the import active energy value of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "export_active_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export active energy value of the sensor in kilo watt hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "total_reactive_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the total reactive energy value of the sensor in kilo volt amps reactive hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "import_reactive_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the import reactive energy value of the sensor in kilo volt amps reactive hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "export_reactive_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the export reactive energy value of the sensor in kilo volt amps reactive hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "apparent_energy": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the apparent energy value of the sensor in kilo volt amps hours. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "reactive_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the reactive power value of the sensor in VAR. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "apparent_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the apparent power value of the sensor in VA. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "voltage": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the voltage value of the sensor in volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "current": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the current value of the sensor in amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "power_factor": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the power factor value of the sensor. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "frequency": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the frequency value of the sensor in hertz. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "maximum_demand_active_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the maximum demand (active) power value of the sensor in watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "maximum_demand_reactive_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the maximum demand reactive power value of the sensor in VAR. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "maximum_demand_apparent_power": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Use the maximum demand apparent power value of the sensor in VA. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "1",
                      "markdownDescription": "**int**: The address of the sensor if multiple sensors are attached to the same UART bus. You will need to set the address of each device manually. Defaults to `1`.\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `selec_meter` sensor platform allows you to use Selec Modbus energy monitors ([website](https://www.selec.com/product-details/energy-meter-direct-operated-em2m)) with ESPHome.\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#selec-energy-monitor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "senseair" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["co2"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `senseair` sensor platform allows you to use SenseAir CO_2 sensor ([website](https://senseair.com/products/size-counts/senseair-s8-residential/)) with ESPHome.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-co-2-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sgp30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "eco2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082eq. sensor.\n  * **name** (**Required**, string): The name for the CO\u2082eq sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the total Volatile Organic Compounds sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "eco2_baseline": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO\u2082eq. sensor baseline value. Baseline value is published in decimals.\n  * **name** (**Required**, string): The name for the CO\u2082eq baseline value sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "tvoc_baseline": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the TVOC baseline value sensor. Baseline value is published in in decimals.\n  * **name** (**Required**, string): The name for the TVOC baseline value sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "store_baseline": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Store the sensor baselines persistently when calculated or updated. Defaults to yes.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "baseline": {
                      "$ref": "#/definitions/sensor-sgp30-baseline",
                      "markdownDescription": "The block containing baselines for calibration purposes. See [Calibrating Baseline](https://esphome.io/components/sensor/sgp30.html#sgp30-calibrating) for more info.\n  * **eco2_baseline** (**Required**, int): The eCO2 baseline for calibration purposes. After OTA, this value is used to calibrate the sensor.\n  \n  * **tvoc_baseline** (**Required**, int): The TVOC baseline for calibration purposes. After OTA, this value is used to calibrate the sensor.\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "compensation": {
                      "$ref": "#/definitions/sensor-sgp30-compensation",
                      "markdownDescription": "The block containing sensors used for compensation.\n  * **temperature_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations.\n  \n  * **humidity_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations.\n  \n  \n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "88",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x58`.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `1s`.\n\n\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["eco2", "tvoc"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sgp30` sensor platform allows you to use your Sensirion SGP30 multi-pixel gas ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9_Gas_Sensors/Datasheets/Sensirion_Gas_Sensors_SGP30_Datasheet.pdf)) sensors or the SVM30 breakout-boards  ([product page](https://www.sensirion.com/en/environmental-sensors/gas-sensors/multi-gas-humidity-temperature-module-svm30/)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#sgp30-co2-and-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sgp40" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "store_baseline": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "**boolean**: Stores and retrieves the baseline information for quicker startups. Defaults to `true`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "voc_baseline": { "type": "string" },
                    "compensation": {
                      "$ref": "#/definitions/sensor-sgp30-compensation",
                      "markdownDescription": "The block containing sensors used for compensation. If not set defaults will be used.\n  * **temperature_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external temperature sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `25`\n  \n  * **humidity_source** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Give an external humidity sensor ID here. This can improve the sensor\u2019s internal calculations. Defaults to `50`\n  \n  \n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "address": { "type": "string", "default": "89" },
                    "name": {
                      "markdownDescription": "**string**: The name for the CO\u2082eq sensor.\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`\n\n\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sgp40` sensor platform allows you to use your Sensirion SGP40 VOC sensor ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9_Gas_Sensors/Sensirion_Gas_Sensors_SGP40_Datasheet.pdf)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP40 Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp40.html#sgp40-volatile-organic-compound-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sht3xd" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "68",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x44`.\n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["temperature", "humidity"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sht3xd` sensor platform Temperature+Humidity sensor allows you to use your Sensirion SHT31-D ([datasheet](https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf), [Adafruit](https://www.adafruit.com/product/2857) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#sht3x-d-temperature-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sht4x" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Temperature.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Manually specify the ID used for code generation.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Relative Humidity.\n  * **name** (**Required**, string): The name of the sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Manually specify the ID used for code generation.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "precision": {
                      "enum": ["High", "Med", "Low"],
                      "markdownDescription": "**string**: The measurement precision, either `High`, `Med` or `Low`. Default is `High`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_power": {
                      "enum": ["High", "Med", "Low"],
                      "markdownDescription": "**string**: The heater power, either `High`, `Med` or `Low`. Default is `High`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_time": {
                      "enum": ["Long", "Short"],
                      "markdownDescription": "**string**: The length of time to run the heater, either `Long` (1000ms) or `Short` (100ms). Default is `Long`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "heater_max_duty": {
                      "type": "number",
                      "default": 0.0,
                      "markdownDescription": "**float**: The maximum duty cycle of the heater (limited to `0.05`). Default is `0.0`, i.e. heater off.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "68",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Default is `0x44`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sht4x` sensor platform  allows you to use your SHT4X temperature and humidity sensor ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHT4x_Datasheet.pdf), [Adafruit](https://www.adafruit.com/product/4885)) with ESPHome.\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#sht4x-temperature-and-humidity-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "shtcx" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor.\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "112",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x70`.\n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["temperature", "humidity"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `shtcx` sensor platform Temperature+Humidity sensor allows you to use your Sensirion SHTC1 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC1_Datasheet.pdf), [Sensirion STHC1](https://www.sensirion.com/en/environmental-sensors/humidity-sensors/digital-humidity-sensor-for-consumer-electronics-and-iot/)) and the newer SHTC3 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHTC3_Datasheet.pdf), [SparkFun](https://www.sparkfun.com/products/15074) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#shtcx-temperature-humidity-sensors)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sm300d2" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO\u2082 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name of the CO\u2082 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The formaldehyde data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the formaldehyde sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "tvoc": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The total volatile organic compounds (TVOC) data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the TVOC sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The PM2.5 data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the PM2.5 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The PM10 data of the sensor in micrograms per cubic meter air (\u00b5g/m\u00b3).\n  * **name** (**Required**, string): The name of the PM10 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The temperature data of the sensor in degrees celsius (\u00b0C).\n  * **name** (**Required**, string): The name of the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The humidity data of the sensor in percent relative humidity (%).\n  * **name** (**Required**, string): The name of the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sm300d2` sensor platform allows you to use the SM300D2 7-in-1 Air Quality Sensor with ESPHome.\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#sm300d2-7-in-1-air-quality-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sps30" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "pm_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 1\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_4_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 4\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Weight Concentration** sensor for coarse particles up to 10\u03bcm. Readings in \u00b5g/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_0_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for ultrafine particles up to 0.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_1_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 1\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_2_5": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for fine particles up to 2.5\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_4_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 4\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pmc_10_0": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the **Number Concentration** sensor for coarse particles up to 10\u03bcm. Readings in particles/m\u00b3.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "pm_size": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Typical particle size in \u03bcm.\n  * **name** (**Required**, string): The name for this sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in automation and lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "105",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x69`.\n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `sps30` sensor platform allows you to use your Sensirion SPS30 ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/9.6_Particulate_Matter/Datasheets/Sensirion_PM_Sensors_Datasheet_SPS30.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. However, at the moment only I\u00b2C communication is implemented.\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#sps30-particulate-matter-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sts3x" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "74",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x4A`.\n\n\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `sts3x` sensor platform Temperature sensor allows you to use your Sensirion STS30-DIS, STS31-DIS or STS35-DIS ([datasheet](https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/3_Temperature_Sensors/Sensirion_Temperature_Sensors_Table_Overview.pdf), [Sensirion STS3x](https://www.sensirion.com/sts3x/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#sts3x-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sun" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "enum": ["elevation", "azimuth"],
                      "markdownDescription": "**string**: The type of value to track. One of `elevation` and `azimuth`.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["type"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "Additionally, the sun component exposes its values over a sensor platform.\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "t6615" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The CO_2 data from the sensor in parts per million (ppm).\n  * **name** (**Required**, string): The name for the CO_2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for actions.\n\n\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["co2"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `t6615` sensor platform allows you to use T6613 and T6615 family sensors ([amphenol](https://amphenol-sensors.com/en/telaire/co2/525-co2-sensor-modules/319-t6615)) with ESPHome. T6613 sensors are unreferenced and require ABC to calibrate daily, while the T6615 sensors have a sealed reference gas and do not require ABC calibration. All ppm ranges are supported by this platform.\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#t6613-15-co2-sensors)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tcs34725" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "red_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the red color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "green_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the green color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "blue_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the blue color channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "clear_channel": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the percentage of how strongly the clear (without a color filter) channel is activated. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the total illuminance of the sensor in lx. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "color_temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "Get the calculated color temperature of the light in Kelvin. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "integration_time": {
                      "enum": [
                        "2.4ms",
                        "24ms",
                        "50ms",
                        "101ms",
                        "120ms",
                        "154ms",
                        "180ms",
                        "199ms",
                        "240ms",
                        "300ms",
                        "360ms",
                        "401ms",
                        "420ms",
                        "480ms",
                        "499ms",
                        "540ms",
                        "600ms",
                        "614ms"
                      ],
                      "markdownDescription": "The amount of time the light sensor is exposed. Valid values are `2.4ms` (default), `24ms`, `50ms`, `101ms`, `120ms`, `154ms`, `180ms`, `199ms`, `240ms`, `300ms`, `360ms`, `401ms`, `420ms`, `480ms`, `499ms`, `540ms`, `600ms`, `614ms`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": ["1X", "4X", "16X", "60X"],
                      "markdownDescription": "Set the gain for the internal ADCs to work better in certain low-light conditions. Valid values are `1x` (default), `4x`, `16x`, `60x` (highest gain).\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "glass_attenuation_factor": {
                      "type": "number",
                      "default": 1.0,
                      "markdownDescription": "The attenuation factor of glass if it\u2019s behind some glass facia. Default is `1.0` means `100%` transmissivity. `2` means `50%` transmissivity etc.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "41",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x29`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `tcs34725` sensor platform allows you to use your TCS34725 RGB color sensors ([datasheet](https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf), [Adafruit](https://www.adafruit.com/product/1334)), color temperature and illuminance sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#tcs34725-rgb-color-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "teleinfo" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": { "tag_name": { "type": "string" } },
                  "type": ["object", "null"],
                  "required_": ["tag_name"]
                }
              ]
            },
            "markdownDescription": "**string**: Specify the tag you want to retrieve from the Teleinformation.\n\n*See also: [teleinfo Sensor](https://esphome.io/components/sensor/teleinfo.html#sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the new value of the sensor\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to publish the value of the sensor, either the result of the lambda function or if no lambda function the last value published using the publish action. Defaults to `60s`.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` sensor platform allows you to create a sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#template-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tmp102" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "72",
                      "markdownDescription": "**int**: The I\u00b2C address of the sensor. Defaults to `0x48`. See [I\u00b2C Addresses](https://esphome.io/components/sensor/tmp117.html#tmp117-i2c-addresses) for more information.\n\n\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for use in lambdas.\n\n\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The TMP102 Temperature sensor allows you to use your TMP102 ([Sparkfun](https://www.sparkfun.com/products/13314)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#tmp102-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tmp117" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "72",
                      "markdownDescription": "**int**: The I\u00b2C address of the sensor. See [I\u00b2C Addresses](https://esphome.io/components/sensor/tmp117.html#tmp117-i2c-addresses) for more information.\n\n\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the temperature sensor.\n\n\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Set the ID of this sensor for lambdas/multiple sensors.\n\n\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.  The sensor component sets the maximum possible averaging in the sensor based on this.\n\n\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The TMP117 Temperature sensor allows you to use your TMP117 ([datasheet](https://www.ti.com/lit/ds/symlink/tmp117.pdf), [sparkfun](https://www.sparkfun.com/products/15805)) sensors with ESPHome.\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#tmp117-temperature-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tof10120" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "82",
                      "markdownDescription": "**int**: Manually specify the I^2C address of the sensor. Defaults to `0x52`.\n\n\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `tof10120` sensor platform allows you to use TOF10120 optical time of flight sensor ([datasheet](https://github.com/simpleiot/reference/blob/master/sensors/TOF10120_english.pdf)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back.\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#tof10120-time-of-flight-distance-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "total_daily_energy" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "restore": { "type": "boolean", "default": true },
                    "min_save_interval": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0s"
                    },
                    "method": { "enum": ["trapezoid", "left", "right"] }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `total_daily_energy` sensor is a helper sensor that can use the energy value of other sensors like the [HLW8012](https://esphome.io/components/sensor/hlw8012.html), [CSE7766](https://esphome.io/components/sensor/cse7766.html), [ATM90E32](https://esphome.io/components/sensor/atm90e32.html), etc and integrate it over time.\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#total-daily-energy-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tsl2561" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "integration_time": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "402ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the sensor will take for each measurement. Longer means more accurate values. One of `14ms`, `101ms`, `402ms`. Defaults to `402ms`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": ["1X", "16X"],
                      "markdownDescription": "**string**: The gain of the sensor. Higher values are better in low-light conditions. One of `1x` and `16x`. Defaults to `1x`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "is_cs_package": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: The \u201cCS\u201d package of this sensor has a slightly different formula for calculating the illuminance in lx. Set this to `true` if you\u2019re working with a CS package. Defaults to `false`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "57",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x39`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the sensor.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `tsl2561` sensor platform allows you to use your TSL2561 ([datasheet](https://cdn-shop.adafruit.com/datasheets/TSL2561.pdf), [Adafruit](https://www.adafruit.com/product/439)) ambient light sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#tsl2561-ambient-light-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tsl2591" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "infrared": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "visible": { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                    "full_spectrum": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "calculated_lux": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "integration_time": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "100ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the device will use for each measurement. Longer means more accurate values. You cannot specify an arbitrary amount of time. It must be the equivalent of one of:\n  * `100ms`   *(default)*\n  \n  * `200ms`\n  \n  * `300ms`\n  \n  * `400ms`\n  \n  * `500ms`\n  \n  * `600ms`\n  \n  \n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    },
                    "name": {
                      "type": "string",
                      "default": "TLS2591",
                      "markdownDescription": "**string**: A user-friendly name for this TSL2591 device.\n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    },
                    "gain": {
                      "enum": [
                        "1X",
                        "LOW",
                        "25X",
                        "MED",
                        "MEDIUM",
                        "400X",
                        "HIGH",
                        "9500X",
                        "MAX",
                        "MAXIMUM",
                        "AUTO"
                      ],
                      "markdownDescription": "**string**: The gain the device will use. Higher values are better in low-light conditions. Multipliers here are approximate. Values below on the same line are aliases. You cannot specify an arbitrary gain multiplier. It must be one of:\n  * `low`, `1x`\n  \n  * `medium`, `med`, `25x`   *(default)*\n  \n  * `high`, `400x`\n  \n  * `maximum`, `max`, `9500x`\n  \n  \n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    },
                    "power_save_mode": { "type": "boolean", "default": true },
                    "device_factor": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 53.0
                    },
                    "glass_attenuation_factor": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 7.7
                    },
                    "address": {
                      "type": "string",
                      "default": "41",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the device. Defaults to `0x29`. It is not possible to change this for this device without additional hardware. It also automatically uses a secondary address of `0x28` (see the datasheet), making that address unavailable for other devices on the same I\u00b2C bus.\n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval for checking the sensors. Defaults to `60s`.\n\n\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `tsl2591` sensor platform allows you to use the AMS TSL2591 ambient light sensor with ESPHome. Communication with the device is over [I\u00b2C](https://esphome.io/components/i2c.html#i2c), which must be present in your configuration.\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#tsl2591-ambient-light-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "sensor_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the sensor.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["sensor_datapoint"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` sensor platform creates a sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#tuya-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tx20" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "wind_speed": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the wind speed sensor.\n  * **name** (**Required**, string): The name for the wind speed sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    },
                    "wind_direction_degrees": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the direction in degrees sensor.\n  * **name** (**Required**, string): The name for the direction sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    },
                    "pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin, where the black or brown cable are connected.\n\n\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tx20` sensor platform allows you to use your TX20/TX23 ([Amazon](https://www.amazon.de/Technoline-Tx-20/dp/B01HXZ3KLA), [lacrosse_tx23](https://www.lacrossetechnology.com/tx23-wind-sensor)) wind direction and speed sensors with ESPHome. The only required pin is the black or brown cable (which is used to transmit data.) The red cable should be connected to VCC (3.3V), green initiates the data transfer when connected to GND and should therefore be directly connected to GND and the yellow cable should be always connected to ground. The difference from the TX20 to the TX23 seems to be that the green cable does not matter any more and the wind sensor is just sending a datagram every 2 seconds - pretty much the same as when the green cable was connected to GND in the TX20.\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#tx20-tx23-wind-speed-direction-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "ultrasonic" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "trigger_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The output pin to periodically send the trigger pulse to.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "echo_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The input pin on which to wait for the echo.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "2m",
                      "markdownDescription": "**float**: The number of meters for the timeout. Most sensors can only sense up to 2 meters. Defaults to 2 meters.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "pulse_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "10us",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration for which the trigger pin will be active. Defaults to `10us`.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["trigger_pin", "echo_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The ultrasonic distance sensor allows you to use simple ultrasonic sensors like the HC-SR04 ([datasheet](https://www.electroschematics.com/wp-content/uploads/2013/07/HC-SR04-datasheet-version-2.pdf), [SparkFun](https://www.sparkfun.com/products/13959)) with ESPHome to measure distances. These sensors usually can\u2019t measure anything more than about two meters and may sometimes make some annoying clicking sounds.\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#ultrasonic-distance-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "uptime" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `uptime` sensor allows you to track the time the ESP has stayed up for in seconds. Time rollovers are automatically handled.\n\n*See also: [Uptime Sensor](https://esphome.io/components/sensor/uptime.html#uptime-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "vl53l0x" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                {
                  "properties": {
                    "signal_rate_limit": {
                      "type": "number",
                      "default": 0.25,
                      "markdownDescription": "**float**: Set the return signal rate limit in units of MCPS (mega counts per second). This is the minimum signal amplitude detected by the sensor necessary for it to report a valid reading. Setting a lower value may increase the range of the sensor but also increases the chance of getting inaccurate readings. Defaults to `0.25`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "long_range": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Set the sensor in long range mode. The signal_rate_limit is overruled to `0.1`. Defaults to `false`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "timeout": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "10ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sensor setup timeout. Default to `10ms`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "enable_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin connected to XSHUT on vl53l0x to enable/disable sensor. **Required** if not using address `0x29` which is the cause if you have multiple VL53L0X on the same i2c bus. In this case you have to assign a different pin to each VL53L0X.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "address": {
                      "type": "string",
                      "default": "41",
                      "markdownDescription": "**int**: Manually specify the i2c address of the sensor. Defaults to `0x29`. If an address other the `0x29` is specified, the sensor will be dynamically re-addressed at startup. A dynamic re-address of sensor requires the `enable_pin` configuration variable to be assigned. If more then one VL53L0X sensor is used on the same i2c bus, a unique address must be specified per sensor.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `vl53l0x` sensor platform allows you to use VL53L0X optical time of flight ([datasheet](https://www.st.com/resource/en/datasheet/vl53l0x.pdf), [ST](https://www.st.com/en/imaging-and-photonics-solutions/vl53l0x.html)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#vl53l0x-time-of-flight-distance-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "wifi_signal" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/sensor.SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `wifi_signal` sensor platform allows you to read the signal strength of the currently connected [WiFi Access Point](https://esphome.io/components/wifi.html).\n\n*See also: [WiFi Signal Sensor](https://esphome.io/components/sensor/wifi_signal.html#wifi-signal-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgd1" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["bindkey", "mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgdk2" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["bindkey", "mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "xiaomi_cgg1" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_gcls002" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_hhccjcy01" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "illuminance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_hhccpot002" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "moisture": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "conductivity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_jqjcy01ym" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "formaldehyde": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsd02" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsd03mmc" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["bindkey", "mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_lywsdcgq" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mhoc303" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_mhoc401" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "bindkey": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    },
                    "battery_level": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["bindkey", "mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": {
              "properties": { "platform": { "const": "xiaomi_miscale" } }
            },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "mac_address": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**MAC Address**: The MAC address of the scale.\n\n\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#configuration-variables)*"
                    },
                    "weight": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the weight sensor.\n  * **name** (**Required**, string): The name for the weight sensor.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#configuration-variables)*"
                    },
                    "impedance": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the impedance sensor. **Only available on MiScale2**\n  * **name** (**Required**, string): The name for the impedance sensor.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["mac_address"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `xiaomi_miscale` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the weight of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_miscale` listens passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#xiaomi-miscale-sensors)*"
          },
          {
            "if": { "properties": { "platform": { "const": "zyaura" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "clock_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the clock bus is connected.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "data_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL",
                      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin where the data bus is connected.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "co2": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the CO2 sensor.\n  * **name** (**Required**, string): The name for the CO2 sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "temperature": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the temperature sensor.\n  * **name** (**Required**, string): The name for the temperature sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "humidity": {
                      "$ref": "#/definitions/sensor.SENSOR_SCHEMA",
                      "markdownDescription": "The information for the humidity sensor\n  * **name** (**Required**, string): The name for the humidity sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n  \n  \n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["clock_pin", "data_pin"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The ZyAura CO2 & Temperature & Humidity sensor allows you to use your [ZGm05(3)(U)](http://www.zyaura.com/products/ZGm05.asp) ([MT8057](https://masterkit.ru/shop/1266110), [MT8057S](https://medgadgets.ru/shop/kit-mt8057.html)), [ZG1683R(U)](http://www.zyaura.com/products/ZG1683R.asp) ([MT8060](https://masterkit.ru/shop/1921398)), [ZG1583RUD](http://www.zyaura.com/products/ZG1583RUD.asp) monitors with ESPHome.\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#zyaura-co2-temperature-humidity-sensor)*"
          }
        ]
      },
      "markdownDescription": "ESPHome has support for many different sensors. Each of them is a platform of the `sensor` domain and each sensor has several base configuration options.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#sensor-component)*"
    },
    "stepper": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "a4988" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
                {
                  "properties": {
                    "step_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The `STEP` pin of the A4988 stepper driver.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "dir_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The `DIRECTION` pin of the A4988 stepper driver.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "sleep_pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: Optionally also use the `SLEEP` pin of the A4988 stepper driver. If specified, the driver will be put into sleep mode as soon as the stepper reaches the target steps.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the stepper so that you can control it.\n\n\n\n*See also: [A4988 Component](https://esphome.io/components/stepper/index.html#a4988-component)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["step_pin", "dir_pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "uln2003" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/stepper.STEPPER_SCHEMA" },
                {
                  "properties": {
                    "pin_a": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **a** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_b": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **b** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_c": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **c** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "pin_d": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin **d** of the stepper control board.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "sleep_when_done": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to turn off all coils when the stepper has reached the target position\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "step_mode": {
                      "enum": ["FULL_STEP", "HALF_STEP", "WAVE_DRIVE"],
                      "markdownDescription": "**string**: The step mode to operate the motor with. One of:\n  * `FULL_STEP` (Default)\n  \n  * `HALF_STEP`\n  \n  * `WAVE_DRIVE`\n  \n  \n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Specify the ID of the stepper so that you can control it.\n\n\n\n*See also: [ULN2003 Component](https://esphome.io/components/stepper/index.html#uln2003-component)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin_a", "pin_b", "pin_c", "pin_d"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          }
        ]
      },
      "markdownDescription": "The `stepper` component allows you to use stepper motors with ESPHome. Currently only the A4988 stepper driver ([datasheet](https://www.pololu.com/file/0J450/a4988_DMOS_microstepping_driver_with_translator.pdf)) and ULN2003 ([datasheet](http://www.ti.com/lit/ds/symlink/uln2003a.pdf)) are supported.\n\n*See also: [Stepper Component](https://esphome.io/components/stepper/index.html#stepper-component)*"
    },
    "switch": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ble_client" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_client` component is a switch platform that is used to enable and disable a `ble_client`. This has several uses, such as minimizing battery usage or for allowing other clients (Eg phone apps) to connect to the device.\n\n*See also: [BLE Client Switch](https://esphome.io/components/switch/ble_client.html#ble-client-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the switch(es).\n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
                },
                "switches": {
                  "anyOf": [
                    { "$ref": "#/definitions/switch-custom-switches" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/switch-custom-switches"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of switches to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Switch](https://esphome.io/components/switch/index.html#config-switch).\n  \n  \n\n\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "switches"]
            },
            "markdownDescription": "This integration can be used to create custom switches in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Switch](https://esphome.io/components/switch/custom.html#custom-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gpio" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "pin": {
                      "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
                      "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to use for the switch.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "restore_mode": {
                      "enum": [
                        "RESTORE_DEFAULT_OFF",
                        "RESTORE_DEFAULT_ON",
                        "ALWAYS_OFF",
                        "ALWAYS_ON",
                        "RESTORE_INVERTED_DEFAULT_OFF",
                        "RESTORE_INVERTED_DEFAULT_ON"
                      ],
                      "markdownDescription": "Control how the GPIO Switch attempts to restore state on bootup. For restoring on ESP8266s, also see `esp8266_restore_from_flash` in the [esphome section](https://esphome.io/components/esphome.html).\n  * `RESTORE_DEFAULT_OFF` (Default) - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `RESTORE_INVERTED_DEFAULT_OFF` - Attempt to restore state inverted from the previous state and default to OFF.\n  \n  * `RESTORE_INVERTED_DEFAULT_ON` - Attempt to restore state inverted from the previous state and default to ON.\n  \n  * `ALWAYS_OFF` - Always initialize the pin as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the pin as ON on bootup.\n  \n  \n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "interlock": {
                      "anyOf": [
                        { "$ref": "#/definitions/switch-gpio-interlock" },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/switch-gpio-interlock"
                          }
                        }
                      ],
                      "markdownDescription": "**list**: A list of other GPIO switches in an interlock group. See [Interlocking](https://esphome.io/components/switch/gpio.html#switch-gpio-interlocking).\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "interlock_wait_time": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "default": "0ms",
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: For interlocking mode, set how long to wait after other items in an interlock group have been disabled before re-activating. Useful for motors where immediately turning on in the other direction could cause problems.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `gpio` switch platform allows you to use any pin on your node as a switch. You can for example hook up a relay to a GPIO pin and use it through this platform.\n\n*See also: [GPIO Switch](https://esphome.io/components/switch/gpio.html#gpio-switch)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": { "type": "number" },
                    "custom_command": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                          }
                        }
                      ]
                    },
                    "offset": { "type": "number" },
                    "byte_offset": { "type": "number" },
                    "bitmask": { "type": "string", "default": "4294967295" },
                    "skip_updates": { "type": "number", "default": 0 },
                    "force_new_range": { "type": "boolean", "default": false },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "response_size": { "type": "number", "default": 0 },
                    "register_type": {
                      "enum": [
                        "custom",
                        "coil",
                        "holding",
                        "discrete_input",
                        "read"
                      ]
                    },
                    "use_write_multiple": {
                      "type": "boolean",
                      "default": false
                    },
                    "write_lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Switch](https://esphome.io/components/switch/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Switch](https://esphome.io/components/switch/modbus_controller.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` sensor platform creates a sensor from a modbus_controller component and requires [Modbus Controller](https://esphome.io/components/modbus_controller.html) to be configured.\n\n*See also: [Modbus Switch](https://esphome.io/components/switch/modbus_controller.html#modbus-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "background_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "foreground_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "visible": { "type": "boolean", "default": true },
                    "component_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "variable_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "font_id": { "type": "number" },
                    "foreground_pressed_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "background_pressed_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Nextion Switch Component](https://esphome.io/components/switch/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `nextion` switch platform supports the many switched components in the Nextion as well as integer variables. It can be a component or variable in the Nextion display. It is best to set the components vscope to global in the Nextion Editor. This way the component will be available if the page is shown or not.\n\n*See also: [Nextion Switch Component](https://esphome.io/components/switch/nextion.html#nextion-switch-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "output" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "restore_mode": {
                      "enum": [
                        "RESTORE_DEFAULT_OFF",
                        "RESTORE_DEFAULT_ON",
                        "ALWAYS_OFF",
                        "ALWAYS_ON",
                        "RESTORE_INVERTED_DEFAULT_OFF",
                        "RESTORE_INVERTED_DEFAULT_ON"
                      ]
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `output` switch platform allows you to use any output component as a switch.\n\n*See also: [Generic Output Switch](https://esphome.io/components/switch/output.html#generic-output-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pipsolar" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "output_source_priority_utility": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    },
                    "output_source_priority_solar": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    },
                    "output_source_priority_battery": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    },
                    "input_voltage_range": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    },
                    "pv_ok_condition_for_parallel": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    },
                    "pv_power_balance": {
                      "$ref": "#/definitions/switch-pipsolar-output_source_priority_utility"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "restart" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `restart` switch platform allows you to restart your node remotely through Home Assistant.\n\n*See also: [Restart Switch](https://esphome.io/components/switch/restart.html#restart-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "safe_mode" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `safe_mode` switch allows you to remotely reboot your node into [Safe Mode](https://esphome.io/components/ota.html#config-ota). This is useful in certain situations where a misbehaving component is preventing Over-The-Air updates from completing successfully.\n\n*See also: [Safe Mode Switch](https://esphome.io/components/switch/safe_mode.html#safe-mode-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "shutdown" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `shutdown` switch platform allows you to shutdown your node remotely through Home Assistant. It does this by putting the node into deep sleep mode with no wakeup source selected. After enabling, the only way to startup the ESP again is by pressing the reset button or restarting the power supply.\n\n*See also: [Shutdown Switch](https://esphome.io/components/switch/shutdown.html#shutdown-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated repeatedly to get the current state of the switch.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "optimistic": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether to operate in optimistic mode - when in this mode, any command sent to the template switch will immediately update the reported state. Defaults to `false`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "assumed_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Whether the true state of the switch is not known. This will make the Home Assistant frontend show buttons for both ON and OFF actions, instead of hiding one of them when the switch is ON/OFF. Defaults to `false`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "turn_off_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned off.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "turn_on_action": {
                      "$ref": "#/definitions/simple_automation",
                      "markdownDescription": "**[Action](https://esphome.io/guides/automations.html#config-action)**: The action that should be performed when the remote (like Home Assistant\u2019s frontend) requests the switch to be turned on.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "restore_state": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Sets whether ESPHome should attempt to restore the state on boot-up and call the turn on/off actions with the recovered values. Defaults to `no`.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `template` switch platform allows you to create simple switches out of just actions and an optional value lambda. Once defined, it will automatically appear in Home Assistant as a switch and can be controlled through the frontend.\n\n*See also: [Template Switch](https://esphome.io/components/switch/template.html#template-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "switch_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the switch.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the switch.\n\n\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["switch_datapoint"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` switch platform creates a sensor from a tuya serial component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Switch](https://esphome.io/components/switch/tuya.html#tuya-switch)*"
          },
          {
            "if": { "properties": { "platform": { "const": "uart" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/switch.SWITCH_SCHEMA" },
                {
                  "properties": {
                    "data": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string or list of bytes**: The data to send via UART. Either an ASCII string or a list of bytes.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "send_every": {
                      "properties": {
                        "days": { "type": "number" },
                        "hours": { "type": "number" },
                        "minutes": { "type": "number" },
                        "seconds": { "type": "number" },
                        "milliseconds": { "type": "number" },
                        "microseconds": { "type": "number" }
                      },
                      "type": ["object", "null"],
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Sends recurring data instead of sending once.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name for the switch.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "uart_id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["data"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `uart` switch platform allows you to send a pre-defined sequence of bytes on a [UART bus](https://esphome.io/components/uart.html) when triggered.\n\n*See also: [UART Switch](https://esphome.io/components/switch/uart.html#uart-switch)*"
          }
        ]
      },
      "markdownDescription": "The `switch` domain includes all platforms that should show up like a switch and can only be turned ON or OFF.\n\n*See also: [Switch Component](https://esphome.io/components/switch/index.html#switch-component)*"
    },
    "text_sensor": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ble_scanner" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `ble_scanner` text sensor platform lets you track reachable BLE devices. See the [BLE Tracker Configuration variables](https://esphome.io/components/esp32_ble_tracker.html#config-esp32-ble-tracker) for instructions for setting up scan parameters. The sensor platform is similar to [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html) but in contrast to that platform, this text sensor sends out all raw BLE scan information and does not filter devices.\n\n*See also: [ESP32 Bluetooth Low Energy Scanner](https://esphome.io/components/text_sensor/ble_scanner.html#esp32-bluetooth-low-energy-scanner)*"
          },
          {
            "if": { "properties": { "platform": { "const": "bme680_bsec" } } },
            "then": {
              "properties": {
                "iaq_accuracy": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                  "markdownDescription": "The information for the IAQ accuracy sensor. Shows: Stabilizing, Uncertain, Calibrating, Calibrated.\n  * **name** (**Required**, string): The name for the IAQ accuracy sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [TextSensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "Accuracy can be reported in text format.\n\n*See also: [bme680_bsec Text Sensor](https://esphome.io/components/sensor/bme680_bsec.html#text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "custom" } } },
            "then": {
              "properties": {
                "lambda": {
                  "type": ["null", "object", "string", "array", "number"],
                  "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: The lambda to run for instantiating the text sensor(s).\n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
                },
                "text_sensors": {
                  "anyOf": [
                    { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                      }
                    }
                  ],
                  "markdownDescription": "**list**: A list of text sensors to initialize. The length here must equal the number of items in the `return` statement of the `lambda`.\n  * All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
                }
              },
              "type": ["object", "null"],
              "required_": ["lambda", "text_sensors"]
            },
            "markdownDescription": "This integration can be used to create custom text sensors in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Text Sensor](https://esphome.io/components/text_sensor/custom.html#custom-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "daly_bms" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "status": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "debug" } } },
            "then": {
              "properties": {
                "device": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                }
              },
              "type": ["object", "null"]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "dsmr" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "identification": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "DSMR Identification\n  * **name** (**Required**, string): The name for the identification text sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "p1_version": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "DSMR Version\n  * **name** (**Required**, string): The name for the p1_version text sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "p1_version_be": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "DSMR Version Belgium\n  * **name** (**Required**, string): The name for the p1_version_be text sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Timestamp\n  * **name** (**Required**, string): The name for the timestamp sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "electricity_tariff": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "The current tariff. According to the specs value \u20180001\u2019 means \u2018normal tariff\u2019 and value \u20180002\u2019 means \u2018low tariff\u2019. Your meter may report differently.\n  * **name** (**Required**, string): The name for the electricity_tariff sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "electricity_failure_log": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Electricity Failure Log\n  * **name** (**Required**, string): The name for the electricity_failure_log sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "message_short": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Message Short\n  * **name** (**Required**, string): The name for the message_short sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "message_long": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Message Long\n  * **name** (**Required**, string): The name for the message_long sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "gas_equipment_id": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Gas Equipment ID.\n  * **name** (**Required**, string): The name for the gas_equipment_id sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "thermal_equipment_id": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "water_equipment_id": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Water Equipment ID\n  * **name** (**Required**, string): The name for the water_equipment_id sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "sub_equipment_id": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "Sub Equipment ID\n  * **name** (**Required**, string): The name for the sub_equipment_id sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    },
                    "gas_delivered_text": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                      "markdownDescription": "A text sensor which unformatted gas data. You need to apply a custom parsing of this value depending on your meter format.\n  * **name** (**Required**, string): The name for the p1_version text sensor.\n  \n  * **id** (*Optional*, [ID](https://esphome.io/guides/configuration-types.html#config-id)): Set the ID of this sensor for use in lambdas.\n  \n  * All other options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n  \n  \n\n\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [dsmr Text Sensor](https://esphome.io/components/sensor/dsmr.html#text-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "entity_id": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**string**: The entity ID to import from Home Assistant.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "attribute": {
                      "type": "string",
                      "markdownDescription": "**string**: The name of the state attribute to import from the specified entity. The entity state is used when this option is omitted. Requires Home Assistant 2021.6 or newer.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["entity_id"]
                }
              ]
            },
            "markdownDescription": "The `homeassistant` text sensor platform allows you to create a sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Text Sensor](https://esphome.io/components/text_sensor/homeassistant.html#home-assistant-text-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "modbus_controller" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "address": { "type": "number" },
                    "custom_command": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/binary_sensor-modbus_controller-custom_command"
                          }
                        }
                      ]
                    },
                    "offset": { "type": "number" },
                    "byte_offset": { "type": "number" },
                    "bitmask": { "type": "string", "default": "4294967295" },
                    "skip_updates": { "type": "number", "default": 0 },
                    "force_new_range": { "type": "boolean", "default": false },
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "response_size": { "type": "number", "default": 2 },
                    "register_type": {
                      "enum": [
                        "custom",
                        "coil",
                        "holding",
                        "discrete_input",
                        "read"
                      ]
                    },
                    "register_count": { "type": "number", "default": 0 },
                    "raw_encode": { "enum": ["NONE", "HEXBYTES", "COMMA"] },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Modbus Text Sensor](https://esphome.io/components/text_sensor/modbus_controller.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Modbus Text Sensor](https://esphome.io/components/text_sensor/modbus_controller.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "The `modbus_controller` sensor platform creates a text sensor from a modbus_controller component and requires [Modbus Controller](https://esphome.io/components/modbus_controller.html) to be configured.\n\n*See also: [Modbus Text Sensor](https://esphome.io/components/text_sensor/modbus_controller.html#modbus-text-sensor)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "mqtt_subscribe" } }
            },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "topic": {
                      "type": "string",
                      "markdownDescription": "**string**: The MQTT topic to listen for numeric messages.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "qos": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": 0,
                      "markdownDescription": "**int**: The MQTT QoS to subscribe with. Defaults to `0`.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["topic"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `mqtt_subscribe` text sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and save the most recent value in its `id(mysensor).state`.\n\n*See also: [MQTT Subscribe Text Sensor](https://esphome.io/components/text_sensor/mqtt_subscribe.html#mqtt-subscribe-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "nextion" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "background_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "foreground_color": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "visible": { "type": "boolean", "default": true },
                    "component_name": {
                      "type": ["null", "object", "string", "array", "number"]
                    },
                    "font_id": { "type": "number" },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Nextion Text Sensor Component](https://esphome.io/components/text_sensor/nextion.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `nextion` text sensor platform supports text strings. It can be a component or variable in the Nextion display. It is best to set the components vscope to global in the Nextion Editor. This way the component will be available if the page is shown or not.\n\n*See also: [Nextion Text Sensor Component](https://esphome.io/components/text_sensor/nextion.html#nextion-text-sensor-component)*"
          },
          {
            "if": { "properties": { "platform": { "const": "pipsolar" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                {
                  "properties": {
                    "device_mode": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qpigs": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qpiri": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qmod": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qflag": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qpiws": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qt": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    },
                    "last_qmn": {
                      "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            }
          },
          {
            "if": { "properties": { "platform": { "const": "sun" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "type": {
                      "enum": ["sunset", "sunrise"],
                      "markdownDescription": "**string**: The type of value to track. One of `sunrise` and `sunset`.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "elevation": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": -0.83333,
                      "markdownDescription": "**float**: The elevation to calculate the next sunrise/sunset event for. Defaults to -0.833\u00b0 (the horizon, slightly less than 0\u00b0 to compensate for atmospheric refraction).\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "format": {
                      "type": "string",
                      "default": "%X",
                      "markdownDescription": "**string**: The format to format the time value with, see [strftime](https://esphome.io/components/time.html#strftime) for more information. Defaults to `%X`.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["type"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "Other properties like the next sunset time can be read out with the sun text_sensor platform.\n\n*See also: [sun Text Sensor](https://esphome.io/components/sun.html#sun-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "teleinfo" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": { "tag_name": { "type": "string" } },
                  "type": ["object", "null"],
                  "required_": ["tag_name"]
                }
              ]
            },
            "markdownDescription": "**string**: Specify the tag you want to retrieve from the Teleinformation.\n\n*See also: [teleinfo Text Sensor](https://esphome.io/components/sensor/teleinfo.html#text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "template" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "lambda": {
                      "type": ["null", "object", "string", "array", "number"],
                      "markdownDescription": "**[lambda](https://esphome.io/guides/automations.html#config-lambda)**: Lambda to be evaluated every update interval to get the new value of the text sensor\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "update_interval": {
                      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to publish the value of the text sensor, either the result of the lambda function or if no lambda function the last value published using the publish action. Defaults to `60s`.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/POLLING_COMPONENT" }
              ]
            },
            "markdownDescription": "The `template` text sensor platform allows you to create a text sensor with templated values using [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Template Text Sensor](https://esphome.io/components/text_sensor/template.html#template-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "tuya" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "sensor_datapoint": {
                      "type": "number",
                      "markdownDescription": "**int**: The datapoint id number of the sensor.\n\n\n\n*See also: [Tuya Text Sensor](https://esphome.io/components/text_sensor/tuya.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Tuya Text Sensor](https://esphome.io/components/text_sensor/tuya.html#configuration-variables)*"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the sensor.\n\n\n\n*See also: [Tuya Text Sensor](https://esphome.io/components/text_sensor/tuya.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"],
                  "required_": ["sensor_datapoint"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `tuya` text sensor platform creates a sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Text Sensor](https://esphome.io/components/text_sensor/tuya.html#tuya-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "version" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA" },
                {
                  "properties": {
                    "icon": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "mdi:new-box"
                    },
                    "hide_timestamp": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "**boolean**: Allows you to hide the compilation timestamp from the version string. Defaults to `false`.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    },
                    "entity_category": {
                      "type": ["null", "object", "string", "array", "number"],
                      "default": "diagnostic"
                    },
                    "name": {
                      "markdownDescription": "**string**: The name of the text sensor.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    },
                    "id": {
                      "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#configuration-variables)*"
                    }
                  },
                  "type": ["object", "null"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
              ]
            },
            "markdownDescription": "The `version` text sensor platform exposes the ESPHome version the firmware was compiled against as a text sensor.\n\n*See also: [Version Text Sensor](https://esphome.io/components/text_sensor/version.html#version-text-sensor)*"
          },
          {
            "if": { "properties": { "platform": { "const": "wifi_info" } } },
            "then": {
              "properties": {
                "ip_address": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                  "markdownDescription": "Expose the IP Address of the ESP as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "scan_results": {
                  "$ref": "#/definitions/text_sensor-wifi_info-scan_results",
                  "markdownDescription": "Expose the latest networks found during the latest scan. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "ssid": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                  "markdownDescription": "Expose the SSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "bssid": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                  "markdownDescription": "Expose the BSSID of the currently connected WiFi network as a text sensor. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                },
                "mac_address": {
                  "$ref": "#/definitions/text_sensor.TEXT_SENSOR_SCHEMA",
                  "markdownDescription": "Expose the Mac Address of the WiFi card. All options from [Text Sensor](https://esphome.io/components/text_sensor/index.html#config-text-sensor).\n\n\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"]
            },
            "markdownDescription": "The `wifi_info` text sensor platform exposes different WiFi information via text sensors.\n\n*See also: [WiFi Info Text Sensor](https://esphome.io/components/text_sensor/wifi_info.html#wifi-info-text-sensor)*"
          }
        ]
      },
      "markdownDescription": "Text sensors are a lot like normal [sensors](https://esphome.io/components/sensor/index.html). But where the \u201cnormal\u201d sensors only represent sensors that output **numbers**, this component can represent any *text*.\n\n*See also: [Text Sensor Component](https://esphome.io/components/text_sensor/index.html#text-sensor-component)*"
    },
    "time": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/time.TIME_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ds1307" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": "104",
                      "markdownDescription": "**int**: Manually specify the I\u00b2C address of the RTC. Defaults to `0x68`.\n\n\n\n*See also: [DS1307 Time Source](https://esphome.io/components/time.html#ds1307-time-source)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "You first need to set up the [I2C](https://esphome.io/components/i2c.html) component.\n\n*See also: [GPS Time Source](https://esphome.io/components/time.html#ds1307-time-source)*"
          },
          {
            "if": { "properties": { "platform": { "const": "gps" } } },
            "then": { "$ref": "#/definitions/time.TIME_SCHEMA" },
            "markdownDescription": "You first need to set up the [GPS](https://esphome.io/components/gps.html) component.\n\n*See also: [SNTP Time Source](https://esphome.io/components/time.html#gps-time-source)*"
          },
          {
            "if": {
              "properties": { "platform": { "const": "homeassistant" } }
            },
            "then": { "$ref": "#/definitions/time.TIME_SCHEMA" },
            "markdownDescription": "The preferred way to get time in ESPHome is using Home Assistant. With the `homeassistant` time platform, the [native API](https://esphome.io/components/api.html) connection to Home Assistant will be used to periodically synchronize the current time.\n\n*See also: [on_time_sync Trigger](https://esphome.io/components/time.html#home-assistant-time-source)*"
          },
          {
            "if": { "properties": { "platform": { "const": "sntp" } } },
            "then": {
              "allOf": [
                { "$ref": "#/definitions/time.TIME_SCHEMA" },
                {
                  "properties": {
                    "servers": {
                      "anyOf": [
                        { "$ref": "#/definitions/time-sntp-servers" },
                        {
                          "type": "array",
                          "items": { "$ref": "#/definitions/time-sntp-servers" }
                        }
                      ],
                      "markdownDescription": "**list of strings**: Choose up to 3 NTP servers that are used for the clock source. Defaults to `0.pool.ntp.org`, `1.pool.ntp.org` and `2.pool.ntp.org`\n\n\n\n*See also: [SNTP Time Source](https://esphome.io/components/time.html#sntp-time-source)*"
                    }
                  },
                  "type": ["object", "null"]
                }
              ]
            },
            "markdownDescription": "Configuration variables:\n\n*See also: [Home Assistant Time Source](https://esphome.io/components/time.html#sntp-time-source)*"
          }
        ]
      },
      "markdownDescription": "The `time` component allows you to set up real time clock time sources for ESPHome. You can then get the current time in [lambdas](https://esphome.io/guides/automations.html#config-lambda).\n\n*See also: [Time](https://esphome.io/components/time.html#time)*"
    },
    "touchscreen": {
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/touchscreen.TOUCHSCREEN_SCHEMA" },
          {
            "type": "object",
            "properties": { "platform": { "type": "string" } }
          },
          {
            "if": { "properties": { "platform": { "const": "ektf2232" } } },
            "then": {
              "allOf": [
                {
                  "properties": {
                    "interrupt_pin": {
                      "$ref": "#/definitions/PIN.INPUT_INTERNAL"
                    },
                    "rts_pin": { "$ref": "#/definitions/PIN.OUTPUT_INTERNAL" },
                    "address": { "type": "string", "default": "21" }
                  },
                  "type": ["object", "null"],
                  "required_": ["interrupt_pin", "rts_pin"]
                },
                { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
                { "$ref": "#/definitions/touchscreen.TOUCHSCREEN_SCHEMA" }
              ]
            }
          }
        ]
      }
    },
    "adalight": {},
    "ads1115": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ads1115" } },
        { "$ref": "#/definitions/ads1115" }
      ],
      "markdownDescription": "The `ads1115` domain creates a global hub so that you can later create individual sensors using the [ADS1115 Sensor Platform](https://esphome.io/components/sensor/ads1115.html#id1). To use this hub, first setup the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) and connect the sensor to the pins specified there.\n\n*See also: [ads1115 Component/Hub](https://esphome.io/components/sensor/ads1115.html#component-hub)*"
    },
    "airthings_ble": {
      "properties": {},
      "type": ["object", "null"],
      "markdownDescription": "The `airthings_wave_plus` and `airthings_wave_mini` sensor platforms lets you track the output of AirThings Bluetooth Low Energy devices.\n\n*See also: [AirThings BLE Sensors](https://esphome.io/components/sensor/airthings_ble.html#airthings-ble-sensors)*"
    },
    "animation": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/animation" } },
        { "$ref": "#/definitions/animation" }
      ]
    },
    "apds9960": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/apds9960" } },
        { "$ref": "#/definitions/apds9960" }
      ],
      "markdownDescription": "The `apds9960` sensor platform allows you to use your APDS9960 RGB and gesture sensors ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Proximity/apds9960.pdf), [SparkFun](https://www.sparkfun.com/products/12787)) with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [apds9960 Component/Hub](https://esphome.io/components/sensor/apds9960.html#component-hub)*"
    },
    "api": {
      "allOf": [
        {
          "properties": {
            "port": {
              "type": "number",
              "default": 6053,
              "markdownDescription": "**int**: The port to run the API Server on. Defaults to `6053`.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "password": {
              "type": "string",
              "default": "",
              "markdownDescription": "**string**: The password to protect the API Server with. Defaults to no password.\n\n\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "reboot_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "15min"
            },
            "services": { "$ref": "#/definitions/api-services" },
            "encryption": { "$ref": "#/definitions/api-encryption" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The ESPHome native API is used to communicate with clients directly, with a highly-optimized network protocol. Currently, only the ESPHome tool and Home Assistant use this native API.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#native-api-component)*"
    },
    "as3935_i2c": {
      "allOf": [
        {
          "properties": {
            "irq_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The IRQ pin, which indicates if a lightning strike has been detected.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "indoor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Indicates if the sensor is used indoor. Defaults to `true`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "noise_level": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "watchdog_threshold": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "spike_rejection": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Helps to differentiate between false events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "lightning_threshold": {
              "enum": [1, 5, 9, 16],
              "markdownDescription": "**int**: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "mask_disturber": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "div_ratio": {
              "enum": [0, 16, 32, 64, 128],
              "markdownDescription": "**int**: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "capacitance": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            },
            "address": {
              "type": "string",
              "default": "3",
              "markdownDescription": "**int**: Manually specify the I\u00b2C address of the sensor. Defaults to `0x03` (`A0` and `A1` pins pulled high). The address is made up using the state of `A0` as bit 1 and the state of `A1` as bit 2, so a total of four addresses is possible.\n\n\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#id1)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["irq_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `as3935_i2c` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close.\n\n*See also: [as3935 Over I\u00b2C](https://esphome.io/components/sensor/as3935.html#over-i2c)*"
    },
    "as3935_spi": {
      "allOf": [
        {
          "properties": {
            "irq_pin": {
              "$ref": "#/definitions/PIN.INPUT_INTERNAL",
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The IRQ pin, which indicates if a lightning strike has been detected.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "indoor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Indicates if the sensor is used indoor. Defaults to `true`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "noise_level": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Noise floor level is compared to known reference voltage. If this level is exceeded the chip will issue an interrupt to the IRQ pin, broadcasting that it can not operate properly due to noise (INT_NH). Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "watchdog_threshold": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Determines the threshold for events that trigger the IRQ pin. Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "spike_rejection": {
              "type": "number",
              "default": 2,
              "markdownDescription": "**int**: Helps to differentiate between false events and actual lightning. Increasing this value increases robustness at the cost of sensitivity to distant events. Defaults to `2`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "lightning_threshold": {
              "enum": [1, 5, 9, 16],
              "markdownDescription": "**int**: The number of lightnings that must appear in a 15-minute time window before a lightning storm is detected. 15 minutes is the window of time before the number of detected lightning events is reset. The number of lightning strikes can be set to 1,5,9, or 16. Defaults to `1`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "mask_disturber": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: This setting will return whether or not disturbers trigger the IRQ Pin. Defaults to `false`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "div_ratio": {
              "enum": [0, 16, 32, 64, 128],
              "markdownDescription": "**int**: The antenna is designed to resonate at 500kHz and so can be tuned with the following setting. The accuracy of the antenna must be within 3.5 percent of that value for proper signal validation and distance estimation. Defaults to `0`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "capacitance": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: This setting will add capacitance to the series RLC antenna on the product to help tune its resonance. The datasheet specifies being within 3.5 percent of 500kHz to get optimal lightning detection and distance sensing. It\u2019s possible to add up to 120pF in steps of 8pF to the antenna. Defaults to `0`.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            },
            "cs_pin": {
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The chip select pin.\n\n\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["irq_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" },
        { "$ref": "#/definitions/spi_bus" }
      ],
      "markdownDescription": "The `as3935_spi` sensor platform allows you to use your AS3935 sensor ([AliExpress](https://de.aliexpress.com/af/as3935.html?SearchText=as3935), [AMS_AS3935](https://ams.com/as3935)) in order to get notified when a thunderstorm is getting close.\n\n*See also: [as3935 Over SPI](https://esphome.io/components/sensor/as3935.html#over-spi)*"
    },
    "async_tcp": { "type": ["null", "object", "string", "array", "number"] },
    "ble_client": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ble_client" } },
        { "$ref": "#/definitions/ble_client" }
      ],
      "markdownDescription": "The `ble_client` component enables connections to Bluetooth Low Energy devices in order to query and control them. This component does not expose any sensors or output components itself, but merely manages connections to them for use by other components.\n\n*See also: [BLE Client](https://esphome.io/components/ble_client.html#ble-client)*"
    },
    "bme680_bsec": {
      "allOf": [
        {
          "properties": {
            "temperature_offset": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 0,
              "markdownDescription": "**float**: Temperature offset if device is in enclosure and reads too high. Defaults to `0`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "iaq_mode": {
              "enum": ["STATIC", "MOBILE"],
              "markdownDescription": "**string**: IAQ calculation mode. Default is `static` for static applications (e.g. fixed indoor devices). Can be `mobile` for mobile applications (e.g. carry-on devices).\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "sample_rate": {
              "enum": ["LP", "ULP"],
              "markdownDescription": "**string**: Sample rate. Default is `lp` for low power consumption, sampling every 3 seconds. Can be `ulp` for ultra low power, sampling every 5 minutes. This controls the sampling rate for gas-dependant sensors and will govern the interval at which the sensor heater is operated. By default this rate will also be used for temperature, pressure and humidity sensors but these can be overridden on a per-sensor level if required.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "state_save_interval": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "6hours",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum interval at which to save calibrated BSEC algorithm state to flash so that calibration doesn\u2019t have to start from zero on device restart. Defaults to `6h`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            },
            "address": {
              "type": "string",
              "default": "118",
              "markdownDescription": "**int**: Manually specify the I^2C address of the sensor. Defaults to `0x76`. Another address can be `0x77`.\n\n\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
            }
          },
          "type": ["object", "null"]
        }
      ],
      "markdownDescription": "The `bme680_bsec` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity and gas sensors with ESPHome via the Bosch Sensortec Environmental Cluster (BSEC) software library. The use of Bosch\u2019s proprietary algorithms provides additional Indoor Air Quality (IAQ), CO2 equivalent and Breath Volatile Organic Compounds (VOC) equivalent measurements.\n\n*See also: [bme680_bsec Component/Hub](https://esphome.io/components/sensor/bme680_bsec.html#component-hub)*"
    },
    "cap1188": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/cap1188" } },
        { "$ref": "#/definitions/cap1188" }
      ],
      "markdownDescription": "The `cap1188` sensor platform allows you to use your CAP1188 ([datasheet](https://cdn-shop.adafruit.com/datasheets/CAP1188.pdf), [Adafruit](https://learn.adafruit.com/adafruit-cap1188-breakout/overview)) Capacitive Touch Sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) bus is required to be set up in your configuration for this sensor to work.\n\n*See also: [cap1188 Component/Hub](https://esphome.io/components/binary_sensor/cap1188.html#component-hub)*"
    },
    "captive_portal": {
      "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA",
      "markdownDescription": "The captive portal component in ESPHome is a fallback mechanism for when connecting to the configured [WiFi](https://esphome.io/components/wifi.html) fails.\n\n*See also: [Captive Portal](https://esphome.io/components/captive_portal.html#captive-portal)*"
    },
    "cd74hc4067": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/cd74hc4067" } },
        { "$ref": "#/definitions/cd74hc4067" }
      ],
      "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The I/O pins connected to the S0 to S3 channel selection pins\n\n*See also: [cd74hc4067 Component/Hub](https://esphome.io/components/sensor/cd74hc4067.html#component-hub)*"
    },
    "color": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/color" } },
        { "$ref": "#/definitions/color" }
      ],
      "markdownDescription": "When using RGB-capable displays in ESPHome you may wish to use custom colors. A `color` component exists for just this purpose:\n\n*See also: [Drawing Static Text](https://esphome.io/components/display/index.html#color)*"
    },
    "custom_component": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/custom_component" }
        },
        { "$ref": "#/definitions/custom_component" }
      ],
      "markdownDescription": "This integration can be used to create generic custom components in ESPHome using the C++ (Arduino) API. This integration should be used in cases where none of ESPHome\u2019s abstraction layers (for example the \u201csensor\u201d, \u201cbinary sensor\u201d, \u201cswitch\u201d, etc concepts) work well for your integration.\n\n*See also: [Generic Custom Component](https://esphome.io/custom/custom_component.html#generic-custom-component)*"
    },
    "dallas": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/dallas" } },
        { "$ref": "#/definitions/dallas" }
      ],
      "markdownDescription": "The `dallas` component allows you to use your [DS18b20](https://www.adafruit.com/product/374) ([datasheet](https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)) and similar 1-Wire temperature sensors.\n\n*See also: [dallas Component/Hub](https://esphome.io/components/sensor/dallas.html#component-hub)*"
    },
    "daly_bms": {
      "$ref": "#/definitions/POLLING_COMPONENT",
      "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Delay between data requests.\n\n*See also: [daly_bms Component/Hub](https://esphome.io/components/sensor/daly_bms.html#component-hub)*"
    },
    "dashboard_import": {
      "properties": {
        "package_import_url": {
          "type": ["null", "object", "string", "array", "number"]
        }
      },
      "type": ["object", "null"],
      "required_": ["package_import_url"]
    },
    "debug": {
      "$ref": "#/definitions/POLLING_COMPONENT",
      "markdownDescription": "The `debug` component can be used to debug problems with ESPHome. At startup, it prints a bunch of useful information like reset reason, free heap size, ESPHome version and so on.\n\n*See also: [Debug Component](https://esphome.io/components/debug.html#debug-component)*"
    },
    "deep_sleep": {
      "allOf": [
        {
          "properties": {
            "run_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "required_": ["default"],
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time duration the node should be active, i.e. run code.Only on ESP32, instead of time, it is possible to specify run duration according to the wakeup reason from deep-sleep:\n  * **default** (**Required**, [Time](https://esphome.io/guides/configuration-types.html#config-time)): default run duration for timer wakeup and any unspecified wakeup reason.\n  \n  * **gpio_wakeup_reason** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): run duration if woken up by GPIO.\n  \n  * **touch_wakeup_reason** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): run duration if woken up by touch.\n  \n  \n\n\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#configuration-variables)*"
            },
            "sleep_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"]
            },
            "wakeup_pin": { "$ref": "#/definitions/PIN.INPUT_INTERNAL" },
            "wakeup_pin_mode": { "properties": {}, "type": ["object", "null"] },
            "esp32_ext1_wakeup": {
              "properties": {
                "pins": {
                  "anyOf": [
                    { "$ref": "#/definitions/PIN.INPUT_INTERNAL" },
                    {
                      "type": "array",
                      "items": { "$ref": "#/definitions/PIN.INPUT_INTERNAL" }
                    }
                  ]
                },
                "mode": { "enum": ["ALL_LOW", "ANY_HIGH"] }
              },
              "type": ["object", "null"],
              "required_": ["pins", "mode"]
            },
            "touch_wakeup": { "type": "boolean" }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `deep_sleep` component can be used to automatically enter a deep sleep mode on the ESP8266/ESP32 after a certain amount of time. This is especially useful with nodes that operate on batteries and therefore need to conserve as much energy as possible.\n\n*See also: [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-component)*"
    },
    "demo": {
      "properties": {
        "binary_sensors": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-binary_sensors[]" },
          "default": [
            { "name": "Demo Basement Floor Wet", "device_class": "moisture" },
            { "name": "Demo Movement Backyard", "device_class": "motion" }
          ]
        },
        "climates": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-climates[]" },
          "default": [
            { "name": "Demo Heatpump", "type": 1 },
            { "name": "Demo HVAC", "type": 2 },
            { "name": "Demo Ecobee", "type": 3 }
          ]
        },
        "covers": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-covers[]" },
          "default": [
            { "name": "Demo Kitchen Window", "type": 1 },
            { "name": "Demo Garage Door", "type": 2, "device_class": "garage" },
            { "name": "Demo Living Room Window", "type": 3 },
            { "name": "Demo Hall Window", "type": 4, "device_class": "window" }
          ]
        },
        "fans": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-fans[]" },
          "default": [
            { "name": "Demo Living Room Fan", "type": 1 },
            { "name": "Demo Ceiling Fan", "type": 2 },
            { "name": "Demo Percentage Limited Fan", "type": 3 },
            { "name": "Demo Percentage Full Fan", "type": 4 }
          ]
        },
        "lights": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-lights[]" },
          "default": [
            { "name": "Demo Binary Light", "type": 1 },
            { "name": "Demo Brightness Light", "type": 2 },
            { "name": "Demo RGB Light", "type": 3 },
            { "name": "Demo RGBW Light", "type": 4 },
            { "name": "Demo RGBWW Light", "type": 5 },
            { "name": "Demo CWWW Light", "type": 6 },
            { "name": "Demo RGBW interlock Light", "type": 7 }
          ]
        },
        "numbers": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-numbers[]" },
          "default": [
            {
              "name": "Demo Number 0-100",
              "type": 1,
              "min_value": 0,
              "max_value": 100,
              "step": 1
            },
            {
              "name": "Demo Number -50-50",
              "type": 2,
              "min_value": -50,
              "max_value": 50,
              "step": 5
            },
            {
              "name": "Demo Number 40-60",
              "type": 3,
              "min_value": 40,
              "max_value": 60,
              "step": 0.2
            }
          ]
        },
        "sensors": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-sensors[]" },
          "default": [
            { "name": "Demo Plain Sensor" },
            {
              "name": "Demo Temperature Sensor",
              "unit_of_measurement": "\u00b0C",
              "icon": "mdi:thermometer",
              "accuracy_decimals": 1,
              "device_class": "temperature",
              "state_class": "measurement"
            },
            {
              "name": "Demo Temperature Sensor",
              "unit_of_measurement": "\u00b0C",
              "icon": "mdi:thermometer",
              "accuracy_decimals": 1,
              "device_class": "temperature",
              "state_class": "measurement"
            },
            {
              "name": "Demo Force Update Sensor",
              "unit_of_measurement": "%",
              "accuracy_decimals": 0,
              "device_class": "humidity",
              "state_class": "measurement",
              "force_update": true
            },
            {
              "name": "Demo Energy Sensor",
              "unit_of_measurement": "Wh",
              "accuracy_decimals": 0,
              "device_class": "energy",
              "state_class": "total_increasing"
            }
          ]
        },
        "switches": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-switches[]" },
          "default": [
            { "name": "Demo Switch 1" },
            {
              "name": "Demo Switch 2",
              "inverted": true,
              "icon": "mdi:bluetooth"
            }
          ]
        },
        "text_sensors": {
          "type": "array",
          "items": { "$ref": "#/definitions/demo-text_sensors[]" },
          "default": [
            { "name": "Demo Text Sensor 1" },
            { "name": "Demo Text Sensor 2", "icon": "mdi:blur" }
          ]
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The `demo` integration can be used for testing to generate sample instances of many different integrations (sensors, lights, \u2026)\n\n*See also: [Demo Integration](https://esphome.io/components/demo.html#demo-integration)*"
    },
    "dfplayer": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/dfplayer" } },
        { "$ref": "#/definitions/dfplayer" }
      ],
      "markdownDescription": "The `dfplayer` ([datasheet](https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299)), component allows you to play sound and music stored in an SD card or USB flash drive.\n\n*See also: [DF-Player mini](https://esphome.io/components/dfplayer.html#df-player-mini)*"
    },
    "dsmr": {
      "properties": {
        "decryption_key": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable), 32 characters, case insensitive**: The key to decrypt the telegrams. Used in Lux only.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "crc_check": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: Specifies if the CRC check must be done. This is required to be set to false for older DSMR versions as they do not provide a CRC. Defaults to `true`.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "gas_mbus_id": {
          "type": "number",
          "default": 1,
          "markdownDescription": "**int**: The id of the gas meter. Defaults to `1`.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "max_telegram_length": {
          "type": "number",
          "default": 1500,
          "markdownDescription": "**integer**: The size of the buffer used for reading DSMR telegrams. Increase if you are reading from a smart meter that sends large telegrams. Defaults to `1500`.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "request_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin that can be used for controlling the P1 port\u2019s Data Request pin. Defaults to not using a Data Request pin. See [Using the P1 Data Request pin](https://esphome.io/components/sensor/dsmr.html#sensor-dsmr-request-pin).\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "request_interval": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "0ms",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The minimum time between two telegram readings. Defaults to `0ms`, meaning that the pace at which the smart meter sends its data determines the update frequency. This works best in combination with a `request_pin`, but this option will work without one too.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "receive_timeout": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "200ms",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The timeout on incoming data while reading a telegram. When no new data arrive within the given timeout, the device will consider the current telegram a loss and starts looking for the header of the next telegram. Defaults to `200ms`.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "uart_id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the DSMR if you have multiple components.\n\n\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The DSMR component connects to Dutch Smart Meters which comply to DSMR (Dutch Smart Meter Requirements), also known as \u2018Slimme meter\u2019 or \u2018P1 port\u2019.\n\n*See also: [dsmr Component/Hub](https://esphome.io/components/sensor/dsmr.html#component-hub)*"
    },
    "e131": {
      "properties": { "method": { "enum": ["UNICAST", "MULTICAST"] } },
      "type": ["object", "null"]
    },
    "esp32": {
      "properties": {
        "board": {
          "type": "string",
          "markdownDescription": "**string**: The PlatformIO board ID that should be used. Choose the appropriate board from [this list](https://registry.platformio.org/packages/platforms/platformio/espressif32/boards) (the icon next to the name can be used to copy the board ID). *This only affects pin aliases, flash size and some internal settings*, if unsure choose a generic board from Espressif such as `esp32dev`.\n\n\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
        },
        "variant": {
          "enum": ["ESP32", "ESP32S2", "ESP32S3", "ESP32C3", "ESP32H2"],
          "markdownDescription": "**boolean**: The variant of the ESP32 that is used on this board. One of `esp32`, `esp32s2`, `esp32s3`, `esp32c3` and `esp32h2`. Defaults to the variant that is detected from the board, if a board that\u2019s unknown to ESPHome is used, this option is mandatory.\n\n\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
        },
        "framework": {
          "allOf": [
            {
              "type": "object",
              "properties": { "type": { "type": "string" } }
            },
            {
              "if": { "properties": { "type": { "const": "esp-idf" } } },
              "then": { "$ref": "#/definitions/esp32-framework-esp-idf" }
            },
            {
              "if": { "properties": { "type": { "const": "arduino" } } },
              "then": { "$ref": "#/definitions/esp32-framework-arduino" }
            }
          ],
          "markdownDescription": "Options for the underlying framework used by ESPHome. See [Arduino framework](https://esphome.io/components/esp32.html#esp32-arduino-framework) and [ESP-IDF framework](https://esphome.io/components/esp32.html#esp32-espidf-framework).\n\n\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["board"],
      "markdownDescription": "This component contains platform-specific options for the ESP32 platform.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#esp32-platform)*"
    },
    "esp32_ble": {
      "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA",
      "markdownDescription": "The `esp32_ble` component in ESPHome sets up the Bluetooth LE stack on the device so that a [BLE Server](https://esphome.io/components/esp32_ble_server.html) can run.\n\n*See also: [BLE Component](https://esphome.io/components/esp32_ble.html#ble-component)*"
    },
    "esp32_ble_beacon": {
      "allOf": [
        {
          "properties": {
            "type": {
              "enum": ["IBEACON"],
              "markdownDescription": "The type of beacon to create, currently only supports `iBeacon`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "uuid": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "The [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) to identify the beacon.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "major": {
              "type": "number",
              "default": 10167,
              "markdownDescription": "**int**: The iBeacon major identifier of this beacon. Usually used to group beacons, for example for grouping all beacons in the same building, but has no effect if the BLE receiver doesn\u2019t use it. Defaults to `10167`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "minor": {
              "type": "number",
              "default": 61958,
              "markdownDescription": "**int**: The iBeacon minor identifier of this beacon. Usually used to identify beacons within an iBeacon group. Defaults to `61958`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["type", "uuid"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_ble_beacon` component creates a Bluetooth Low Energy Beacon with your ESP32 device. Beacons are BLE devices that repeatedly just send out a pre-defined packet of data. This packet can then be received by devices like smartphones and can then be used to track a phone\u2019s location.\n\n*See also: [ESP32 Bluetooth Low Energy Beacon](https://esphome.io/components/esp32_ble_beacon.html#esp32-bluetooth-low-energy-beacon)*"
    },
    "esp32_ble_server": {
      "allOf": [
        {
          "properties": {
            "manufacturer": {
              "type": "string",
              "default": "ESPHome",
              "markdownDescription": "**string**: The name of the manufacturer/firmware creator. Defaults to `ESPHome`.\n\n\n\n*See also: [BLE Server](https://esphome.io/components/esp32_ble_server.html#configuration-variables)*"
            },
            "model": {
              "type": "string",
              "markdownDescription": "**string**: The model name of the device. Defaults to the friendly name of the `board` chosen in the [core configuration](https://esphome.io/components/esphome.html#esphome-configuration-variables).\n\n\n\n*See also: [BLE Server](https://esphome.io/components/esp32_ble_server.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_ble_server` component in ESPHome sets up a simple BLE GATT server that exposes the device name, manufacturer and board. This component allows other components to create their own services to expose data and control.\n\n*See also: [BLE Server](https://esphome.io/components/esp32_ble_server.html#ble-server)*"
    },
    "esp32_ble_tracker": {
      "allOf": [
        {
          "properties": {
            "scan_parameters": {
              "properties": {
                "duration": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "5min",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each complete scan. This has no real impact on the device but can be used to debug the BLE stack. Defaults to `5min`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "interval": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "320ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval between each consecutive scan window. This is the time the ESP spends on each of the 3 BLE advertising channels. Defaults to `320ms`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "window": {
                  "properties": {
                    "days": { "type": "number" },
                    "hours": { "type": "number" },
                    "minutes": { "type": "number" },
                    "seconds": { "type": "number" },
                    "milliseconds": { "type": "number" },
                    "microseconds": { "type": "number" }
                  },
                  "type": ["object", "null"],
                  "default": "30ms",
                  "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time the ESP is actively listening for packets on a channel during each scan interval. If this is close to the `interval` value, the ESP will spend more time listening to packets (but also consume more power). Defaults to `30ms`\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                },
                "active": {
                  "type": "boolean",
                  "default": true,
                  "markdownDescription": "**boolean**: Whether to actively send scan requests to request more data after having received an advertising packet. With some devices this is necessary to receive all data, but also drains those devices\u2019 power a (tiny) bit more. Defaults to `true`.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
                }
              },
              "type": ["object", "null"],
              "default": {},
              "markdownDescription": "Advanced parameters for configuring the scan behavior of the ESP32. See also [this guide by Texas Instruments](https://dev.ti.com/tirex/explore/content/simplelink_academy_cc2640r2sdk_5_10_02_00/modules/blestack/ble_scan_adv_basic/ble_scan_adv_basic.html#scanning-basics) for reference.\n  * **interval** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The interval between each consecutive scan window. This is the time the ESP spends on each of the 3 BLE advertising channels. Defaults to `320ms`.\n  \n  * **window** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The time the ESP is actively listening for packets on a channel during each scan interval. If this is close to the `interval` value, the ESP will spend more time listening to packets (but also consume more power). Defaults to `30ms`\n  \n  * **duration** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The duration of each complete scan. This has no real impact on the device but can be used to debug the BLE stack. Defaults to `5min`.\n  \n  * **active** (*Optional*, boolean): Whether to actively send scan requests to request more data after having received an advertising packet. With some devices this is necessary to receive all data, but also drains those devices\u2019 power a (tiny) bit more. Defaults to `true`.\n  \n  \n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising is received. See [on_ble_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_service_data_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_service_data_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising with service data is received. See [on_ble_service_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-service-data-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "on_ble_manufacturer_data_advertise": {
              "$ref": "#/definitions/esp32_ble_tracker-on_ble_manufacturer_data_advertise",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a Bluetooth advertising with manufacturer data is received. See [on_ble_manufacturer_data_advertise](https://esphome.io/components/esp32_ble_tracker.html#esp32-ble-tracker-on-ble-manufacturer-data-advertise).\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this ESP32 BLE Hub.\n\n\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_ble_tracker` component creates a global hub so that you can track bluetooth low energy devices using your ESP32 node.\n\n*See also: [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html#esp32-bluetooth-low-energy-tracker-hub)*"
    },
    "esp32_camera": {
      "allOf": [
        { "$ref": "#/definitions/CONFIG.ENTITY_BASE_SCHEMA" },
        {
          "properties": {
            "data_pins": {
              "type": "array",
              "items": { "$ref": "#/definitions/esp32_camera-data_pins[]" }
            },
            "vsync_pin": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "href_pin": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "pixel_clock_pin": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "external_clock": {
              "$ref": "#/definitions/esp32_camera-external_clock"
            },
            "i2c_pins": { "$ref": "#/definitions/esp32_camera-i2c_pins" },
            "reset_pin": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "power_down_pin": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "resolution": {
              "enum": [
                "160X120",
                "QQVGA",
                "176X144",
                "QCIF",
                "240X176",
                "HQVGA",
                "320X240",
                "QVGA",
                "400X296",
                "CIF",
                "640X480",
                "VGA",
                "800X600",
                "SVGA",
                "1024X768",
                "XGA",
                "1280X1024",
                "SXGA",
                "1600X1200",
                "UXGA"
              ]
            },
            "jpeg_quality": { "type": "number", "default": 10 },
            "contrast": { "type": "number", "default": 0 },
            "brightness": { "type": "number", "default": 0 },
            "saturation": { "type": "number", "default": 0 },
            "vertical_flip": { "type": "boolean", "default": true },
            "horizontal_mirror": { "type": "boolean", "default": true },
            "special_effect": {
              "enum": [
                "NONE",
                "NEGATIVE",
                "GRAYSCALE",
                "RED_TINT",
                "GREEN_TINT",
                "BLUE_TINT",
                "SEPIA"
              ]
            },
            "agc_mode": { "enum": ["MANUAL", "AUTO"] },
            "aec2": { "type": "boolean", "default": false },
            "ae_level": { "type": "number", "default": 0 },
            "aec_value": { "type": "number", "default": 300 },
            "aec_mode": { "enum": ["MANUAL", "AUTO"] },
            "agc_value": { "type": "number", "default": 0 },
            "agc_gain_ceiling": {
              "enum": ["2X", "4X", "8X", "16X", "32X", "64X", "128X"]
            },
            "wb_mode": {
              "enum": ["AUTO", "SUNNY", "CLOUDY", "OFFICE", "HOME"]
            },
            "test_pattern": { "type": "boolean", "default": false },
            "max_framerate": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "10 fps"
            },
            "idle_framerate": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.1 fps"
            },
            "name": {
              "markdownDescription": "**string**: The name of the camera.\n\n\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": [
            "data_pins",
            "vsync_pin",
            "href_pin",
            "pixel_clock_pin",
            "external_clock",
            "i2c_pins"
          ]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_camera` component allows you to use ESP32-based camera boards in ESPHome that directly integrate into Home Assistant through the native API.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#esp32-camera-component)*"
    },
    "esp32_camera_web_server": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/esp32_camera_web_server" }
        },
        { "$ref": "#/definitions/esp32_camera_web_server" }
      ],
      "markdownDescription": "The `esp32_camera_web_server` component allows you to use expose web server of ESP32-based camera boards in ESPHome that directly can be integrated into external surveillance or PVR software.\n\n*See also: [ESP32 Camera Web Server Component](https://esphome.io/components/esp32_camera_web_server.html#esp32-camera-web-server-component)*"
    },
    "esp32_improv": {
      "allOf": [
        {
          "properties": {
            "identify_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "10s"
            },
            "authorized_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "1min"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_improv` component in ESPHome implements the open [Improv standard](https://www.improv-wifi.com/) for configuring Wi-Fi on an ESP32 device by using Bluetooth Low Energy to receive the credentials.\n\n*See also: [Improv via BLE](https://esphome.io/components/esp32_improv.html#improv-via-ble)*"
    },
    "esp32_touch": {
      "allOf": [
        {
          "properties": {
            "setup_mode": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether debug messages with the touch pad value should be displayed in the logs. Useful for finding out suitable thresholds for the binary sensors, but spam the logs. See [setting up touch pads](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor) for more information. Defaults to false.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "iir_filter": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "0ms",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Optionally set up an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter should be applied to all touch pads. This can increase the accuracy of the touch pads a lot, but higher values decrease the response time. A good value to start with is `10ms`. Default is no IIR filter.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "sleep_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "27306us",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set a time period denoting the amount of time the touch peripheral should sleep between measurements. This can decrease power usage but make the sensor slower. Default is about 27 milliseconds.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "measurement_duration": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "8192us",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set the conversion time for all touch pads. A longer conversion time means that more charge/discharge cycles of the touch pad can be performed, therefore increasing accuracy. Default is about 8ms, the maximum amount.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "low_voltage_reference": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0.5V",
              "markdownDescription": "The low voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `0.5V`, `0.6V`, `0.7V`, `0.8V`. Default is `0.5V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "high_voltage_reference": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "2.7V",
              "markdownDescription": "The high voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `2.4V`, `2.5V`, `2.6V`, `2.7V`. Default is `2.7V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "voltage_attenuation": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "0V",
              "markdownDescription": "The voltage attenuation to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `1.5V`, `1V`, `0.5V`, `0V`. Default is `0V`.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `esp32_touch` component creates a global hub for detecting touches on the eight touch pads of the ESP32 as [binary sensors](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor).\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#component-hub)*"
    },
    "esp8266": {
      "properties": {
        "board": {
          "type": "string",
          "markdownDescription": "**string**: The PlatformIO board ID that should be used. Choose the appropriate board from [this list](https://registry.platformio.org/platforms/platformio/espressif8266/boards) (the icon next to the name can be used to copy the board ID). *This only affects pin aliases, flash size and some internal settings*, if unsure choose a generic board from Espressif such as `esp01_1m`.\n\n\n\n*See also: [ESP8266 Platform](https://esphome.io/components/esp8266.html#configuration-variables)*"
        },
        "framework": {
          "properties": {
            "version": {
              "type": "string",
              "default": "recommended",
              "markdownDescription": "**string**: The base framework version number to use, from [esp8266 arduino releases](https://github.com/esp8266/Arduino/releases). Defaults to `recommended`. Additional values\n  * `dev`: Use the latest commit from [https://github.com/esp8266/Arduino](https://github.com/esp8266/Arduino), note this may break at any time\n  \n  * `latest`: Use the latest *release* from [https://github.com/esp8266/Arduino/releases](https://github.com/esp8266/Arduino/releases), even if it hasn\u2019t been recommended yet.\n  \n  * `recommended`: Use the recommended framework version.\n  \n  \n\n\n\n*See also: [ESP8266 Platform](https://esphome.io/components/esp8266.html#configuration-variables)*"
            },
            "source": { "type": "string" },
            "platform_version": {
              "type": ["null", "object", "string", "array", "number"]
            }
          },
          "type": ["object", "null"],
          "default": {},
          "markdownDescription": "Options for the underlying framework used by ESPHome.\n  * **version** (*Optional*, string): The base framework version number to use, from [esp8266 arduino releases](https://github.com/esp8266/Arduino/releases). Defaults to `recommended`. Additional values\n    * `dev`: Use the latest commit from [https://github.com/esp8266/Arduino](https://github.com/esp8266/Arduino), note this may break at any time\n    \n    * `latest`: Use the latest *release* from [https://github.com/esp8266/Arduino/releases](https://github.com/esp8266/Arduino/releases), even if it hasn\u2019t been recommended yet.\n    \n    * `recommended`: Use the recommended framework version.\n    \n    \n  \n  * **source** (*Optional*, string): The PlatformIO package or repository to use for the framework. This can be used to use a custom or patched version of the framework.\n  \n  * **platform_version** (*Optional*, string): The version of the [platformio/espressif8266](https://github.com/platformio/platform-espressif8266/releases/) package to use.\n  \n  \n\n\n\n*See also: [ESP8266 Platform](https://esphome.io/components/esp8266.html#configuration-variables)*"
        },
        "restore_from_flash": { "type": "boolean", "default": false },
        "board_flash_mode": { "enum": ["qio", "qout", "dio", "dout"] }
      },
      "type": ["object", "null"],
      "required_": ["board"],
      "markdownDescription": "This component contains platform-specific options for the ESP8266 platform.\n\n*See also: [ESP8266 Platform](https://esphome.io/components/esp8266.html#esp8266-platform)*"
    },
    "ethernet": {
      "allOf": [
        {
          "properties": {
            "type": {
              "enum": ["LAN8720", "TLK110"],
              "markdownDescription": "**string**: The type of LAN chipset. Must be one of `LAN8720` or `TLK110` (see datasheet for more details).\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "mdc_pin": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The MDC pin of the board. Usually this is `GPIO23`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "mdio_pin": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The MDIO pin of the board. Usually this is `GPIO18`.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "clk_mode": {
              "enum": ["GPIO0_IN", "GPIO0_OUT", "GPIO16_OUT", "GPIO17_OUT"],
              "markdownDescription": "**string**: The clock mode of the data lines, this must be one of these values: (see datasheet of your board for more details)\n  * `GPIO0_IN` (Default) - External clock\n  \n  * `GPIO0_OUT` - Internal clock\n  \n  * `GPIO16_OUT` - Internal clock\n  \n  * `GPIO17_OUT` - Internal clock\n  \n  \n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "phy_addr": {
              "type": "number",
              "default": 0,
              "markdownDescription": "**int**: The PHY addr type of the ethernet controller. Defaults to 0.\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "power_pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The pin with which to control the power of the board. Leave unspecified for no power pin (default)\n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "manual_ip": {
              "$ref": "#/definitions/ethernet-manual_ip",
              "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use.\n  \n  \n\n\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#configuration-variables)*"
            },
            "domain": {
              "type": ["null", "object", "string", "array", "number"],
              "default": ".local"
            },
            "use_address": { "type": "string" }
          },
          "type": ["object", "null"],
          "required_": ["type", "mdc_pin", "mdio_pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "This core ESPHome component sets up ethernet connections for ESP32s. Ethernet for ESP8266 is not supported.\n\n*See also: [Ethernet Component](https://esphome.io/components/ethernet.html#ethernet-component)*"
    },
    "exposure_notifications": {
      "properties": {
        "on_exposure_notification": {
          "$ref": "#/definitions/simple_automation",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to run when an exposure notification bluetooth message is received.A variable `x` of type [exposure_notifications::ExposureNotification](https://esphome.io/api/structesphome_1_1exposure__notifications_1_1_exposure_notification.html) is passed to the automation.\n\n\n\n*See also: [Exposure Notification Listener](https://esphome.io/components/exposure_notifications.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["on_exposure_notification"],
      "markdownDescription": "The `exposure_notifications` component uses the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html) to discover nearby COVID-19 exposure notification bluetooth messages sent by phones running the [Google/Apple Exposure Notification service](https://www.google.com/covid19/exposurenotifications/).\n\n*See also: [Exposure Notification Listener](https://esphome.io/components/exposure_notifications.html#exposure-notification-listener)*"
    },
    "external_components": {
      "anyOf": [
        { "$ref": "#/definitions/external_components" },
        {
          "type": "array",
          "items": { "$ref": "#/definitions/external_components" }
        }
      ],
      "markdownDescription": "You can easily import community or personal components using the external components feature. Bundled components can be overridden using this feature.\n\n*See also: [External Components](https://esphome.io/components/external_components.html#external-components)*"
    },
    "fingerprint_grow": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/fingerprint_grow" }
        },
        { "$ref": "#/definitions/fingerprint_grow" }
      ],
      "markdownDescription": "The reader can be powered by the 3.3V output of an NodeMCU. As the communication with the reader is done using UART (default baud rate is 57600), you need to have an [UART bus](https://esphome.io/components/uart.html#uart) in your configuration with the `rx_pin` connected to the reader\u2019s `TX` and the `tx_pin` connected to the reader\u2019s `RX`.\n\n*See also: [fingerprint_grow Component/Hub](https://esphome.io/components/fingerprint_grow.html#component-hub)*"
    },
    "font": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/font" } },
        { "$ref": "#/definitions/font" }
      ],
      "markdownDescription": "The rendering engine also has a powerful font drawer which integrates seamlessly into ESPHome. Whereas in most Arduino display projects you have to use one of a few pre-defined fonts in very specific sizes, with ESPHome you have the option to use **any** TrueType (`.ttf`) font file at **any** size! Granted the reason for it is actually not having to worry about the licensing of font files :)\n\n*See also: [Display Component](https://esphome.io/components/display/index.html#drawing-static-text)*"
    },
    "globals": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/globals" } },
        { "$ref": "#/definitions/globals" }
      ],
      "markdownDescription": "In some cases you might require to share a global variable across multiple lambdas. For example, global variables can be used to store the state of a garage door.\n\n*See also: [Automations and Templates](https://esphome.io/guides/automations.html#global-variables)*"
    },
    "gps": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/gps" } },
        { "$ref": "#/definitions/gps" }
      ],
      "markdownDescription": "The `gps` component allows you to connect GPS modules to your ESPHome project. Any GPS module that uses the standardized NMEA communication protocol will work.\n\n*See also: [GPS Component](https://esphome.io/components/gps.html#gps-component)*"
    },
    "graph": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/graph" } },
        { "$ref": "#/definitions/graph" }
      ]
    },
    "http_request": {
      "allOf": [
        {
          "properties": {
            "useragent": {
              "type": "string",
              "default": "ESPHome",
              "markdownDescription": "**string**: User-Agent header for requests. Defaults to `ESPHome`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            },
            "follow_redirects": { "type": "boolean", "default": true },
            "redirect_limit": { "type": "number", "default": 3 },
            "timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "5s",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Timeout for request. Defaults to `5s`.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            },
            "esp8266_disable_ssl_support": {
              "type": "boolean",
              "markdownDescription": "**boolean**: Whether to include SSL support on ESP8266s. Defaults to `no`. See [esp8266_disable_ssl_support](https://esphome.io/components/http_request.html#esphome-esp8266-disable-ssl-support) for more info\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `http_request` component lets you make HTTP/HTTPS requests. First, you need to setup a component:\n\n*See also: [HTTP Request](https://esphome.io/components/http_request.html#http-request)*"
    },
    "i2c": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/i2c" } },
        { "$ref": "#/definitions/i2c" }
      ],
      "markdownDescription": "This component sets up the I\u00b2C bus for your ESP32 or ESP8266. In order for these components to work correctly, you need to define the I\u00b2C bus in your configuration. Please note the ESP will enable its internal 10k\u2126 pullup resistors for these pins, so you usually don\u2019t need to put on external ones. You can use multiple devices on one I\u00b2C bus as each device is given a unique address for communicating between it and the ESP. You can do this by hopping wires from the two lines (SDA and SCL) from each device board to the next device board or by connecting the wires from each device back to the two I\u00b2C pins on the ESP.\n\n*See also: [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c-bus)*"
    },
    "image": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/image" } },
        { "$ref": "#/definitions/image" }
      ]
    },
    "improv_serial": {
      "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA",
      "markdownDescription": "The `improv_serial` component in ESPHome implements the open [Improv standard](https://www.improv-wifi.com/) for configuring Wi-Fi on an ESPHome device by using a serial connection to the device, eg. USB.\n\n*See also: [Improv via Serial](https://esphome.io/components/improv_serial.html#improv-via-serial)*"
    },
    "interval": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/interval" } },
        { "$ref": "#/definitions/interval" }
      ]
    },
    "json": {},
    "logger": {
      "allOf": [
        {
          "properties": {
            "baud_rate": {
              "type": "number",
              "default": 115200,
              "markdownDescription": "**int**: The baud rate to use for the serial UART port. Defaults to `115200`. Set to `0` to disable logging via UART.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "tx_buffer_size": {
              "type": ["null", "object", "string", "array", "number"],
              "default": 512,
              "markdownDescription": "**int**: The size of the buffer used for log messages. Decrease this if you\u2019re having memory problems. Defaults to `512`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "deassert_rts_dtr": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Deasserts RTS/DTR when opening log over UART. This is useful if RTS/DTR signals are directly connected to the reset pin or strapping pins. Note: Deassert typically means high on TTL level since RTS/DTR are usually low active signals. Defaults to `false`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "hardware_uart": {
              "type": ["null", "object", "string", "array", "number"],
              "default": "UART0",
              "markdownDescription": "**string**: The Hardware UART to use for logging. Defaults to `UART0`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "level": {
              "enum": [
                "NONE",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "VERBOSE",
                "VERY_VERBOSE"
              ],
              "markdownDescription": "**string**: The global log level. Any log message with a lower severity will not be shown. Defaults to `DEBUG`.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "logs": {
              "$ref": "#/definitions/logger-logs",
              "markdownDescription": "**mapping**: Manually set the log level for a specific component or tag. See [Manual Log Levels for more information](https://esphome.io/components/logger.html#logger-manual-tag-specific-levels).\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "on_message": {
              "$ref": "#/definitions/logger-on_message",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a message is to be logged. The variables `int level`, `const char* tag` and `const char* message` are available for lambda processing.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "esp8266_store_log_strings_in_flash": {
              "type": "boolean",
              "markdownDescription": "**boolean**: If set to false, disables storing log strings in the flash section of the device (uses more memory). Defaults to true.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The logger component automatically logs all log messages through the serial port and through MQTT topics. By default, all logs with a severity higher than `DEBUG` will be shown. Decreasing the log level can help with the performance of the application and memory size.\n\n*See also: [Logger Component](https://esphome.io/components/logger.html#logger-component)*"
    },
    "mcp23008": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23008" } },
        { "$ref": "#/definitions/mcp23008" }
      ]
    },
    "mcp23016": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23016" } },
        { "$ref": "#/definitions/mcp23016" }
      ]
    },
    "mcp23017": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23017" } },
        { "$ref": "#/definitions/mcp23017" }
      ]
    },
    "mcp23s08": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23s08" } },
        { "$ref": "#/definitions/mcp23s08" }
      ]
    },
    "mcp23s17": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp23s17" } },
        { "$ref": "#/definitions/mcp23s17" }
      ]
    },
    "mcp3008": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/spi_bus" } },
        { "$ref": "#/definitions/spi_bus" }
      ],
      "markdownDescription": "The MCP3008 component allows you to use MCP3008 8-Channel 10-Bit A/D Converter ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/21295d.pdf), [Adafruit](https://www.adafruit.com/product/856)) in ESPHome. It uses the [SPI Bus](https://esphome.io/components/spi.html#spi) for communication.\n\n*See also: [mcp3008 Component/Hub](https://esphome.io/components/sensor/mcp3008.html#component-hub)*"
    },
    "mcp3204": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mcp3204" } },
        { "$ref": "#/definitions/mcp3204" }
      ],
      "markdownDescription": "The MCP3204 component allows you to use MCP3204 4-Channel 12-Bit A/D Converter ([datasheet](https://ww1.microchip.com/downloads/en/DeviceDoc/21298e.pdf)) in ESPHome. It uses the [SPI Bus](https://esphome.io/components/spi.html#spi) for communication.\n\n*See also: [mcp3204 Component/Hub](https://esphome.io/components/sensor/mcp3204.html#component-hub)*"
    },
    "mdns": {
      "properties": {
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: Set to true to disable mDNS usage. Defaults to false.\n\n\n\n*See also: [mDNS Component](https://esphome.io/components/mdns.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "The `mdns` component makes the node announce itself on the local network using the multicast DNS (mDNS) protocol.\n\n*See also: [mDNS Component](https://esphome.io/components/mdns.html#mdns-component)*"
    },
    "modbus": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/modbus" } },
        { "$ref": "#/definitions/modbus" }
      ],
      "markdownDescription": "The Modbus protocol is used by many consumer and industrial devices for communication. This component allows components in ESPHome to communicate to those devices. Modbus requires a [UART Bus](https://esphome.io/components/uart.html#uart) to communicate.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#modbus-component)*"
    },
    "modbus_controller": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/modbus_controller" }
        },
        { "$ref": "#/definitions/modbus_controller" }
      ],
      "markdownDescription": "The `modbus_controller` component creates a RS485 connection to control a modbus device\n\n*See also: [Modbus Controller](https://esphome.io/components/modbus_controller.html#modbus-controller)*"
    },
    "mpr121": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/mpr121" } },
        { "$ref": "#/definitions/mpr121" }
      ],
      "markdownDescription": "The `mpr121` sensor platform allows you to use your MPR121 ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial.pdf), [Adafruit](https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/overview)) Capacitive Touch Sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [mpr121 Component/Hub](https://esphome.io/components/binary_sensor/mpr121.html#component-hub)*"
    },
    "mqtt": {
      "properties": {
        "broker": {
          "type": "string",
          "markdownDescription": "**string**: The host of your MQTT broker.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "port": {
          "type": "number",
          "default": 1883,
          "markdownDescription": "**int**: The port to connect to. Defaults to 1883.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "username": {
          "type": "string",
          "default": "",
          "markdownDescription": "**string**: The username to use for authentication. Empty (the default) means no authentication.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "password": {
          "type": "string",
          "default": "",
          "markdownDescription": "**string**: The password to use for authentication. Empty (the default) means no authentication.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "client_id": {
          "type": "string",
          "markdownDescription": "**string**: The client id to use for opening connections. See [Defaults](https://esphome.io/components/mqtt.html#mqtt-defaults) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: If Home Assistant automatic discovery should be enabled. Defaults to `true`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery_retain": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: Whether to retain MQTT discovery messages so that entities are added automatically on Home Assistant restart. Defaults to `true`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery_prefix": {
          "type": "string",
          "default": "homeassistant",
          "markdownDescription": "**string**: The prefix to use for Home Assistant\u2019s MQTT discovery. Should not contain trailing slash. Defaults to `homeassistant`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "discovery_unique_id_generator": {
          "enum": ["legacy", "mac"],
          "markdownDescription": "**string**: The unique_id generator to use. Can be one of `legacy` or `mac`. Defaults to `legacy`, which generates unique_id in format `ESP<component_type><default_object_id>`. `mac` generator uses format `<mac_address>-<component_type>-<fnv1_hash(friendly_name)>`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "use_abbreviations": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**boolean**: Whether to use [Abbreviations](https://www.home-assistant.io/docs/mqtt/discovery/) in discovery messages. Defaults to `true`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "birth_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"],
              "required_": ["topic"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when a connection to the broker is established. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "will_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"],
              "required_": ["topic"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when the MQTT connection is dropped. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "shutdown_message": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "payload": { "type": "string" }
              },
              "type": ["object", "null"],
              "required_": ["topic"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The message to send when the node shuts down and the connection is closed cleanly. See [Last Will And Birth Messages](https://esphome.io/components/mqtt.html#mqtt-last-will-birth) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "topic_prefix": {
          "type": "string",
          "markdownDescription": "**string**: The prefix used for all MQTT messages. Should not contain trailing slash. Defaults to `<APP_NAME>`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "log_topic": {
          "allOf": [
            {
              "properties": {
                "topic": { "type": "string" },
                "qos": {
                  "type": ["null", "object", "string", "array", "number"],
                  "default": 0
                },
                "retain": { "type": "boolean", "default": true },
                "level": {
                  "enum": [
                    "NONE",
                    "ERROR",
                    "WARN",
                    "INFO",
                    "DEBUG",
                    "VERBOSE",
                    "VERY_VERBOSE"
                  ]
                }
              },
              "type": ["object", "null"],
              "required_": ["topic"]
            }
          ],
          "markdownDescription": "**[MQTTMessage](https://esphome.io/components/mqtt.html#mqtt-message)**: The topic to send MQTT log messages to.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "ssl_fingerprints": {
          "anyOf": [
            { "$ref": "#/definitions/mqtt-ssl_fingerprints" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/mqtt-ssl_fingerprints" }
            }
          ],
          "markdownDescription": "**list**: Only on ESP8266. A list of SHA1 hashes used for verifying SSL connections. See [SSL Fingerprints](https://esphome.io/components/mqtt.html#mqtt-ssl-fingerprints) for more information.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "keepalive": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15s",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The time to keep the MQTT socket alive, decreasing this can help with overall stability due to more WiFi traffic with more pings. Defaults to 15 seconds.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "reboot_timeout": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15min",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no MQTT connection exists. Can be disabled by setting this to `0s`. Defaults to `15min`.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "on_message": {
          "$ref": "#/definitions/mqtt-on_message",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a message on a specific MQTT topic is received. See [on_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-message).\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "on_json_message": {
          "$ref": "#/definitions/mqtt-on_json_message",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a JSON message on a specific MQTT topic is received. See [on_json_message Trigger](https://esphome.io/components/mqtt.html#mqtt-on-json-message).\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["broker"],
      "markdownDescription": "The MQTT Client Component sets up the MQTT connection to your broker. If you are connecting to Home Assistant, you may prefer to use the native API, in which case this is not needed.\n\n*See also: [MQTT Client Component](https://esphome.io/components/mqtt.html#mqtt-client-component)*"
    },
    "my9231": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/my9231" } },
        { "$ref": "#/definitions/my9231" }
      ],
      "markdownDescription": "The MY9231/MY9291 component represents a MY9231/MY9291 LED diver chain ([MY9231 description](http://www.my-semi.com.tw/file/MY9231_BF_0.91.pdf), [MY9291 description](http://www.my-semi.com.tw/file/MY9291_BF_0.91.pdf)) in ESPHome. Communication is done with two GPIO pins (DI and DCKI) and multiple driver chips can be chained. There are two models with different number of output channels (MY9291 with 4 channels and MY9231 with 3 channels). They are popular driver chips used in smart light bulbs:\n\n*See also: [my9231 Component/Hub](https://esphome.io/components/output/my9231.html#component-hub)*"
    },
    "network": {
      "properties": { "enable_ipv6": { "type": "boolean" } },
      "type": ["object", "null"]
    },
    "ota": {
      "allOf": [
        {
          "properties": {
            "safe_mode": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "**boolean**: Whether to enable safe mode. Defaults to `true`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "port": {
              "type": "number",
              "markdownDescription": "**int**: The port to use for OTA updates. Defaults to `3232` for the ESP32 and `8266` for the ESP8266.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "password": {
              "type": "string",
              "markdownDescription": "**string**: The password to use for updates.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "reboot_timeout": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "5min",
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when in safe mode. Defaults to `5min`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "num_attempts": {
              "type": "number",
              "default": "10",
              "markdownDescription": "**int**: The number of attempts to wait before entering safe mode. Defaults to `10`.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "on_state_change": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an OTA update state change happens. See [on_state_change](https://esphome.io/components/ota.html#ota-on-state-change).\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "on_begin": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when an OTA update is started. See [on_begin](https://esphome.io/components/ota.html#ota-on-begin).\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "on_error": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed after a failed OTA update. See [on_error](https://esphome.io/components/ota.html#ota-on-error).\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "on_progress": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed (multiple times) during an OTA update. See [on_progress](https://esphome.io/components/ota.html#ota-on-progress).\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "on_end": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed after a successful OTA update. See [on_end](https://esphome.io/components/ota.html#ota-on-end).\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "With the OTA (Over The Air) update component you can upload your firmware binaries to your node without having to use a USB cable for uploads. ESPHome natively supports this through its `run` and `upload` helper scripts.\n\n*See also: [OTA Update Component](https://esphome.io/components/ota.html#ota-update-component)*"
    },
    "packages": {
      "properties": {
        "<class 'str'>": {
          "properties": {
            "url": { "type": ["null", "object", "string", "array", "number"] },
            "username": { "type": "string" },
            "password": { "type": "string" },
            "file": { "type": ["null", "object", "string", "array", "number"] },
            "files": {
              "anyOf": [
                { "$ref": "#/definitions/packages-<class 'str'>-files" },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/packages-<class 'str'>-files"
                  }
                }
              ]
            },
            "ref": { "type": ["null", "object", "string", "array", "number"] },
            "refresh": {
              "$ref": "#/definitions/external_components-components"
            }
          },
          "type": ["object", "null"],
          "required_": ["url"]
        }
      },
      "type": ["object", "null"]
    },
    "pca9685": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pca9685" } },
        { "$ref": "#/definitions/pca9685" }
      ],
      "markdownDescription": "The PCA9685 component represents a PCA9685 12-bit PWM driver ([datasheet](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/ledc.html#configure-channel), [adafruit](https://www.adafruit.com/product/815)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [pca9685 Component/Hub](https://esphome.io/components/output/pca9685.html#component-hub)*"
    },
    "pcf8574": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pcf8574" } },
        { "$ref": "#/definitions/pcf8574" }
      ],
      "markdownDescription": "The PCF8574 component allows you to use PCF8574 or PCF8575 I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/pcf8574.pdf), [SparkFun](https://www.sparkfun.com/products/retired/8130)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [PCF8574 I/O Expander](https://esphome.io/components/pcf8574.html#pcf8574-i-o-expander)*"
    },
    "pipsolar": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/POLLING_COMPONENT" }
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ],
      "markdownDescription": "The PipSolar component allows you to integrate PIP-compatible Inverters in ESPHome. It uses [UART](https://esphome.io/components/uart.html#uart) for communication.\n\n*See also: [PipSolar PV Inverter](https://esphome.io/components/pipsolar.html#pipsolar-pv-inverter)*"
    },
    "pn532": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pn532" } },
        { "$ref": "#/definitions/pn532" }
      ],
      "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) or [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Component/Hub](https://esphome.io/components/binary_sensor/pn532.html#component-hub)*"
    },
    "pn532_i2c": {
      "allOf": [
        {
          "properties": {
            "on_tag": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#pn532-on-tag).\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "on_finished_write": { "$ref": "#/definitions/simple_automation" },
            "on_tag_removed": { "$ref": "#/definitions/simple_automation" },
            "address": { "type": "string", "default": "36" },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The duration of each scan on the PN532. This affects the duration that the individual binary sensors stay active when they\u2019re found. If a device is not found within this time window, it will be marked as not present. Defaults to 1s.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "i2c_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [I\u00b2C Component](https://esphome.io/components/i2c.html#i2c) if you want to use multiple I\u00b2C buses.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#id1)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ],
      "markdownDescription": "The `pn532` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Over I\u00b2C](https://esphome.io/components/binary_sensor/pn532.html#over-i2c)*"
    },
    "pn532_spi": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/pn532_spi" } },
        { "$ref": "#/definitions/pn532_spi" }
      ],
      "markdownDescription": "The `pn532_spi` component allows you to use PN532 NFC/RFID controllers ([datasheet](https://cdn-shop.adafruit.com/datasheets/pn532ds.pdf), [Adafruit](https://www.adafruit.com/product/364)) with ESPHome. This component is a global hub that establishes the connection to the PN532 via [SPI](https://esphome.io/components/spi.html#spi) and outputs its data. Using the [PN532 binary sensors](https://esphome.io/components/binary_sensor/pn532.html#pn532-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the PN532.\n\n*See also: [pn532 Over SPI](https://esphome.io/components/binary_sensor/pn532.html#over-spi)*"
    },
    "power_supply": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/power_supply" } },
        { "$ref": "#/definitions/power_supply" }
      ],
      "markdownDescription": "The `power_supply` component allows you to have a high power mode for certain outputs. For example, if you\u2019re using an [ATX power supply](https://en.wikipedia.org/wiki/ATX) to power your LED strips, you usually don\u2019t want to have the power supply on all the time while the output is not on. The power supply component can be attached to any [Output Component](https://esphome.io/components/output/index.html#output) and will automatically switch on if any of the outputs are on. Furthermore, it also has a cooldown time that keeps the power supply on for a while after the last output has been disabled.\n\n*See also: [Power Supply Component](https://esphome.io/components/power_supply.html#power-supply-component)*"
    },
    "preferences": {
      "allOf": [
        {
          "properties": {
            "flash_write_interval": {
              "properties": {
                "days": { "type": "number" },
                "hours": { "type": "number" },
                "minutes": { "type": "number" },
                "seconds": { "type": "number" },
                "milliseconds": { "type": "number" },
                "microseconds": { "type": "number" }
              },
              "type": ["object", "null"],
              "default": "60s"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ]
    },
    "prometheus": {
      "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA",
      "markdownDescription": "The `prometheus` component enables an HTTP endpoint for the [Web Server Component](https://esphome.io/components/web_server.html) in order to integrate a [Prometheus](https://prometheus.io/) installation.\n\n*See also: [Prometheus Component](https://esphome.io/components/prometheus.html#prometheus-component)*"
    },
    "psram": { "properties": {}, "type": ["object", "null"] },
    "qr_code": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/qr_code" } },
        { "$ref": "#/definitions/qr_code" }
      ]
    },
    "rc522_i2c": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rc522_i2c" } },
        { "$ref": "#/definitions/rc522_i2c" }
      ],
      "markdownDescription": "The `rc522_i2c` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [I\u00b2C](https://esphome.io/components/i2c.html#i2c) (also available over SPI). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522.\n\n*See also: [rc522 Over I\u00b2C](https://esphome.io/components/binary_sensor/rc522.html#over-i2c)*"
    },
    "rc522_spi": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rc522_spi" } },
        { "$ref": "#/definitions/rc522_spi" }
      ],
      "markdownDescription": "The `rc522_spi` component allows you to use RC522 RFID controllers with ESPHome. This component is a global hub that establishes the connection to the RC522 via [SPI](https://esphome.io/components/spi.html#spi) (also available over I\u00b2C). Using the [RC522 binary sensors](https://esphome.io/components/binary_sensor/rc522.html#rc522-tag) you can then create individual binary sensors that track if an RFID tag is currently detected by the RC522.\n\n*See also: [rc522 Over SPI](https://esphome.io/components/binary_sensor/rc522.html#over-spi)*"
    },
    "rdm6300": {
      "allOf": [
        {
          "properties": {
            "on_tag": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a tag is read. See [on_tag](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-on-tag).\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for this component.\n\n\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `rdm6300` component allows you to use RDM6300 NFC/RFID controllers ([datasheet](https://elty.pl/upload/download/RFID/RDM630-Spec.pdf), [iTead](https://www.itead.cc/rdm6300.html)) with ESPHome. This component is a global hub that establishes the connection to the RDM6300 via [UART](https://esphome.io/components/uart.html#uart) and translates the received data. Using the [RDM6300 binary sensors](https://esphome.io/components/binary_sensor/rdm6300.html#rdm6300-tag) you can then create individual binary sensors that track if an NFC/RFID tag is currently detected by the RDM6300.\n\n*See also: [rdm6300 Component/Hub](https://esphome.io/components/binary_sensor/rdm6300.html#component-hub)*"
    },
    "remote_receiver": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/remote_receiver" }
        },
        { "$ref": "#/definitions/remote_receiver" }
      ],
      "markdownDescription": "The `remote_receiver` component lets you receive and decode any remote signal, these can for example be infrared remotes or 433MHz signals.\n\n*See also: [Remote Receiver](https://esphome.io/components/remote_receiver.html#remote-receiver)*"
    },
    "remote_transmitter": {
      "anyOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/remote_transmitter" }
        },
        { "$ref": "#/definitions/remote_transmitter" }
      ],
      "markdownDescription": "The `remote_transmitter` component lets you send digital packets to control devices in your home. For example this includes infrared data or 433MHz RF signals.\n\n*See also: [Remote Transmitter](https://esphome.io/components/remote_transmitter.html#remote-transmitter)*"
    },
    "rf_bridge": {
      "allOf": [
        {
          "properties": {
            "on_code_received": {
              "$ref": "#/definitions/simple_automation",
              "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An action to be performed when a code is received. See [on_code_received Trigger](https://esphome.io/components/rf_bridge.html#rf-bridge-on-code-received).\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            },
            "on_advanced_code_received": {
              "$ref": "#/definitions/simple_automation"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the UART hub.\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `RF Bridge` Component provides the ability to send and receive 433MHz remote codes without hardware hacking the circuit board to bypass the `efm8bb1` MCU. This component implements the communication protocol that the original `efm8bb1` firmware implements. The device is connected via the [UART bus](https://esphome.io/components/uart.html). The uart bus must be configured at the same speed of the module which is 19200bps.\n\n*See also: [RF Bridge Component](https://esphome.io/components/rf_bridge.html#rf-bridge-component)*"
    },
    "rtttl": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/rtttl" } },
        { "$ref": "#/definitions/rtttl" }
      ],
      "markdownDescription": "The `rtttl`, component allows you to easily connect a passive piezo buzzer to your microcontroller and play monophonic songs. It accepts the Ring Tone Text Transfer Language, rtttl format ([Wikipedia](https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language)) which allows to store simple melodies.\n\n*See also: [Rtttl Buzzer](https://esphome.io/components/rtttl.html#rtttl-buzzer)*"
    },
    "ruuvi_ble": { "properties": {}, "type": ["object", "null"] },
    "script": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/script" } },
        { "$ref": "#/definitions/script" }
      ]
    },
    "servo": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/servo" } },
        { "$ref": "#/definitions/servo" }
      ],
      "markdownDescription": "The `servo` component allows you to use servo motors with ESPHome. Servos are motor controllers that contain all the electronics necessary for driving the motor and provide a simple PWM interface to control the motor.\n\n*See also: [Servo Component](https://esphome.io/components/servo.html#servo-component)*"
    },
    "sim800l": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sim800l" } },
        { "$ref": "#/definitions/sim800l" }
      ],
      "markdownDescription": "The `SIM800L` Component provides the ability to dial, send and receive SMS text messages. The device must be connected via a [UART bus](https://esphome.io/components/uart.html) supporting both receiving and transmitting line. The UART bus must be configured at the same speed of the module which is by default 9600bps. The required connection wires are `+VCC`, `GND`, `RX` and `TX`.\n\n*See also: [Sim800L Component](https://esphome.io/components/sim800l.html#sim800l-component)*"
    },
    "sm16716": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sm16716" } },
        { "$ref": "#/definitions/sm16716" }
      ],
      "markdownDescription": "The SM16716 component represents a SM16716 LED diver chain ([SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf), [SM16716 description](https://github.com/sowbug/sm16716/blob/master/SM16716%20Datasheet%20%5BChinese%5D.pdf)) in ESPHome. Communication is done with two GPIO pins (MOSI and SCLK) and multiple driver chips can be chained. It is used in some smart light bulbs:\n\n*See also: [sm16716 Component/Hub](https://esphome.io/components/output/sm16716.html#component-hub)*"
    },
    "sm2135": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sm2135" } },
        { "$ref": "#/definitions/sm2135" }
      ],
      "markdownDescription": "The SM2135 component represents a SM2135 LED diver chain ([SM2135 description](https://github.com/arendst/Sonoff-Tasmota/files/3656603/SM2135E_zh-CN_en-US_translated.pdf), [SM2135 description](https://github.com/arendst/Sonoff-Tasmota/files/3656603/SM2135E_zh-CN_en-US_translated.pdf)) in ESPHome. Communication is done with two GPIO pins (MOSI and SCLK). It is used in some smart light bulbs:\n\n*See also: [sm2135 Component/Hub](https://esphome.io/components/output/sm2135.html#component-hub)*"
    },
    "sn74hc595": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sn74hc595" } },
        { "$ref": "#/definitions/sn74hc595" }
      ],
      "markdownDescription": "The SN74HC595 component allows you to use SN74HC595 shift registers as I/O expanders ([datasheet](http://www.ti.com/lit/ds/symlink/sn74hc595.pdf), [SparkFun](https://www.sparkfun.com/products/13699)) in ESPHome. It uses 3 wires (optionally 4) for communication.\n\n*See also: [SN74HC595 I/O Expander (shift register)](https://esphome.io/components/sn74hc595.html#sn74hc595-i-o-expander-shift-register)*"
    },
    "socket": {
      "properties": {
        "implementation": { "enum": ["lwip_tcp", "bsd_sockets"] }
      },
      "type": ["object", "null"]
    },
    "spi": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/spi" } },
        { "$ref": "#/definitions/spi" }
      ],
      "markdownDescription": "SPI is a very common high-speed protocol for a lot of devices. The SPI bus usually consists of 4 wires:\n\n*See also: [SPI Bus](https://esphome.io/components/spi.html#spi-bus)*"
    },
    "status_led": {
      "allOf": [
        {
          "properties": {
            "pin": {
              "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
              "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: The GPIO pin to operate the status LED on.\n\n\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#configuration-variables)*"
            },
            "id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"],
          "required_": ["pin"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `status_led` hooks into all ESPHome components and can indicate the status of the device. Specifically, it will:\n\n*See also: [Status LED](https://esphome.io/components/status_led.html#status-led)*"
    },
    "substitutions": { "properties": {}, "type": ["object", "null"] },
    "sun": {
      "properties": {
        "latitude": {
          "type": "number",
          "markdownDescription": "**float**: The latitude for performing the calculation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "longitude": {
          "type": "number",
          "markdownDescription": "**float**: The longitude for performing the calculation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "on_sunrise": {
          "$ref": "#/definitions/sun-on_sunrise",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform at sunrise when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to -0.833\u00b0 (the horizon, slightly less than 0\u00b0 to compensate for atmospheric refraction).\n  \n  \n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "on_sunset": {
          "$ref": "#/definitions/sun-on_sunset",
          "markdownDescription": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform at sunset when the sun crosses a specified angle.\n  * **elevation** (*Optional*, float): The elevation to cross. Defaults to -0.833\u00b0 (the horizon, slightly less than 0\u00b0 to compensate for atmospheric refraction).\n  \n  \n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [Sun](https://esphome.io/components/sun.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["latitude", "longitude"],
      "markdownDescription": "The `sun` component allows you to track the sun\u2019s position in the sky.\n\n*See also: [Sun](https://esphome.io/components/sun.html#sun)*"
    },
    "sx1509": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/sx1509" } },
        { "$ref": "#/definitions/sx1509" }
      ],
      "markdownDescription": "The SX1509 component allows you to expand your I/O capabilities: ([datasheet](https://www.semtech.com/uploads/documents/sx1509_evk_users_guide.pdf), [SparkFun](https://learn.sparkfun.com/tutorials/sx1509-io-expander-breakout-hookup-guide/all)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [SX1509 16 channel I/O Expander with LED driver and keypad engine](https://esphome.io/components/sx1509.html#sx1509-16-channel-i-o-expander-with-led-driver-and-keypad-engine)*"
    },
    "tca9548a": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/tca9548a" } },
        { "$ref": "#/definitions/tca9548a" }
      ],
      "markdownDescription": "The TCA9548A component allows you to use TCA9548A as a I\u00b2C multiplexer ([datasheet](https://www.ti.com/lit/ds/symlink/tca9548a.pdf), [AdaFruit](https://learn.adafruit.com/adafruit-tca9548a-1-to-8-i2c-multiplexer-breakout)) in ESPHome. It uses [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication.\n\n*See also: [TCA9548A I\u00b2C Multiplexer](https://esphome.io/components/tca9548a.html#tca9548a-i2c-multiplexer)*"
    },
    "teleinfo": {
      "allOf": [
        {
          "properties": {
            "historical_mode": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Whether to use historical mode or standard mode. With historical mode, baudrate of 1200 must be used whereas 9600 must be used in standard mode. Defaults to `false`.\n\n\n\n*See also: [teleinfo Component/Hub](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
            },
            "update_interval": {
              "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The interval to check the sensor. Defaults to `60s`.\n\n\n\n*See also: [teleinfo Component/Hub](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
            },
            "uart_id": {
              "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n\n\n*See also: [teleinfo Component/Hub](https://esphome.io/components/sensor/teleinfo.html#configuration-variables)*"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/POLLING_COMPONENT" }
      ],
      "markdownDescription": "The `teleinfo` component allows you to retrieve data from a French electrical counter using Teleinformation ([datasheet](https://www.enedis.fr/sites/default/files/Enedis-NOI-CPT_54E.pdf)). It works with Linky electrical counter but also legacy EDF electrical counter.\n\n*See also: [teleinfo Component/Hub](https://esphome.io/components/sensor/teleinfo.html#component-hub)*"
    },
    "tlc59208f": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/tlc59208f" } },
        { "$ref": "#/definitions/tlc59208f" }
      ]
    },
    "tlc5947": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/tlc5947" } },
        { "$ref": "#/definitions/tlc5947" }
      ],
      "markdownDescription": "This component represents a chain of [TLC5947 24-Channel, 12-Bit PWM LED Drivers](https://www.ti.com/lit/ds/symlink/tlc5947.pdf), which is used e.g. on this [board from Adafruit](https://www.adafruit.com/product/1429).\n\n*See also: [tlc5947 Component/Hub](https://esphome.io/components/output/tlc5947.html#component-hub)*"
    },
    "tm1651": {
      "properties": {
        "clk_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: CLK pin\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        },
        "dio_pin": {
          "$ref": "#/definitions/PIN.OUTPUT_INTERNAL",
          "markdownDescription": "**[Pin Schema](https://esphome.io/guides/configuration-types.html#config-pin-schema)**: DIO pin\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "required_": ["clk_pin", "dio_pin"],
      "markdownDescription": "The `tm1651` display platform allows you to use battery display units based on TM1651 chip, like [this one](https://aliexpress.com/item/32811491559.html) with ESPHome. Currently integration supports level and brightness setting. All updates can be made via lambda expressions.\n\n*See also: [TM1651 Battery Display](https://esphome.io/components/tm1651.html#tm1651-battery-display)*"
    },
    "ttp229_bsf": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ttp229_bsf" } },
        { "$ref": "#/definitions/ttp229_bsf" }
      ]
    },
    "ttp229_lsf": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/ttp229_lsf" } },
        { "$ref": "#/definitions/ttp229_lsf" }
      ]
    },
    "tuya": {
      "allOf": [
        {
          "properties": {
            "ignore_mcu_update_on_datapoints": {
              "anyOf": [
                {
                  "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/REMOTE_BASE.RC_SWITCH_RAW_SCHEMA-protocol-sync[]"
                  }
                }
              ]
            },
            "on_datapoint_update": {
              "$ref": "#/definitions/tuya-on_datapoint_update"
            }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `tuya` component creates a serial connection to the Tuya MCU for platforms to use.\n\n*See also: [Tuya MCU](https://esphome.io/components/tuya.html#tuya-mcu)*"
    },
    "uart": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/uart" } },
        { "$ref": "#/definitions/uart" }
      ],
      "markdownDescription": "UART is a common serial protocol for a lot of devices. For example, when uploading a binary to your ESP you have probably used UART to access the chip. UART (or for Arduino often also called Serial) usually consists of 2 pins:\n\n*See also: [UART Bus](https://esphome.io/components/uart.html#uart-bus)*"
    },
    "web_server": {
      "allOf": [
        {
          "properties": {
            "port": {
              "type": "number",
              "default": 80,
              "markdownDescription": "**int**: The port the web server should open its socket on.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "css_url": {
              "type": "string",
              "default": "https://esphome.io/_static/webserver-v1.min.css",
              "markdownDescription": "**url**: The URL that should be used for the CSS stylesheet. Defaults to [https://esphome.io/_static/webserver-v1.min.css](https://esphome.io/_static/webserver-v1.min.css) (updates will go to `v2`, `v3`, etc). Can be set to empty string.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "css_include": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**local file**: Path to local file to be included in web server index page. Contents of this file will be served as `/0.css` and used as CSS stylesheet by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "js_url": {
              "type": "string",
              "default": "https://esphome.io/_static/webserver-v1.min.js",
              "markdownDescription": "**url**: The URL that should be used for the JS script. Defaults to [https://esphome.io/_static/webserver-v1.min.js](https://esphome.io/_static/webserver-v1.min.js). Can be set to empty string.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "js_include": {
              "type": ["null", "object", "string", "array", "number"],
              "markdownDescription": "**local file**: Path to local file to be included in web server index page. Contents of this file will be served as `/0.js` and used as JS script by internal webserver. Useful when building device without internet access, where you want to use built-in AP and webserver.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "auth": {
              "$ref": "#/definitions/web_server-auth",
              "markdownDescription": "Enables basic authentication with username and password.\n  * **username** (**Required**, string): The username to use for authentication.\n  \n  * **password** (**Required**, string): The password to check for authentication.\n  \n  \n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "include_internal": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**boolean**: Whether `internal` entities should be displayed on the web interface. Defaults to `false`.\n\n\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#configuration-variables)*"
            },
            "ota": { "type": "boolean", "default": true }
          },
          "type": ["object", "null"]
        },
        { "$ref": "#/definitions/CONFIG.COMPONENT_SCHEMA" }
      ],
      "markdownDescription": "The `web_server` component creates a simple web server on the node that can be accessed through any browser and a simple [REST API](https://esphome.io/web-api/index.html). Please note that enabling this component will take up *a lot* of memory and can lead to problems, especially on the ESP8266.\n\n*See also: [Web Server Component](https://esphome.io/components/web_server.html#web-server-component)*"
    },
    "web_server_base": { "properties": {}, "type": ["object", "null"] },
    "wifi": {
      "properties": {
        "networks": {
          "anyOf": [
            { "$ref": "#/definitions/wifi-networks" },
            {
              "type": "array",
              "items": { "$ref": "#/definitions/wifi-networks" }
            }
          ],
          "markdownDescription": "Configure multiple WiFi networks to connect to, the best one that is reachable will be connected to. See [Connecting to Multiple Networks](https://esphome.io/components/wifi.html#wifi-networks).\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "ssid": {
          "type": "string",
          "markdownDescription": "**string**: The name (or [service set identifier](https://www.lifewire.com/definition-of-service-set-identifier-816547)) of the WiFi access point your device should connect to.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "password": {
          "type": ["null", "object", "string", "array", "number"],
          "markdownDescription": "**string**: The password (or PSK) for your WiFi network. Leave empty for no password.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "manual_ip": {
          "$ref": "#/definitions/ethernet-manual_ip",
          "markdownDescription": "Manually configure the static IP of the node.\n  * **static_ip** (**Required**, IPv4 address): The static IP of your node.\n  \n  * **gateway** (**Required**, IPv4 address): The gateway of the local network.\n  \n  * **subnet** (**Required**, IPv4 address): The subnet of the local network.\n  \n  * **dns1** (*Optional*, IPv4 address): The main DNS server to use.\n  \n  * **dns2** (*Optional*, IPv4 address): The backup DNS server to use.\n  \n  \n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "eap": {
          "properties": {
            "identity": { "type": "string" },
            "username": { "type": "string" },
            "password": { "type": "string" },
            "certificate_authority": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "certificate": {
              "type": ["null", "object", "string", "array", "number"]
            },
            "key": { "type": ["null", "object", "string", "array", "number"] }
          },
          "type": ["object", "null"]
        },
        "ap": {
          "$ref": "#/definitions/wifi-ap",
          "markdownDescription": "Enable an access point mode on the node.\n  * **ssid** (*Optional*, string): The name of the access point to create. Leave empty to use the device name.\n  \n  * **password** (*Optional*, string): The password for the access point. Leave empty for no password.\n  \n  * **channel** (*Optional*, int): The channel the AP should operate on from 1 to 14. Defaults to 1.\n  \n  * **manual_ip** (*Optional*): Manually set the IP options for the AP. Same options as manual_ip for station mode.\n  \n  * **ap_timeout** (*Optional*, [Time](https://esphome.io/guides/configuration-types.html#config-time)): The time after which to enable the configured fallback hotspot. Defaults to `1min`.\n  \n  \n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "domain": {
          "type": ["null", "object", "string", "array", "number"],
          "default": ".local",
          "markdownDescription": "**string**: Set the domain of the node hostname used for uploading. For example, if it\u2019s set to `.local`, all uploads will be sent to `<HOSTNAME>.local`. Defaults to `.local`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "reboot_timeout": {
          "properties": {
            "days": { "type": "number" },
            "hours": { "type": "number" },
            "minutes": { "type": "number" },
            "seconds": { "type": "number" },
            "milliseconds": { "type": "number" },
            "microseconds": { "type": "number" }
          },
          "type": ["object", "null"],
          "default": "15min",
          "markdownDescription": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to `0s`, but note that the low level IP stack currently seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to `15min`.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "power_save_mode": {
          "enum": ["NONE", "LIGHT", "HIGH"],
          "markdownDescription": "**string**: The power save mode for the WiFi interface. See [Power Save Mode](https://esphome.io/components/wifi.html#wifi-power-save-mode)\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "fast_connect": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**boolean**: If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to `off`. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "use_address": {
          "type": "string",
          "markdownDescription": "**string**: Manually override what address to use to connect to the ESP. Defaults to auto-generated value. Example, if you have changed your static IP and want to flash OTA to the previously configured IP address.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "output_power": {
          "type": "number",
          "markdownDescription": "**string**: The amount of TX power for the WiFi interface from 10dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        },
        "id": {
          "markdownDescription": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#configuration-variables)*"
        }
      },
      "type": ["object", "null"],
      "markdownDescription": "This core ESPHome component sets up WiFi connections to access points for you. It needs to be in your configuration or otherwise ESPHome will fail in the config validation stage.\n\n*See also: [WiFi Component](https://esphome.io/components/wifi.html#wifi-component)*"
    },
    "wled": { "type": ["null", "object", "string", "array", "number"] },
    "xiaomi_ble": {
      "properties": {},
      "type": ["object", "null"],
      "markdownDescription": "The `xiaomi_ble` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the temperature, humidity, moisture, conductivity, illuminance, formaldehyde, mosquito tablet and battery level of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_ble` listens passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Mijia BLE Sensors](https://esphome.io/components/sensor/xiaomi_ble.html#xiaomi-mijia-ble-sensors)*"
    },
    "xpt2046": {
      "anyOf": [
        { "type": "array", "items": { "$ref": "#/definitions/xpt2046" } },
        { "$ref": "#/definitions/xpt2046" }
      ],
      "markdownDescription": "The `xpt2046` component allows using the touch screen controllers based on the XPT2046 chip ([datasheet](https://datasheetspdf.com/pdf-file/746665/XPTEK/XPT2046/1), [AZ-Delivery](https://www.az-delivery.de/en/products/2-4-tft-lcd-touch-display)) with ESPHome. Many cheap LCD displays contain this controller. The [SPI](https://esphome.io/components/spi.html#spi) is required to be set up in your configuration for this sensor to work.\n\n*See also: [xpt2046 Component/Hub](https://esphome.io/components/binary_sensor/xpt2046.html#component-hub)*"
    }
  }
}
